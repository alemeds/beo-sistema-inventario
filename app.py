import streamlit as st
import sqlite3
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import hashlib
import logging
from contextlib import contextmanager

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="BEO - Sistema de Inventario Completo",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

class BEODatabase:
    def __init__(self, db_name="beo_sistema.db"):
        self.db_name = db_name
        self.init_database()
    
    @contextmanager
    def get_connection(self):
        """Context manager para manejo seguro de conexiones"""
        conn = sqlite3.connect(self.db_name)
        conn.execute("PRAGMA foreign_keys = ON")  # Habilitar foreign keys
        try:
            yield conn
        except Exception as e:
            conn.rollback()
            logger.error(f"Error en transacci√≥n: {e}")
            raise
        finally:
            conn.close()
    
    def init_database(self):
        """Inicializar base de datos con estructura completa"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            
            # Tabla de logias
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS logias (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nombre TEXT NOT NULL UNIQUE,
                    venerable_maestro TEXT,
                    hospitalario TEXT,
                    telefono TEXT,
                    email TEXT,
                    direccion TEXT,
                    activa BOOLEAN DEFAULT 1,
                    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Tabla de hermanos
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS hermanos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nombre_completo TEXT NOT NULL,
                    documento TEXT UNIQUE,
                    logia_id INTEGER,
                    grado TEXT,
                    telefono TEXT,
                    email TEXT,
                    direccion TEXT,
                    activo BOOLEAN DEFAULT 1,
                    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (logia_id) REFERENCES logias (id)
                )
            """)
            
            # Tabla de dep√≥sitos
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS depositos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nombre TEXT NOT NULL UNIQUE,
                    ubicacion TEXT,
                    responsable TEXT,
                    telefono TEXT,
                    activo BOOLEAN DEFAULT 1,
                    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Tabla de elementos - CORREGIDA con constraints
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS elementos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    codigo TEXT NOT NULL UNIQUE,
                    nombre TEXT NOT NULL,
                    categoria TEXT NOT NULL,
                    marca TEXT,
                    modelo TEXT,
                    descripcion TEXT,
                    deposito_id INTEGER,
                    estado TEXT NOT NULL DEFAULT 'disponible' 
                        CHECK (estado IN ('disponible', 'prestado', 'mantenimiento', 'dado_baja')),
                    precio_compra REAL,
                    fecha_compra DATE,
                    observaciones TEXT,
                    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (deposito_id) REFERENCES depositos (id)
                )
            """)
            
            # Tabla de pr√©stamos - CORREGIDA con constraints
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS prestamos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    elemento_id INTEGER NOT NULL,
                    hermano_id INTEGER NOT NULL,
                    beneficiario_tipo TEXT DEFAULT 'hermano' CHECK (beneficiario_tipo IN ('hermano', 'familiar')),
                    beneficiario_nombre TEXT,
                    beneficiario_parentesco TEXT,
                    beneficiario_documento TEXT,
                    direccion_entrega TEXT,
                    duracion_dias INTEGER DEFAULT 30,
                    fecha_prestamo DATE NOT NULL DEFAULT (date('now')),
                    fecha_vencimiento DATE NOT NULL,
                    fecha_devolucion DATE,
                    estado TEXT NOT NULL DEFAULT 'activo' 
                        CHECK (estado IN ('activo', 'devuelto', 'vencido', 'perdido')),
                    observaciones_prestamo TEXT,
                    observaciones_devolucion TEXT,
                    responsable_entrega TEXT,
                    responsable_recepcion TEXT,
                    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (elemento_id) REFERENCES elementos (id),
                    FOREIGN KEY (hermano_id) REFERENCES hermanos (id)
                )
            """)
            
            # Tabla de historial de estados (para auditor√≠a)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS historial_estados (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    elemento_id INTEGER NOT NULL,
                    estado_anterior TEXT,
                    estado_nuevo TEXT NOT NULL,
                    motivo TEXT,
                    usuario TEXT,
                    fecha_cambio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (elemento_id) REFERENCES elementos (id)
                )
            """)
            
            # Triggers para mantener integridad - CLAVE PARA SOLUCIONAR EL PROBLEMA
            cursor.execute("""
                CREATE TRIGGER IF NOT EXISTS actualizar_elemento_prestado
                AFTER INSERT ON prestamos
                WHEN NEW.estado = 'activo'
                BEGIN
                    UPDATE elementos 
                    SET estado = 'prestado', fecha_actualizacion = CURRENT_TIMESTAMP
                    WHERE id = NEW.elemento_id;
                    
                    INSERT INTO historial_estados (elemento_id, estado_anterior, estado_nuevo, motivo)
                    SELECT NEW.elemento_id, 'disponible', 'prestado', 'Pr√©stamo ID: ' || NEW.id;
                END;
            """)
            
            cursor.execute("""
                CREATE TRIGGER IF NOT EXISTS actualizar_elemento_devuelto
                AFTER UPDATE ON prestamos
                WHEN NEW.estado = 'devuelto' AND OLD.estado = 'activo'
                BEGIN
                    UPDATE elementos 
                    SET estado = 'disponible', fecha_actualizacion = CURRENT_TIMESTAMP
                    WHERE id = NEW.elemento_id;
                    
                    INSERT INTO historial_estados (elemento_id, estado_anterior, estado_nuevo, motivo)
                    VALUES (NEW.elemento_id, 'prestado', 'disponible', 'Devoluci√≥n de pr√©stamo ID: ' || NEW.id);
                END;
            """)
            
            # Trigger para prevenir pr√©stamos m√∫ltiples del mismo elemento
            cursor.execute("""
                CREATE TRIGGER IF NOT EXISTS prevenir_prestamo_duplicado
                BEFORE INSERT ON prestamos
                WHEN NEW.estado = 'activo'
                BEGIN
                    SELECT CASE
                        WHEN EXISTS (
                            SELECT 1 FROM prestamos 
                            WHERE elemento_id = NEW.elemento_id 
                            AND estado = 'activo'
                        ) THEN
                            RAISE(ABORT, 'El elemento ya est√° prestado')
                    END;
                END;
            """)
            
            conn.commit()
            logger.info("Base de datos inicializada correctamente")
    
    def verificar_integridad(self):
        """Verificar y corregir inconsistencias en la base de datos"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            
            # Verificar elementos prestados vs pr√©stamos activos
            cursor.execute("""
                SELECT 
                    (SELECT COUNT(*) FROM elementos WHERE estado = 'prestado') as elementos_prestados,
                    (SELECT COUNT(*) FROM prestamos WHERE estado = 'activo') as prestamos_activos
            """)
            elementos_prestados, prestamos_activos = cursor.fetchone()
            
            inconsistencias = []
            
            if elementos_prestados != prestamos_activos:
                inconsistencias.append({
                    'tipo': 'Conteo inconsistente',
                    'descripcion': f'Elementos prestados: {elementos_prestados}, Pr√©stamos activos: {prestamos_activos}'
                })
            
            # Encontrar elementos prestados sin pr√©stamo activo
            cursor.execute("""
                SELECT e.id, e.codigo, e.nombre
                FROM elementos e
                LEFT JOIN prestamos p ON e.id = p.elemento_id AND p.estado = 'activo'
                WHERE e.estado = 'prestado' AND p.id IS NULL
            """)
            elementos_huerfanos = cursor.fetchall()
            
            if elementos_huerfanos:
                inconsistencias.append({
                    'tipo': 'Elementos hu√©rfanos',
                    'descripcion': f'{len(elementos_huerfanos)} elementos marcados como prestados sin pr√©stamo activo'
                })
            
            # Encontrar pr√©stamos activos sin elemento prestado
            cursor.execute("""
                SELECT p.id, p.elemento_id, e.codigo, e.nombre, e.estado
                FROM prestamos p
                JOIN elementos e ON p.elemento_id = e.id
                WHERE p.estado = 'activo' AND e.estado != 'prestado'
            """)
            prestamos_inconsistentes = cursor.fetchall()
            
            if prestamos_inconsistentes:
                inconsistencias.append({
                    'tipo': 'Pr√©stamos inconsistentes',
                    'descripcion': f'{len(prestamos_inconsistentes)} pr√©stamos activos con elementos no prestados'
                })
            
            return {
                'elementos_prestados': elementos_prestados,
                'prestamos_activos': prestamos_activos,
                'inconsistencias': inconsistencias,
                'elementos_huerfanos': elementos_huerfanos,
                'prestamos_inconsistentes': prestamos_inconsistentes
            }
    
    def corregir_inconsistencias(self):
        """Corregir autom√°ticamente las inconsistencias encontradas"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            
            # Corregir elementos hu√©rfanos (prestados sin pr√©stamo activo)
            cursor.execute("""
                UPDATE elementos 
                SET estado = 'disponible', fecha_actualizacion = CURRENT_TIMESTAMP
                WHERE estado = 'prestado' 
                AND id NOT IN (
                    SELECT elemento_id FROM prestamos WHERE estado = 'activo'
                )
            """)
            huerfanos_corregidos = cursor.rowcount
            
            # Corregir pr√©stamos activos con elementos no prestados
            cursor.execute("""
                UPDATE elementos 
                SET estado = 'prestado', fecha_actualizacion = CURRENT_TIMESTAMP
                WHERE id IN (
                    SELECT p.elemento_id 
                    FROM prestamos p 
                    WHERE p.estado = 'activo' AND p.elemento_id = elementos.id
                ) AND estado != 'prestado'
            """)
            elementos_corregidos = cursor.rowcount
            
            conn.commit()
            
            return {
                'huerfanos_corregidos': huerfanos_corregidos,
                'elementos_corregidos': elementos_corregidos
            }

# Instancia global de la base de datos
db = BEODatabase()

def autenticar_usuario():
    """Sistema de autenticaci√≥n simple"""
    if 'autenticado' not in st.session_state:
        st.session_state.autenticado = False
    
    if not st.session_state.autenticado:
        st.title("üèõÔ∏è Sistema BEO - Autenticaci√≥n")
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            with st.form("login"):
                usuario = st.text_input("Usuario")
                password = st.text_input("Contrase√±a", type="password")
                submitted = st.form_submit_button("Ingresar")
                
                if submitted:
                    # Credenciales por defecto
                    if usuario == "beo_admin" and password == "beo2025":
                        st.session_state.autenticado = True
                        st.session_state.usuario = usuario
                        st.rerun()
                    else:
                        st.error("Credenciales incorrectas")
        return False
    
    return True

def cargar_datos():
    """Cargar datos de la base de datos de forma segura"""
    try:
        with db.get_connection() as conn:
            # Cargar logias
            df_logias = pd.read_sql_query("SELECT * FROM logias WHERE activa = 1", conn)
            
            # Cargar hermanos
            df_hermanos = pd.read_sql_query("""
                SELECT h.*, l.nombre as logia_nombre
                FROM hermanos h
                LEFT JOIN logias l ON h.logia_id = l.id
                WHERE h.activo = 1
            """, conn)
            
            # Cargar dep√≥sitos
            df_depositos = pd.read_sql_query("SELECT * FROM depositos WHERE activo = 1", conn)
            
            # Cargar elementos
            df_elementos = pd.read_sql_query("""
                SELECT e.*, d.nombre as deposito_nombre
                FROM elementos e
                LEFT JOIN depositos d ON e.deposito_id = d.id
            """, conn)
            
            # Cargar pr√©stamos con informaci√≥n completa
            df_prestamos = pd.read_sql_query("""
                SELECT p.*, 
                       e.codigo as elemento_codigo, e.nombre as elemento_nombre,
                       h.nombre_completo as hermano_nombre, h.documento as hermano_documento,
                       l.nombre as logia_nombre
                FROM prestamos p
                JOIN elementos e ON p.elemento_id = e.id
                JOIN hermanos h ON p.hermano_id = h.id
                LEFT JOIN logias l ON h.logia_id = l.id
                ORDER BY p.fecha_creacion DESC
            """, conn)
            
            return df_logias, df_hermanos, df_depositos, df_elementos, df_prestamos
    
    except Exception as e:
        st.error(f"Error al cargar datos: {e}")
        logger.error(f"Error al cargar datos: {e}")
        return pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame()

def dashboard():
    """Dashboard principal con diagn√≥sticos mejorados"""
    st.title("üìä Dashboard BEO - Sistema Completo")
    
    # Verificar integridad
    integridad = db.verificar_integridad()
    
    # Alert de estado del sistema
    if integridad['inconsistencias']:
        st.error("‚ö†Ô∏è Se detectaron inconsistencias en el sistema")
        with st.expander("Ver detalles de inconsistencias"):
            for inc in integridad['inconsistencias']:
                st.write(f"**{inc['tipo']}**: {inc['descripcion']}")
        
        if st.button("üîß Corregir Autom√°ticamente"):
            correccion = db.corregir_inconsistencias()
            st.success(f"‚úÖ Correcciones aplicadas: {correccion['huerfanos_corregidos']} elementos hu√©rfanos, {correccion['elementos_corregidos']} elementos corregidos")
            st.rerun()
    else:
        st.success("‚úÖ Sistema √≠ntegro - No se detectaron inconsistencias")
    
    # Cargar datos
    df_logias, df_hermanos, df_depositos, df_elementos, df_prestamos = cargar_datos()
    
    # M√©tricas principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        elementos_disponibles = len(df_elementos[df_elementos['estado'] == 'disponible'])
        st.metric("üü¢ Elementos Disponibles", elementos_disponibles)
    
    with col2:
        elementos_prestados = len(df_elementos[df_elementos['estado'] == 'prestado'])
        st.metric("üî¥ Elementos Prestados", elementos_prestados)
    
    with col3:
        prestamos_activos = len(df_prestamos[df_prestamos['estado'] == 'activo'])
        st.metric("üìã Pr√©stamos Activos", prestamos_activos)
    
    with col4:
        elementos_mantenimiento = len(df_elementos[df_elementos['estado'] == 'mantenimiento'])
        st.metric("üîß En Mantenimiento", elementos_mantenimiento)
    
    # Verificaci√≥n visual de consistencia
    if elementos_prestados == prestamos_activos:
        st.success(f"‚úÖ Consistencia verificada: {elementos_prestados} elementos prestados = {prestamos_activos} pr√©stamos activos")
    else:
        st.error(f"‚ùå Inconsistencia: {elementos_prestados} elementos prestados ‚â† {prestamos_activos} pr√©stamos activos")
    
    # M√©tricas secundarias
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üèõÔ∏è Logias Activas", len(df_logias))
    
    with col2:
        st.metric("üë®‚Äçü§ù‚Äçüë® Hermanos Registrados", len(df_hermanos))
    
    with col3:
        st.metric("üè¢ Dep√≥sitos Activos", len(df_depositos))
    
    with col4:
        total_elementos = len(df_elementos)
        st.metric("üì¶ Total Elementos", total_elementos)
    
    # Alertas de vencimiento
    if not df_prestamos.empty:
        hoy = datetime.now().date()
        prestamos_activos_df = df_prestamos[df_prestamos['estado'] == 'activo'].copy()
        
        if not prestamos_activos_df.empty:
            prestamos_activos_df['fecha_vencimiento'] = pd.to_datetime(prestamos_activos_df['fecha_vencimiento']).dt.date
            
            # Pr√©stamos vencidos
            vencidos = prestamos_activos_df[prestamos_activos_df['fecha_vencimiento'] < hoy]
            
            # Pr√©stamos por vencer (pr√≥ximos 7 d√≠as)
            por_vencer = prestamos_activos_df[
                (prestamos_activos_df['fecha_vencimiento'] >= hoy) & 
                (prestamos_activos_df['fecha_vencimiento'] <= hoy + timedelta(days=7))
            ]
            
            if len(vencidos) > 0:
                st.error(f"üî¥ **Alertas de Vencimiento:** {len(vencidos)} pr√©stamos vencidos")
            elif len(por_vencer) > 0:
                st.warning(f"üü° **Pr√≥ximos a Vencer:** {len(por_vencer)} pr√©stamos vencen en los pr√≥ximos 7 d√≠as")
            else:
                st.success("‚úÖ No hay pr√©stamos pr√≥ximos a vencer en los pr√≥ximos 7 d√≠as")
    
    # Gr√°ficos
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Distribuci√≥n por Estados")
        if not df_elementos.empty:
            estado_counts = df_elementos['estado'].value_counts()
            fig = px.pie(values=estado_counts.values, names=estado_counts.index, 
                        title="Estados de Elementos")
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üìà Pr√©stamos por Logia")
        if not df_prestamos.empty:
            prestamos_logia = df_prestamos[df_prestamos['estado'] == 'activo']['logia_nombre'].value_counts()
            if len(prestamos_logia) > 0:
                fig = px.bar(x=prestamos_logia.index, y=prestamos_logia.values,
                            title="Pr√©stamos Activos por Logia")
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("No hay pr√©stamos activos para mostrar")
    
    # Gr√°ficos adicionales
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("ü¶Ω Elementos por Categor√≠a")
        if not df_elementos.empty:
            categoria_counts = df_elementos['categoria'].value_counts()
            fig = px.bar(x=categoria_counts.index, y=categoria_counts.values,
                        title="Inventario por Categor√≠a")
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üè¢ Elementos por Dep√≥sito")
        if not df_elementos.empty:
            deposito_counts = df_elementos['deposito_nombre'].value_counts()
            fig = px.bar(x=deposito_counts.index, y=deposito_counts.values,
                        title="Distribuci√≥n por Dep√≥sito")
            st.plotly_chart(fig, use_container_width=True)

def gestion_logias():
    """Gesti√≥n completa de logias"""
    st.title("üèõÔ∏è Gesti√≥n de Logias")
    
    tab1, tab2, tab3 = st.tabs(["üìã Ver Logias", "‚ûï Agregar Logia", "‚úèÔ∏è Editar Logia"])
    
    df_logias, df_hermanos, df_depositos, df_elementos, df_prestamos = cargar_datos()
    
    with tab1:
        st.subheader("üìú Lista de Logias")
        
        if not df_logias.empty:
            # Agregar estad√≠sticas por logia
            logias_con_stats = df_logias.copy()
            logias_con_stats['hermanos_count'] = 0
            logias_con_stats['prestamos_activos'] = 0
            
            for idx, logia in logias_con_stats.iterrows():
                hermanos_count = len(df_hermanos[df_hermanos['logia_id'] == logia['id']])
                prestamos_count = len(df_prestamos[
                    (df_prestamos['estado'] == 'activo') & 
                    (df_prestamos['hermano_id'].isin(df_hermanos[df_hermanos['logia_id'] == logia['id']]['id']))
                ])
                logias_con_stats.loc[idx, 'hermanos_count'] = hermanos_count
                logias_con_stats.loc[idx, 'prestamos_activos'] = prestamos_count
            
            # Mostrar tabla con informaci√≥n completa
            st.dataframe(
                logias_con_stats[['nombre', 'venerable_maestro', 'hospitalario', 'telefono', 'email', 'hermanos_count', 'prestamos_activos']],
                column_config={
                    'nombre': 'Nombre de la Logia',
                    'venerable_maestro': 'Venerable Maestro',
                    'hospitalario': 'Hospitalario',
                    'telefono': 'Tel√©fono',
                    'email': 'Email',
                    'hermanos_count': 'Hermanos',
                    'prestamos_activos': 'Pr√©stamos Activos'
                },
                use_container_width=True
            )
        else:
            st.info("No hay logias registradas")
    
    with tab2:
        st.subheader("‚ûï Registrar Nueva Logia")
        
        with st.form("agregar_logia"):
            col1, col2 = st.columns(2)
            
            with col1:
                nombre = st.text_input("Nombre de la Logia*", help="Nombre completo de la logia mas√≥nica")
                venerable_maestro = st.text_input("Venerable Maestro*")
                hospitalario = st.text_input("Hospitalario*")
            
            with col2:
                telefono = st.text_input("Tel√©fono de Contacto")
                email = st.text_input("Email de Contacto")
                direccion = st.text_area("Direcci√≥n de la Logia")
            
            submitted = st.form_submit_button("üíæ Registrar Logia")
            
            if submitted:
                if nombre and venerable_maestro and hospitalario:
                    try:
                        with db.get_connection() as conn:
                            cursor = conn.cursor()
                            cursor.execute("""
                                INSERT INTO logias (nombre, venerable_maestro, hospitalario, telefono, email, direccion)
                                VALUES (?, ?, ?, ?, ?, ?)
                            """, (nombre, venerable_maestro, hospitalario, telefono, email, direccion))
                            conn.commit()
                            st.success("‚úÖ Logia registrada correctamente")
                            st.rerun()
                    except sqlite3.IntegrityError:
                        st.error("‚ùå Error: Ya existe una logia con ese nombre")
                    except Exception as e:
                        st.error(f"Error al registrar logia: {e}")
                else:
                    st.error("‚ùå Por favor complete los campos obligatorios (*)")
    
    with tab3:
        st.subheader("‚úèÔ∏è Editar Logia Existente")
        
        if not df_logias.empty:
            logia_seleccionada = st.selectbox(
                "Seleccionar logia a editar:",
                options=df_logias['id'].tolist(),
                format_func=lambda x: df_logias[df_logias['id'] == x]['nombre'].iloc[0]
            )
            
            if logia_seleccionada:
                logia_data = df_logias[df_logias['id'] == logia_seleccionada].iloc[0]
                
                with st.form("editar_logia"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        nombre = st.text_input("Nombre de la Logia*", value=logia_data['nombre'])
                        venerable_maestro = st.text_input("Venerable Maestro*", value=logia_data['venerable_maestro'] or "")
                        hospitalario = st.text_input("Hospitalario*", value=logia_data['hospitalario'] or "")
                    
                    with col2:
                        telefono = st.text_input("Tel√©fono", value=logia_data['telefono'] or "")
                        email = st.text_input("Email", value=logia_data['email'] or "")
                        direccion = st.text_area("Direcci√≥n", value=logia_data['direccion'] or "")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        submitted = st.form_submit_button("üíæ Actualizar Logia")
                    with col2:
                        desactivar = st.form_submit_button("üóëÔ∏è Desactivar Logia", type="secondary")
                    
                    if submitted:
                        if nombre and venerable_maestro and hospitalario:
                            try:
                                with db.get_connection() as conn:
                                    cursor = conn.cursor()
                                    cursor.execute("""
                                        UPDATE logias 
                                        SET nombre = ?, venerable_maestro = ?, hospitalario = ?, 
                                            telefono = ?, email = ?, direccion = ?
                                        WHERE id = ?
                                    """, (nombre, venerable_maestro, hospitalario, telefono, email, direccion, logia_seleccionada))
                                    conn.commit()
                                    st.success("‚úÖ Logia actualizada correctamente")
                                    st.rerun()
                            except Exception as e:
                                st.error(f"Error al actualizar logia: {e}")
                        else:
                            st.error("‚ùå Por favor complete los campos obligatorios (*)")
                    
                    if desactivar:
                        try:
                            with db.get_connection() as conn:
                                cursor = conn.cursor()
                                cursor.execute("UPDATE logias SET activa = 0 WHERE id = ?", (logia_seleccionada,))
                                conn.commit()
                                st.success("‚úÖ Logia desactivada correctamente")
                                st.rerun()
                        except Exception as e:
                            st.error(f"Error al desactivar logia: {e}")
        else:
            st.info("No hay logias registradas para editar")

def gestion_hermanos():
    """Gesti√≥n completa de hermanos"""
    st.title("üë®‚Äçü§ù‚Äçüë® Gesti√≥n de Hermanos")
    
    tab1, tab2, tab3 = st.tabs(["üìã Ver Hermanos", "‚ûï Agregar Hermano", "‚úèÔ∏è Editar Hermano"])
    
    df_logias, df_hermanos, df_depositos, df_elementos, df_prestamos = cargar_datos()
    
    with tab1:
        st.subheader("üë• Lista de Hermanos")
        
        # Filtros
        col1, col2, col3 = st.columns(3)
        with col1:
            filtro_logia = st.selectbox("Filtrar por Logia:", 
                                      ["Todas"] + list(df_hermanos['logia_nombre'].dropna().unique()))
        with col2:
            filtro_grado = st.selectbox("Filtrar por Grado:", 
                                      ["Todos"] + list(df_hermanos['grado'].dropna().unique()))
        with col3:
            buscar_nombre = st.text_input("Buscar por nombre:")
        
        # Aplicar filtros
        df_filtrado = df_hermanos.copy()
        if filtro_logia != "Todas":
            df_filtrado = df_filtrado[df_filtrado['logia_nombre'] == filtro_logia]
        if filtro_grado != "Todos":
            df_filtrado = df_filtrado[df_filtrado['grado'] == filtro_grado]
        if buscar_nombre:
            df_filtrado = df_filtrado[df_filtrado['nombre_completo'].str.contains(buscar_nombre, case=False, na=False)]
        
        if not df_filtrado.empty:
            # Agregar estad√≠sticas de pr√©stamos
            hermanos_con_stats = df_filtrado.copy()
            hermanos_con_stats['prestamos_activos'] = 0
            hermanos_con_stats['total_prestamos'] = 0
            
            for idx, hermano in hermanos_con_stats.iterrows():
                activos = len(df_prestamos[
                    (df_prestamos['hermano_id'] == hermano['id']) & 
                    (df_prestamos['estado'] == 'activo')
                ])
                total = len(df_prestamos[df_prestamos['hermano_id'] == hermano['id']])
                hermanos_con_stats.loc[idx, 'prestamos_activos'] = activos
                hermanos_con_stats.loc[idx, 'total_prestamos'] = total
            
            st.dataframe(
                hermanos_con_stats[['nombre_completo', 'documento', 'logia_nombre', 'grado', 'telefono', 'email', 'prestamos_activos', 'total_prestamos']],
                column_config={
                    'nombre_completo': 'Nombre Completo',
                    'documento': 'Documento',
                    'logia_nombre': 'Logia',
                    'grado': 'Grado',
                    'telefono': 'Tel√©fono',
                    'email': 'Email',
                    'prestamos_activos': 'Pr√©stamos Activos',
                    'total_prestamos': 'Total Pr√©stamos'
                },
                use_container_width=True
            )
        else:
            st.info("No se encontraron hermanos con los filtros aplicados")
    
    with tab2:
        st.subheader("‚ûï Registrar Nuevo Hermano")
        
        with st.form("agregar_hermano"):
            col1, col2 = st.columns(2)
            
            with col1:
                nombre_completo = st.text_input("Nombre Completo*")
                documento = st.text_input("Documento de Identidad*")
                if not df_logias.empty:
                    logia_id = st.selectbox("Logia*", 
                                          options=[None] + df_logias['id'].tolist(),
                                          format_func=lambda x: "Seleccionar logia..." if x is None else df_logias[df_logias['id'] == x]['nombre'].iloc[0])
                else:
                    st.warning("‚ö†Ô∏è Primero debe registrar al menos una logia")
                    logia_id = None
                grado = st.selectbox("Grado Mas√≥nico*", 
                                   ["Aprendiz", "Compa√±ero", "Maestro Mas√≥n", "Grado Superior"])
            
            with col2:
                telefono = st.text_input("Tel√©fono de Contacto")
                email = st.text_input("Email")
                direccion = st.text_area("Direcci√≥n de Residencia")
            
            submitted = st.form_submit_button("üíæ Registrar Hermano")
            
            if submitted:
                if nombre_completo and documento and logia_id and grado:
                    try:
                        with db.get_connection() as conn:
                            cursor = conn.cursor()
                            cursor.execute("""
                                INSERT INTO hermanos (nombre_completo, documento, logia_id, grado, telefono, email, direccion)
                                VALUES (?, ?, ?, ?, ?, ?, ?)
                            """, (nombre_completo, documento, logia_id, grado, telefono, email, direccion))
                            conn.commit()
                            st.success("‚úÖ Hermano registrado correctamente")
                            st.rerun()
                    except sqlite3.IntegrityError:
                        st.error("‚ùå Error: Ya existe un hermano con ese documento")
                    except Exception as e:
                        st.error(f"Error al registrar hermano: {e}")
                else:
                    st.error("‚ùå Por favor complete los campos obligatorios (*)")
    
    with tab3:
        st.subheader("‚úèÔ∏è Editar Hermano Existente")
        
        if not df_hermanos.empty:
            hermano_seleccionado = st.selectbox(
                "Seleccionar hermano a editar:",
                options=df_hermanos['id'].tolist(),
                format_func=lambda x: f"{df_hermanos[df_hermanos['id'] == x]['nombre_completo'].iloc[0]} ({df_hermanos[df_hermanos['id'] == x]['documento'].iloc[0]})"
            )
            
            if hermano_seleccionado:
                hermano_data = df_hermanos[df_hermanos['id'] == hermano_seleccionado].iloc[0]
                
                with st.form("editar_hermano"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        nombre_completo = st.text_input("Nombre Completo*", value=hermano_data['nombre_completo'])
                        documento = st.text_input("Documento*", value=hermano_data['documento'] or "")
                        if not df_logias.empty:
                            logia_actual_index = df_logias['id'].tolist().index(hermano_data['logia_id']) if hermano_data['logia_id'] in df_logias['id'].tolist() else 0
                            logia_id = st.selectbox("Logia*", 
                                                  options=df_logias['id'].tolist(),
                                                  index=logia_actual_index,
                                                  format_func=lambda x: df_logias[df_logias['id'] == x]['nombre'].iloc[0])
                        grado = st.selectbox("Grado Mas√≥nico*", 
                                           ["Aprendiz", "Compa√±ero", "Maestro Mas√≥n", "Grado Superior"],
                                           index=["Aprendiz", "Compa√±ero", "Maestro Mas√≥n", "Grado Superior"].index(hermano_data['grado']) if hermano_data['grado'] in ["Aprendiz", "Compa√±ero", "Maestro Mas√≥n", "Grado Superior"] else 0)
                    
                    with col2:
                        telefono = st.text_input("Tel√©fono", value=hermano_data['telefono'] or "")
                        email = st.text_input("Email", value=hermano_data['email'] or "")
                        direccion = st.text_area("Direcci√≥n", value=hermano_data['direccion'] or "")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        submitted = st.form_submit_button("üíæ Actualizar Hermano")
                    with col2:
                        desactivar = st.form_submit_button("üóëÔ∏è Desactivar Hermano", type="secondary")
                    
                    if submitted:
                        if nombre_completo and documento and logia_id and grado:
                            try:
                                with db.get_connection() as conn:
                                    cursor = conn.cursor()
                                    cursor.execute("""
                                        UPDATE hermanos 
                                        SET nombre_completo = ?, documento = ?, logia_id = ?, grado = ?, 
                                            telefono = ?, email = ?, direccion = ?
                                        WHERE id = ?
                                    """, (nombre_completo, documento, logia_id, grado, telefono, email, direccion, hermano_seleccionado))
                                    conn.commit()
                                    st.success("‚úÖ Hermano actualizado correctamente")
                                    st.rerun()
                            except Exception as e:
                                st.error(f"Error al actualizar hermano: {e}")
                        else:
                            st.error("‚ùå Por favor complete los campos obligatorios (*)")
                    
                    if desactivar:
                        # Verificar si tiene pr√©stamos activos
                        prestamos_activos = len(df_prestamos[
                            (df_prestamos['hermano_id'] == hermano_seleccionado) & 
                            (df_prestamos['estado'] == 'activo')
                        ])
                        
                        if prestamos_activos > 0:
                            st.error(f"‚ùå No se puede desactivar: el hermano tiene {prestamos_activos} pr√©stamos activos")
                        else:
                            try:
                                with db.get_connection() as conn:
                                    cursor = conn.cursor()
                                    cursor.execute("UPDATE hermanos SET activo = 0 WHERE id = ?", (hermano_seleccionado,))
                                    conn.commit()
                                    st.success("‚úÖ Hermano desactivado correctamente")
                                    st.rerun()
                            except Exception as e:
                                st.error(f"Error al desactivar hermano: {e}")
        else:
            st.info("No hay hermanos registrados para editar")

def gestion_depositos():
    """Gesti√≥n completa de dep√≥sitos"""
    st.title("üè¢ Gesti√≥n de Dep√≥sitos")
    
    tab1, tab2, tab3 = st.tabs(["üìã Ver Dep√≥sitos", "‚ûï Agregar Dep√≥sito", "‚úèÔ∏è Editar Dep√≥sito"])
    
    df_logias, df_hermanos, df_depositos, df_elementos, df_prestamos = cargar_datos()
    
    with tab1:
        st.subheader("üè™ Lista de Dep√≥sitos")
        
        if not df_depositos.empty:
            # Agregar estad√≠sticas por dep√≥sito
            depositos_con_stats = df_depositos.copy()
            depositos_con_stats['elementos_total'] = 0
            depositos_con_stats['elementos_disponibles'] = 0
            depositos_con_stats['elementos_prestados'] = 0
            
            for idx, deposito in depositos_con_stats.iterrows():
                elementos_deposito = df_elementos[df_elementos['deposito_id'] == deposito['id']]
                total = len(elementos_deposito)
                disponibles = len(elementos_deposito[elementos_deposito['estado'] == 'disponible'])
                prestados = len(elementos_deposito[elementos_deposito['estado'] == 'prestado'])
                
                depositos_con_stats.loc[idx, 'elementos_total'] = total
                depositos_con_stats.loc[idx, 'elementos_disponibles'] = disponibles
                depositos_con_stats.loc[idx, 'elementos_prestados'] = prestados
            
            st.dataframe(
                depositos_con_stats[['nombre', 'ubicacion', 'responsable', 'telefono', 'elementos_total', 'elementos_disponibles', 'elementos_prestados']],
                column_config={
                    'nombre': 'Nombre del Dep√≥sito',
                    'ubicacion': 'Ubicaci√≥n',
                    'responsable': 'Responsable',
                    'telefono': 'Tel√©fono',
                    'elementos_total': 'Total Elementos',
                    'elementos_disponibles': 'Disponibles',
                    'elementos_prestados': 'Prestados'
                },
                use_container_width=True
            )
        else:
            st.info("No hay dep√≥sitos registrados")
    
    with tab2:
        st.subheader("‚ûï Registrar Nuevo Dep√≥sito")
        
        with st.form("agregar_deposito"):
            col1, col2 = st.columns(2)
            
            with col1:
                nombre = st.text_input("Nombre del Dep√≥sito*", help="Nombre identificatorio del dep√≥sito")
                ubicacion = st.text_input("Ubicaci√≥n*", help="Direcci√≥n o ubicaci√≥n f√≠sica")
                responsable = st.text_input("Responsable*", help="Persona encargada del dep√≥sito")
            
            with col2:
                telefono = st.text_input("Tel√©fono de Contacto")
                observaciones = st.text_area("Observaciones", help="Informaci√≥n adicional sobre el dep√≥sito")
            
            submitted = st.form_submit_button("üíæ Registrar Dep√≥sito")
            
            if submitted:
                if nombre and ubicacion and responsable:
                    try:
                        with db.get_connection() as conn:
                            cursor = conn.cursor()
                            cursor.execute("""
                                INSERT INTO depositos (nombre, ubicacion, responsable, telefono)
                                VALUES (?, ?, ?, ?)
                            """, (nombre, ubicacion, responsable, telefono))
                            conn.commit()
                            st.success("‚úÖ Dep√≥sito registrado correctamente")
                            st.rerun()
                    except sqlite3.IntegrityError:
                        st.error("‚ùå Error: Ya existe un dep√≥sito con ese nombre")
                    except Exception as e:
                        st.error(f"Error al registrar dep√≥sito: {e}")
                else:
                    st.error("‚ùå Por favor complete los campos obligatorios (*)")
    
    with tab3:
        st.subheader("‚úèÔ∏è Editar Dep√≥sito Existente")
        
        if not df_depositos.empty:
            deposito_seleccionado = st.selectbox(
                "Seleccionar dep√≥sito a editar:",
                options=df_depositos['id'].tolist(),
                format_func=lambda x: df_depositos[df_depositos['id'] == x]['nombre'].iloc[0]
            )
            
            if deposito_seleccionado:
                deposito_data = df_depositos[df_depositos['id'] == deposito_seleccionado].iloc[0]
                
                with st.form("editar_deposito"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        nombre = st.text_input("Nombre del Dep√≥sito*", value=deposito_data['nombre'])
                        ubicacion = st.text_input("Ubicaci√≥n*", value=deposito_data['ubicacion'] or "")
                        responsable = st.text_input("Responsable*", value=deposito_data['responsable'] or "")
                    
                    with col2:
                        telefono = st.text_input("Tel√©fono", value=deposito_data['telefono'] or "")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        submitted = st.form_submit_button("üíæ Actualizar Dep√≥sito")
                    with col2:
                        desactivar = st.form_submit_button("üóëÔ∏è Desactivar Dep√≥sito", type="secondary")
                    
                    if submitted:
                        if nombre and ubicacion and responsable:
                            try:
                                with db.get_connection() as conn:
                                    cursor = conn.cursor()
                                    cursor.execute("""
                                        UPDATE depositos 
                                        SET nombre = ?, ubicacion = ?, responsable = ?, telefono = ?
                                        WHERE id = ?
                                    """, (nombre, ubicacion, responsable, telefono, deposito_seleccionado))
                                    conn.commit()
                                    st.success("‚úÖ Dep√≥sito actualizado correctamente")
                                    st.rerun()
                            except Exception as e:
                                st.error(f"Error al actualizar dep√≥sito: {e}")
                        else:
                            st.error("‚ùå Por favor complete los campos obligatorios (*)")
                    
                    if desactivar:
                        # Verificar si tiene elementos
                        elementos_en_deposito = len(df_elementos[df_elementos['deposito_id'] == deposito_seleccionado])
                        
                        if elementos_en_deposito > 0:
                            st.error(f"‚ùå No se puede desactivar: el dep√≥sito tiene {elementos_en_deposito} elementos asignados")
                        else:
                            try:
                                with db.get_connection() as conn:
                                    cursor = conn.cursor()
                                    cursor.execute("UPDATE depositos SET activo = 0 WHERE id = ?", (deposito_seleccionado,))
                                    conn.commit()
                                    st.success("‚úÖ Dep√≥sito desactivado correctamente")
                                    st.rerun()
                            except Exception as e:
                                st.error(f"Error al desactivar dep√≥sito: {e}")
        else:
            st.info("No hay dep√≥sitos registrados para editar")

def gestion_elementos():
    """Gesti√≥n completa de elementos"""
    st.title("ü¶Ω Gesti√≥n de Elementos")
    
    tab1, tab2, tab3, tab4 = st.tabs(["üìã Ver Elementos", "‚ûï Agregar", "‚úèÔ∏è Editar", "üîß Mantenimiento"])
    
    df_logias, df_hermanos, df_depositos, df_elementos, df_prestamos = cargar_datos()
    
    with tab1:
        st.subheader("üì¶ Inventario de Elementos")
        
        # Filtros
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            filtro_estado = st.selectbox("Filtrar por estado:", 
                                       ["Todos"] + list(df_elementos['estado'].unique()))
        with col2:
            filtro_categoria = st.selectbox("Filtrar por categor√≠a:", 
                                          ["Todas"] + list(df_elementos['categoria'].unique()))
        with col3:
            filtro_deposito = st.selectbox("Filtrar por dep√≥sito:", 
                                         ["Todos"] + list(df_elementos['deposito_nombre'].dropna().unique()))
        with col4:
            buscar_codigo = st.text_input("Buscar por c√≥digo/nombre:")
        
        # Aplicar filtros
        df_filtrado = df_elementos.copy()
        if filtro_estado != "Todos":
            df_filtrado = df_filtrado[df_filtrado['estado'] == filtro_estado]
        if filtro_categoria != "Todas":
            df_filtrado = df_filtrado[df_filtrado['categoria'] == filtro_categoria]
        if filtro_deposito != "Todos":
            df_filtrado = df_filtrado[df_filtrado['deposito_nombre'] == filtro_deposito]
        if buscar_codigo:
            df_filtrado = df_filtrado[
                df_filtrado['codigo'].str.contains(buscar_codigo, case=False, na=False) |
                df_filtrado['nombre'].str.contains(buscar_codigo, case=False, na=False)
            ]
        
        # Mostrar elementos
        if not df_filtrado.empty:
            st.dataframe(
                df_filtrado[['codigo', 'nombre', 'categoria', 'marca', 'modelo', 'estado', 'deposito_nombre', 'precio_compra']],
                column_config={
                    'codigo': 'C√≥digo',
                    'nombre': 'Nombre',
                    'categoria': 'Categor√≠a', 
                    'marca': 'Marca',
                    'modelo': 'Modelo',
                    'estado': 'Estado',
                    'deposito_nombre': 'Dep√≥sito',
                    'precio_compra': st.column_config.NumberColumn('Precio', format="$%.2f")
                },
                use_container_width=True
            )
        else:
            st.info("No se encontraron elementos con los filtros aplicados")
    
    with tab2:
        st.subheader("‚ûï Agregar Nuevo Elemento")
        
        with st.form("agregar_elemento"):
            col1, col2 = st.columns(2)
            
            with col1:
                codigo = st.text_input("C√≥digo √∫nico*", help="C√≥digo identificador √∫nico del elemento")
                nombre = st.text_input("Nombre del elemento*")
                categoria = st.selectbox("Categor√≠a*", 
                                       ["Bastones", "Sillas de Ruedas", "Andadores", "Camas Ortop√©dicas", 
                                        "Equipos de Rehabilitaci√≥n", "Muletas", "Otros"])
                marca = st.text_input("Marca")
                modelo = st.text_input("Modelo")
                descripcion = st.text_area("Descripci√≥n")
            
            with col2:
                if not df_depositos.empty:
                    deposito_id = st.selectbox("Dep√≥sito*", 
                                             options=[None] + df_depositos['id'].tolist(),
                                             format_func=lambda x: "Seleccionar dep√≥sito..." if x is None else df_depositos[df_depositos['id'] == x]['nombre'].iloc[0])
                else:
                    st.warning("‚ö†Ô∏è Primero debe registrar al menos un dep√≥sito")
                    deposito_id = None
                
                precio_compra = st.number_input("Precio de compra", min_value=0.0, step=100.0)
                fecha_compra = st.date_input("Fecha de compra")
                observaciones = st.text_area("Observaciones")
            
            submitted = st.form_submit_button("üíæ Guardar Elemento")
            
            if submitted:
                if codigo and nombre and categoria and deposito_id:
                    try:
                        with db.get_connection() as conn:
                            cursor = conn.cursor()
                            cursor.execute("""
                                INSERT INTO elementos (codigo, nombre, categoria, marca, modelo, descripcion,
                                                     deposito_id, precio_compra, fecha_compra, observaciones)
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                            """, (codigo, nombre, categoria, marca, modelo, descripcion,
                                 deposito_id, precio_compra, fecha_compra, observaciones))
                            conn.commit()
                            st.success("‚úÖ Elemento agregado correctamente")
                            st.rerun()
                    except sqlite3.IntegrityError:
                        st.error("‚ùå Error: El c√≥digo ya existe. Use un c√≥digo √∫nico.")
                    except Exception as e:
                        st.error(f"Error al agregar elemento: {e}")
                else:
                    st.error("‚ùå Por favor complete los campos obligatorios (*)")
    
    with tab3:
        st.subheader("‚úèÔ∏è Editar Elemento Existente")
        
        if not df_elementos.empty:
            elemento_seleccionado = st.selectbox(
                "Seleccionar elemento a editar:",
                options=df_elementos['id'].tolist(),
                format_func=lambda x: f"{df_elementos[df_elementos['id'] == x]['codigo'].iloc[0]} - {df_elementos[df_elementos['id'] == x]['nombre'].iloc[0]}"
            )
            
            if elemento_seleccionado:
                elemento_data = df_elementos[df_elementos['id'] == elemento_seleccionado].iloc[0]
                
                with st.form("editar_elemento"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        codigo = st.text_input("C√≥digo √∫nico*", value=elemento_data['codigo'])
                        nombre = st.text_input("Nombre*", value=elemento_data['nombre'])
                        categoria = st.selectbox("Categor√≠a*", 
                                               ["Bastones", "Sillas de Ruedas", "Andadores", "Camas Ortop√©dicas", 
                                                "Equipos de Rehabilitaci√≥n", "Muletas", "Otros"],
                                               index=["Bastones", "Sillas de Ruedas", "Andadores", "Camas Ortop√©dicas", 
                                                     "Equipos de Rehabilitaci√≥n", "Muletas", "Otros"].index(elemento_data['categoria']) if elemento_data['categoria'] in ["Bastones", "Sillas de Ruedas", "Andadores", "Camas Ortop√©dicas", "Equipos de Rehabilitaci√≥n", "Muletas", "Otros"] else 0)
                        marca = st.text_input("Marca", value=elemento_data['marca'] or "")
                        modelo = st.text_input("Modelo", value=elemento_data['modelo'] or "")
                        descripcion = st.text_area("Descripci√≥n", value=elemento_data['descripcion'] or "")
                    
                    with col2:
                        if not df_depositos.empty:
                            deposito_actual_index = df_depositos['id'].tolist().index(elemento_data['deposito_id']) if elemento_data['deposito_id'] in df_depositos['id'].tolist() else 0
                            deposito_id = st.selectbox("Dep√≥sito*", 
                                                     options=df_depositos['id'].tolist(),
                                                     index=deposito_actual_index,
                                                     format_func=lambda x: df_depositos[df_depositos['id'] == x]['nombre'].iloc[0])
                        
                        precio_compra = st.number_input("Precio de compra", min_value=0.0, step=100.0, value=float(elemento_data['precio_compra'] or 0))
                        fecha_compra = st.date_input("Fecha de compra", value=pd.to_datetime(elemento_data['fecha_compra']).date() if elemento_data['fecha_compra'] else datetime.now().date())
                        observaciones = st.text_area("Observaciones", value=elemento_data['observaciones'] or "")
                    
                    submitted = st.form_submit_button("üíæ Actualizar Elemento")
                    
                    if submitted:
                        if codigo and nombre and categoria and deposito_id:
                            try:
                                with db.get_connection() as conn:
                                    cursor = conn.cursor()
                                    cursor.execute("""
                                        UPDATE elementos 
                                        SET codigo = ?, nombre = ?, categoria = ?, marca = ?, modelo = ?, 
                                            descripcion = ?, deposito_id = ?, precio_compra = ?, 
                                            fecha_compra = ?, observaciones = ?, fecha_actualizacion = CURRENT_TIMESTAMP
                                        WHERE id = ?
                                    """, (codigo, nombre, categoria, marca, modelo, descripcion,
                                         deposito_id, precio_compra, fecha_compra, observaciones, elemento_seleccionado))
                                    conn.commit()
                                    st.success("‚úÖ Elemento actualizado correctamente")
                                    st.rerun()
                            except Exception as e:
                                st.error(f"Error al actualizar elemento: {e}")
                        else:
                            st.error("‚ùå Por favor complete los campos obligatorios (*)")
        else:
            st.info("No hay elementos registrados para editar")
    
    with tab4:
        st.subheader("üîß Cambio Manual de Estados")
        st.warning("‚ö†Ô∏è Use esta funci√≥n solo para correcciones administrativas")
        
        if not df_elementos.empty:
            elemento_seleccionado = st.selectbox("Seleccionar elemento:",
                                                options=df_elementos['id'].tolist(),
                                                format_func=lambda x: f"{df_elementos[df_elementos['id'] == x]['codigo'].iloc[0]} - {df_elementos[df_elementos['id'] == x]['nombre'].iloc[0]} (Estado: {df_elementos[df_elementos['id'] == x]['estado'].iloc[0]})")
            
            if elemento_seleccionado:
                elemento_actual = df_elementos[df_elementos['id'] == elemento_seleccionado].iloc[0]
                st.info(f"Estado actual: **{elemento_actual['estado']}**")
                
                nuevo_estado = st.selectbox("Nuevo estado:", 
                                          ["disponible", "prestado", "mantenimiento", "dado_baja"])
                motivo = st.text_input("Motivo del cambio*")
                
                if st.button("üîÑ Cambiar Estado"):
                    if motivo:
                        try:
                            with db.get_connection() as conn:
                                cursor = conn.cursor()
                                
                                # Obtener estado actual
                                cursor.execute("SELECT estado FROM elementos WHERE id = ?", (elemento_seleccionado,))
                                estado_actual = cursor.fetchone()[0]
                                
                                # Actualizar estado
                                cursor.execute("""
                                    UPDATE elementos 
                                    SET estado = ?, fecha_actualizacion = CURRENT_TIMESTAMP
                                    WHERE id = ?
                                """, (nuevo_estado, elemento_seleccionado))
                                
                                # Registrar en historial
                                cursor.execute("""
                                    INSERT INTO historial_estados (elemento_id, estado_anterior, estado_nuevo, motivo, usuario)
                                    VALUES (?, ?, ?, ?, ?)
                                """, (elemento_seleccionado, estado_actual, nuevo_estado, motivo, st.session_state.get('usuario', 'Sistema')))
                                
                                conn.commit()
                                st.success("‚úÖ Estado cambiado correctamente")
                                st.rerun()
                        except Exception as e:
                            st.error(f"Error al cambiar estado: {e}")
                    else:
                        st.error("‚ùå El motivo es obligatorio")
        else:
            st.info("No hay elementos registrados")

def formulario_prestamo():
    """Formulario completo de pr√©stamo BEO"""
    st.title("üìã Formulario de Pr√©stamo BEO")
    
    df_logias, df_hermanos, df_depositos, df_elementos, df_prestamos = cargar_datos()
    
    # Verificar datos necesarios
    if df_hermanos.empty:
        st.error("‚ùå No hay hermanos registrados. Primero debe registrar hermanos.")
        return
    
    elementos_disponibles = df_elementos[df_elementos['estado'] == 'disponible']
    if elementos_disponibles.empty:
        st.error("‚ùå No hay elementos disponibles para pr√©stamo.")
        return
    
    st.info("üìù **Proceso simplificado para recibir elementos devueltos**")
    st.write("**Tip:** Solo completa lo esencial - fecha, qui√©n recibe y qu√© dep√≥sito va")
    
    with st.form("formulario_prestamo"):
        st.subheader("üë®‚Äçü§ù‚Äçüë® Informaci√≥n del Hermano Solicitante")
        
        col1, col2 = st.columns(2)
        
        with col1:
            hermano_id = st.selectbox("Hermano Solicitante*",
                                    options=df_hermanos['id'].tolist(),
                                    format_func=lambda x: f"{df_hermanos[df_hermanos['id'] == x]['nombre_completo'].iloc[0]} - {df_hermanos[df_hermanos['id'] == x]['logia_nombre'].iloc[0]}")
        
        with col2:
            if hermano_id:
                hermano_data = df_hermanos[df_hermanos['id'] == hermano_id].iloc[0]
                st.text_input("Logia", value=hermano_data['logia_nombre'], disabled=True)
        
        st.subheader("üë• Informaci√≥n del Beneficiario")
        
        col1, col2 = st.columns(2)
        
        with col1:
            beneficiario_tipo = st.radio("El elemento es para:", ["hermano", "familiar"])
        
        with col2:
            if beneficiario_tipo == "familiar":
                beneficiario_nombre = st.text_input("Nombre del Familiar*")
                beneficiario_parentesco = st.selectbox("Parentesco", 
                                                     ["C√≥nyuge", "Hijo/a", "Padre/Madre", "Hermano/a", "Otro"])
                beneficiario_documento = st.text_input("Documento del Familiar")
            else:
                beneficiario_nombre = hermano_data['nombre_completo'] if hermano_id else ""
                beneficiario_parentesco = None
                beneficiario_documento = hermano_data['documento'] if hermano_id else ""
        
        st.subheader("ü¶Ω Selecci√≥n de Elemento")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Filtros para elementos
            categoria_filtro = st.selectbox("Filtrar por categor√≠a:", 
                                          ["Todas"] + list(elementos_disponibles['categoria'].unique()))
            
            if categoria_filtro != "Todas":
                elementos_filtrados = elementos_disponibles[elementos_disponibles['categoria'] == categoria_filtro]
            else:
                elementos_filtrados = elementos_disponibles
                
            elemento_id = st.selectbox("Elemento a prestar*",
                                     options=elementos_filtrados['id'].tolist(),
                                     format_func=lambda x: f"{elementos_filtrados[elementos_filtrados['id'] == x]['codigo'].iloc[0]} - {elementos_filtrados[elementos_filtrados['id'] == x]['nombre'].iloc[0]} ({elementos_filtrados[elementos_filtrados['id'] == x]['deposito_nombre'].iloc[0]})")
        
        with col2:
            if elemento_id:
                elemento_data = elementos_filtrados[elementos_filtrados['id'] == elemento_id].iloc[0]
                st.text_input("Marca/Modelo", value=f"{elemento_data['marca'] or 'N/A'} / {elemento_data['modelo'] or 'N/A'}", disabled=True)
                st.text_input("Dep√≥sito Actual", value=elemento_data['deposito_nombre'], disabled=True)
        
        st.subheader("üìÖ Duraci√≥n del Pr√©stamo")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            duracion_dias = st.number_input("Duraci√≥n (d√≠as)*", min_value=1, max_value=365, value=30)
        
        with col2:
            fecha_prestamo = st.date_input("Fecha de pr√©stamo*", value=datetime.now().date())
        
        with col3:
            fecha_vencimiento = fecha_prestamo + timedelta(days=duracion_dias)
            st.date_input("Fecha de vencimiento", value=fecha_vencimiento, disabled=True)
        
        st.subheader("üìç Informaci√≥n de Entrega")
        
        col1, col2 = st.columns(2)
        
        with col1:
            direccion_entrega = st.text_area("Direcci√≥n de entrega*", 
                                           value=hermano_data['direccion'] if hermano_id and hermano_data['direccion'] else "")
        
        with col2:
            responsable_entrega = st.text_input("Responsable de entrega*", 
                                              value=st.session_state.get('usuario', ''))
            observaciones = st.text_area("Observaciones del pr√©stamo")
        
        submitted = st.form_submit_button("üìã Registrar Pr√©stamo")
        
        if submitted:
            # Validaciones
            errores = []
            if not hermano_id:
                errores.append("Debe seleccionar un hermano")
            if beneficiario_tipo == "familiar" and not beneficiario_nombre:
                errores.append("Debe completar el nombre del familiar")
            if not elemento_id:
                errores.append("Debe seleccionar un elemento")
            if not direccion_entrega:
                errores.append("Debe completar la direcci√≥n de entrega")
            if not responsable_entrega:
                errores.append("Debe completar el responsable de entrega")
            
            if errores:
                st.error("‚ùå Por favor corrija los siguientes errores:")
                for error in errores:
                    st.write(f"- {error}")
            else:
                try:
                    with db.get_connection() as conn:
                        cursor = conn.cursor()
                        
                        # Verificar que el elemento sigue disponible
                        cursor.execute("SELECT estado FROM elementos WHERE id = ?", (elemento_id,))
                        estado_actual = cursor.fetchone()[0]
                        
                        if estado_actual != 'disponible':
                            st.error(f"‚ùå Error: El elemento ya no est√° disponible (Estado: {estado_actual})")
                            return
                        
                        # Insertar pr√©stamo
                        cursor.execute("""
                            INSERT INTO prestamos (
                                elemento_id, hermano_id, beneficiario_tipo, beneficiario_nombre,
                                beneficiario_parentesco, beneficiario_documento, direccion_entrega,
                                duracion_dias, fecha_prestamo, fecha_vencimiento,
                                observaciones_prestamo, responsable_entrega
                            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (
                            elemento_id, hermano_id, beneficiario_tipo, beneficiario_nombre,
                            beneficiario_parentesco, beneficiario_documento, direccion_entrega,
                            duracion_dias, fecha_prestamo, fecha_vencimiento,
                            observaciones, responsable_entrega
                        ))
                        
                        prestamo_id = cursor.lastrowid
                        
                        # El trigger se encargar√° de actualizar el estado del elemento
                        conn.commit()
                        
                        st.success(f"‚úÖ Pr√©stamo registrado correctamente (ID: {prestamo_id})")
                        st.balloons()
                        
                        # Mostrar resumen
                        with st.expander("üìÑ Resumen del Pr√©stamo"):
                            col1, col2 = st.columns(2)
                            with col1:
                                st.write(f"**Hermano:** {hermano_data['nombre_completo']}")
                                st.write(f"**Logia:** {hermano_data['logia_nombre']}")
                                st.write(f"**Beneficiario:** {beneficiario_nombre}")
                                st.write(f"**Tipo:** {beneficiario_tipo}")
                            with col2:
                                st.write(f"**Elemento:** {elemento_data['codigo']} - {elemento_data['nombre']}")
                                st.write(f"**Fecha pr√©stamo:** {fecha_prestamo}")
                                st.write(f"**Fecha vencimiento:** {fecha_vencimiento}")
                                st.write(f"**Responsable:** {responsable_entrega}")
                        
                        st.rerun()
                        
                except Exception as e:
                    st.error(f"Error al registrar pr√©stamo: {e}")
                    logger.error(f"Error en pr√©stamo: {e}")

def devolucion_simple():
    """M√≥dulo de devoluci√≥n simple corregido"""
    st.title("üîÑ Devoluci√≥n Simple de Elementos")
    
    # Cargar datos
    df_logias, df_hermanos, df_depositos, df_elementos, df_prestamos = cargar_datos()
    
    # Filtrar pr√©stamos activos (CORREGIDO)
    prestamos_activos = df_prestamos[df_prestamos['estado'] == 'activo'].copy()
    
    st.write(f"üîç **Debug - Pr√©stamos encontrados:** {len(prestamos_activos)}")
    
    if prestamos_activos.empty:
        st.info("‚ÑπÔ∏è No hay elementos prestados actualmente para devolver.")
        
        # Mostrar informaci√≥n de debug
        with st.expander("üîç Informaci√≥n de Debug"):
            st.write(f"Total de pr√©stamos en BD: {len(df_prestamos)}")
            if not df_prestamos.empty:
                st.write("Estados de pr√©stamos existentes:")
                estados = df_prestamos['estado'].value_counts()
                st.write(estados)
        return
    
    st.success(f"‚úÖ Elementos encontrados para devoluci√≥n: {len(prestamos_activos)}")
    
    # Mostrar tabla de pr√©stamos activos
    st.subheader("üìã Pr√©stamos Activos")
    
    # Calcular estado de vencimiento
    hoy = datetime.now().date()
    prestamos_display = prestamos_activos.copy()
    prestamos_display['fecha_vencimiento'] = pd.to_datetime(prestamos_display['fecha_vencimiento']).dt.date
    prestamos_display['dias_restantes'] = (prestamos_display['fecha_vencimiento'] - hoy).dt.days
    prestamos_display['estado_vencimiento'] = prestamos_display['dias_restantes'].apply(
        lambda x: "üî¥ Vencido" if x < 0 else "üü° Por vencer" if x <= 7 else "üü¢ Vigente"
    )
    
    # Mostrar tabla
    st.dataframe(
        prestamos_display[['elemento_codigo', 'elemento_nombre', 'hermano_nombre', 'fecha_prestamo', 'fecha_vencimiento', 'estado_vencimiento']],
        column_config={
            'elemento_codigo': 'C√≥digo',
            'elemento_nombre': 'Elemento', 
            'hermano_nombre': 'Hermano',
            'fecha_prestamo': 'Fecha Pr√©stamo',
            'fecha_vencimiento': 'Fecha Vencimiento',
            'estado_vencimiento': 'Estado'
        },
        use_container_width=True
    )
    
    # Formulario de devoluci√≥n
    st.subheader("üîÑ Procesar Devoluci√≥n")
    
    with st.form("devolucion_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            # Seleccionar pr√©stamo
            opciones_prestamo = [f"{row['elemento_codigo']} - {row['elemento_nombre']} (Prestado a: {row['hermano_nombre']})" 
                               for _, row in prestamos_activos.iterrows()]
            prestamo_seleccionado = st.selectbox("Seleccionar pr√©stamo a devolver:", opciones_prestamo)
            
            # Obtener ID del pr√©stamo seleccionado
            if prestamo_seleccionado:
                indice_seleccionado = opciones_prestamo.index(prestamo_seleccionado)
                prestamo_id = prestamos_activos.iloc[indice_seleccionado]['id']
                prestamo_data = prestamos_activos.iloc[indice_seleccionado]
                
                # Informaci√≥n del pr√©stamo seleccionado
                st.info(f"**Elemento:** {prestamo_data['elemento_nombre']}\n**Hermano:** {prestamo_data['hermano_nombre']}\n**Vence:** {prestamo_data['fecha_vencimiento']}")
        
        with col2:
            # Informaci√≥n adicional
            responsable_recepcion = st.text_input("Responsable de recepci√≥n*", 
                                                value=st.session_state.get('usuario', ''))
            
            # Seleccionar dep√≥sito de devoluci√≥n
            if not df_depositos.empty:
                deposito_devolucion = st.selectbox("Dep√≥sito de devoluci√≥n*",
                                                 options=df_depositos['id'].tolist(),
                                                 format_func=lambda x: df_depositos[df_depositos['id'] == x]['nombre'].iloc[0])
            else:
                st.warning("‚ö†Ô∏è No hay dep√≥sitos registrados")
                deposito_devolucion = None
            
            estado_elemento = st.selectbox("Estado del elemento al devolverse*",
                                         ["disponible", "mantenimiento"],
                                         help="Seleccione 'mantenimiento' si el elemento est√° da√±ado")
            
            observaciones = st.text_area("Observaciones de devoluci√≥n")
        
        submitted = st.form_submit_button("üîÑ Procesar Devoluci√≥n")
        
        if submitted and prestamo_seleccionado:
            if not responsable_recepcion:
                st.error("‚ùå Debe completar el responsable de recepci√≥n")
            elif not deposito_devolucion:
                st.error("‚ùå Debe seleccionar un dep√≥sito")
            else:
                try:
                    with db.get_connection() as conn:
                        cursor = conn.cursor()
                        
                        # Actualizar pr√©stamo como devuelto
                        cursor.execute("""
                            UPDATE prestamos 
                            SET estado = 'devuelto',
                                fecha_devolucion = date('now'),
                                responsable_recepcion = ?,
                                observaciones_devolucion = ?
                            WHERE id = ?
                        """, (responsable_recepcion, observaciones, prestamo_id))
                        
                        # Actualizar elemento con nuevo dep√≥sito y estado
                        cursor.execute("""
                            UPDATE elementos 
                            SET estado = ?, deposito_id = ?, fecha_actualizacion = CURRENT_TIMESTAMP
                            WHERE id = ?
                        """, (estado_elemento, deposito_devolucion, prestamo_data['elemento_id']))
                        
                        # Registrar en historial
                        cursor.execute("""
                            INSERT INTO historial_estados (elemento_id, estado_anterior, estado_nuevo, motivo, usuario)
                            VALUES (?, ?, ?, ?, ?)
                        """, (prestamo_data['elemento_id'], 'prestado', estado_elemento, 
                             f"Devoluci√≥n de pr√©stamo ID: {prestamo_id}", responsable_recepcion))
                        
                        conn.commit()
                        
                        st.success("‚úÖ Devoluci√≥n procesada correctamente")
                        if estado_elemento == "mantenimiento":
                            st.warning("‚ö†Ô∏è Elemento marcado para mantenimiento")
                        st.balloons()
                        
                        # Recargar p√°gina
                        st.rerun()
                        
                except Exception as e:
                    st.error(f"Error al procesar devoluci√≥n: {e}")
                    logger.error(f"Error en devoluci√≥n: {e}")

def alertas_vencimiento():
    """M√≥dulo de alertas de vencimiento"""
    st.title("‚ö†Ô∏è Alertas de Vencimiento")
    
    df_logias, df_hermanos, df_depositos, df_elementos, df_prestamos = cargar_datos()
    
    if df_prestamos.empty:
        st.info("No hay pr√©stamos registrados")
        return
    
    # Filtrar pr√©stamos activos
    prestamos_activos = df_prestamos[df_prestamos['estado'] == 'activo'].copy()
    
    if prestamos_activos.empty:
        st.success("‚úÖ No hay pr√©stamos pr√≥ximos a vencer en los pr√≥ximos 7 d√≠as")
        return
    
    # Calcular d√≠as para vencimiento
    hoy = datetime.now().date()
    prestamos_activos['fecha_vencimiento'] = pd.to_datetime(prestamos_activos['fecha_vencimiento']).dt.date
    prestamos_activos['dias_restantes'] = (prestamos_activos['fecha_vencimiento'] - hoy).dt.days
    
    # Clasificar pr√©stamos
    vencidos = prestamos_activos[prestamos_activos['dias_restantes'] < 0]
    por_vencer = prestamos_activos[(prestamos_activos['dias_restantes'] >= 0) & (prestamos_activos['dias_restantes'] <= 7)]
    vigentes = prestamos_activos[prestamos_activos['dias_restantes'] > 7]
    
    # M√©tricas
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üî¥ Pr√©stamos Vencidos", len(vencidos))
    
    with col2:
        st.metric("üü° Por Vencer (7 d√≠as)", len(por_vencer))
    
    with col3:
        st.metric("üü¢ Vigentes", len(vigentes))
    
    # Mostrar pr√©stamos vencidos
    if not vencidos.empty:
        st.subheader("üî¥ Pr√©stamos Vencidos")
        vencidos_display = vencidos.copy()
        vencidos_display['dias_vencido'] = abs(vencidos_display['dias_restantes'])
        
        st.dataframe(
            vencidos_display[['elemento_codigo', 'elemento_nombre', 'hermano_nombre', 'fecha_vencimiento', 'dias_vencido']],
            column_config={
                'elemento_codigo': 'C√≥digo',
                'elemento_nombre': 'Elemento',
                'hermano_nombre': 'Hermano',
                'fecha_vencimiento': 'Fecha Vencimiento',
                'dias_vencido': 'D√≠as Vencido'
            },
            use_container_width=True
        )
    
    # Mostrar pr√©stamos por vencer
    if not por_vencer.empty:
        st.subheader("üü° Pr√©stamos por Vencer (Pr√≥ximos 7 d√≠as)")
        
        st.dataframe(
            por_vencer[['elemento_codigo', 'elemento_nombre', 'hermano_nombre', 'fecha_vencimiento', 'dias_restantes']],
            column_config={
                'elemento_codigo': 'C√≥digo',
                'elemento_nombre': 'Elemento',
                'hermano_nombre': 'Hermano',
                'fecha_vencimiento': 'Fecha Vencimiento',
                'dias_restantes': 'D√≠as Restantes'
            },
            use_container_width=True
        )
    
    # Informaci√≥n de contacto para seguimiento
    if not vencidos.empty or not por_vencer.empty:
        st.subheader("üìû Informaci√≥n de Contacto para Seguimiento")
        
        # Combinar vencidos y por vencer
        alertas = pd.concat([vencidos, por_vencer])
        
        contactos = []
        for _, prestamo in alertas.iterrows():
            hermano = df_hermanos[df_hermanos['id'] == prestamo['hermano_id']].iloc[0]
            contactos.append({
                'hermano': hermano['nombre_completo'],
                'telefono': hermano['telefono'] or 'No registrado',
                'email': hermano['email'] or 'No registrado',
                'elemento': f"{prestamo['elemento_codigo']} - {prestamo['elemento_nombre']}",
                'vencimiento': prestamo['fecha_vencimiento'],
                'estado': "üî¥ Vencido" if prestamo['dias_restantes'] < 0 else "üü° Por vencer"
            })
        
        contactos_df = pd.DataFrame(contactos)
        st.dataframe(contactos_df, use_container_width=True)

def reportes():
    """M√≥dulo de reportes y estad√≠sticas"""
    st.title("üìä Reportes y Estad√≠sticas")
    
    df_logias, df_hermanos, df_depositos, df_elementos, df_prestamos = cargar_datos()
    
    tab1, tab2, tab3 = st.tabs(["üìà Estad√≠sticas Generales", "üèõÔ∏è Por Logia", "üìÖ Temporales"])
    
    with tab1:
        st.subheader("üìä Estad√≠sticas Generales del BEO")
        
        # M√©tricas principales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total Elementos", len(df_elementos))
            st.metric("Elementos Disponibles", len(df_elementos[df_elementos['estado'] == 'disponible']))
        
        with col2:
            st.metric("Elementos Prestados", len(df_elementos[df_elementos['estado'] == 'prestado']))
            st.metric("En Mantenimiento", len(df_elementos[df_elementos['estado'] == 'mantenimiento']))
        
        with col3:
            st.metric("Total Hermanos", len(df_hermanos))
            st.metric("Total Logias", len(df_logias))
        
        with col4:
            prestamos_totales = len(df_prestamos)
            prestamos_activos = len(df_prestamos[df_prestamos['estado'] == 'activo'])
            st.metric("Total Pr√©stamos", prestamos_totales)
            st.metric("Pr√©stamos Activos", prestamos_activos)
        
        # Gr√°ficos
        col1, col2 = st.columns(2)
        
        with col1:
            if not df_elementos.empty:
                st.subheader("Estados de Elementos")
                estado_counts = df_elementos['estado'].value_counts()
                fig = px.pie(values=estado_counts.values, names=estado_counts.index)
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            if not df_elementos.empty:
                st.subheader("Elementos por Categor√≠a")
                categoria_counts = df_elementos['categoria'].value_counts()
                fig = px.bar(x=categoria_counts.values, y=categoria_counts.index, orientation='h')
                st.plotly_chart(fig, use_container_width=True)
        
        # Eficiencia del sistema
        if prestamos_totales > 0:
            devueltos = len(df_prestamos[df_prestamos['estado'] == 'devuelto'])
            tasa_devolucion = (devueltos / prestamos_totales) * 100
            
            st.subheader("üìà Eficiencia del Sistema")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Tasa de Devoluci√≥n", f"{tasa_devolucion:.1f}%")
            
            with col2:
                elementos_en_uso = (len(df_elementos[df_elementos['estado'] == 'prestado']) / len(df_elementos)) * 100
                st.metric("Elementos en Uso", f"{elementos_en_uso:.1f}%")
            
            with col3:
                if not df_prestamos.empty:
                    # Calcular pr√©stamos promedio por mes
                    df_prestamos['fecha_prestamo'] = pd.to_datetime(df_prestamos['fecha_prestamo'])
                    prestamos_por_mes = df_prestamos.groupby(df_prestamos['fecha_prestamo'].dt.to_period('M')).size()
                    promedio_mensual = prestamos_por_mes.mean() if len(prestamos_por_mes) > 0 else 0
                    st.metric("Promedio Mensual", f"{promedio_mensual:.1f}")
    
    with tab2:
        st.subheader("üèõÔ∏è Estad√≠sticas por Logia")
        
        if not df_logias.empty and not df_hermanos.empty:
            # Crear tabla de estad√≠sticas por logia
            stats_logia = []
            
            for _, logia in df_logias.iterrows():
                hermanos_logia = df_hermanos[df_hermanos['logia_id'] == logia['id']]
                hermanos_ids = hermanos_logia['id'].tolist()
                
                prestamos_logia = df_prestamos[df_prestamos['hermano_id'].isin(hermanos_ids)]
                prestamos_activos_logia = prestamos_logia[prestamos_logia['estado'] == 'activo']
                
                stats_logia.append({
                    'logia': logia['nombre'],
                    'hermanos': len(hermanos_logia),
                    'prestamos_totales': len(prestamos_logia),
                    'prestamos_activos': len(prestamos_activos_logia),
                    'devueltos': len(prestamos_logia[prestamos_logia['estado'] == 'devuelto'])
                })
            
            stats_df = pd.DataFrame(stats_logia)
            
            if not stats_df.empty:
                # Tabla de estad√≠sticas
                st.dataframe(
                    stats_df,
                    column_config={
                        'logia': 'Logia',
                        'hermanos': 'Hermanos',
                        'prestamos_totales': 'Total Pr√©stamos',
                        'prestamos_activos': 'Pr√©stamos Activos',
                        'devueltos': 'Devueltos'
                    },
                    use_container_width=True
                )
                
                # Gr√°fico de pr√©stamos por logia
                fig = px.bar(stats_df, x='logia', y='prestamos_totales', 
                           title="Total de Pr√©stamos por Logia")
                fig.update_xaxis(tickangle=45)
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("No hay datos suficientes para mostrar estad√≠sticas por logia")
    
    with tab3:
        st.subheader("üìÖ Estad√≠sticas Temporales")
        
        if not df_prestamos.empty:
            df_prestamos['fecha_prestamo'] = pd.to_datetime(df_prestamos['fecha_prestamo'])
            
            # Pr√©stamos por mes
            prestamos_por_mes = df_prestamos.groupby(df_prestamos['fecha_prestamo'].dt.to_period('M')).size()
            
            if len(prestamos_por_mes) > 0:
                st.subheader("üìà Pr√©stamos por Mes")
                
                # Convertir a DataFrame para plotly
                prestamos_mes_df = prestamos_por_mes.reset_index()
                prestamos_mes_df['fecha_prestamo'] = prestamos_mes_df['fecha_prestamo'].astype(str)
                
                fig = px.line(prestamos_mes_df, x='fecha_prestamo', y=0,
                            title="Evoluci√≥n de Pr√©stamos por Mes")
                fig.update_xaxis(title="Mes")
                fig.update_yaxis(title="Cantidad de Pr√©stamos")
                st.plotly_chart(fig, use_container_width=True)
                
                # Estad√≠sticas de duraci√≥n
                if 'fecha_devolucion' in df_prestamos.columns:
                    prestamos_devueltos = df_prestamos[df_prestamos['estado'] == 'devuelto'].copy()
                    
                    if not prestamos_devueltos.empty:
                        prestamos_devueltos['fecha_devolucion'] = pd.to_datetime(prestamos_devueltos['fecha_devolucion'])
                        prestamos_devueltos['duracion_real'] = (prestamos_devueltos['fecha_devolucion'] - prestamos_devueltos['fecha_prestamo']).dt.days
                        
                        st.subheader("üìä An√°lisis de Duraci√≥n de Pr√©stamos")
                        
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            duracion_promedio = prestamos_devueltos['duracion_real'].mean()
                            st.metric("Duraci√≥n Promedio", f"{duracion_promedio:.1f} d√≠as")
                        
                        with col2:
                            duracion_mediana = prestamos_devueltos['duracion_real'].median()
                            st.metric("Duraci√≥n Mediana", f"{duracion_mediana:.1f} d√≠as")
                        
                        with col3:
                            max_duracion = prestamos_devueltos['duracion_real'].max()
                            st.metric("Duraci√≥n M√°xima", f"{max_duracion} d√≠as")
                        
                        # Histograma de duraciones
                        fig = px.histogram(prestamos_devueltos, x='duracion_real', 
                                         title="Distribuci√≥n de Duraci√≥n de Pr√©stamos",
                                         labels={'duracion_real': 'D√≠as', 'count': 'Cantidad'})
                        st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("No hay pr√©stamos registrados para mostrar estad√≠sticas temporales")

def manual_usuario():
    """Manual de usuario del sistema"""
    st.title("üìö Manual de Usuario - Sistema BEO")
    
    tab1, tab2, tab3, tab4 = st.tabs(["üè† Introducci√≥n", "üìã Gu√≠as R√°pidas", "üîß Funcionalidades", "‚ùì FAQ"])
    
    with tab1:
        st.header("üèõÔ∏è Bienvenido al Sistema BEO")
        
        st.markdown("""
        El **Sistema BEO (Banco de Elementos Ortop√©dicos)** es una soluci√≥n integral dise√±ada 
        espec√≠ficamente para organizaciones mas√≥nicas filantr√≥picas que administran pr√©stamos 
        de elementos ortop√©dicos a hermanos y sus familias.
        
        ### üéØ Objetivos del Sistema
        - **Eficiencia**: Reducir 80% el tiempo de gesti√≥n de pr√©stamos
        - **Transparencia**: Trazabilidad completa de todos los movimientos
        - **Control**: Eliminaci√≥n de p√©rdidas y seguimiento efectivo
        - **Profesionalismo**: Imagen moderna y organizada
        
        ### üîß Caracter√≠sticas Principales
        - ‚úÖ **Gesti√≥n Completa**: Logias, hermanos, dep√≥sitos y elementos
        - ‚úÖ **Pr√©stamos Seguros**: Con verificaci√≥n de integridad autom√°tica
        - ‚úÖ **Alertas Inteligentes**: Notificaciones de vencimientos
        - ‚úÖ **Reportes Detallados**: Estad√≠sticas en tiempo real
        - ‚úÖ **Auditor√≠a Completa**: Historial de todos los cambios
        
        ### üèõÔ∏è Valores Mas√≥nicos Integrados
        - **Fraternidad**: Sistema dise√±ado para la ayuda mutua
        - **Beneficencia**: Facilitando la labor social organizada
        - **Organizaci√≥n**: Estructura que respeta la jerarqu√≠a mas√≥nica
        - **Transparencia**: Registro completo y trazabilidad total
        """)
    
    with tab2:
        st.header("üìã Gu√≠as R√°pidas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üöÄ Inicio R√°pido")
            st.markdown("""
            **Para empezar a usar el sistema:**
            
            1. **Registrar Logias** üèõÔ∏è
               - Ve a "Gesti√≥n de Logias" ‚Üí "Agregar Logia"
               - Completa: Nombre, Venerable Maestro, Hospitalario
            
            2. **Registrar Dep√≥sitos** üè¢
               - Ve a "Gesti√≥n de Dep√≥sitos" ‚Üí "Agregar Dep√≥sito"
               - Completa: Nombre, Ubicaci√≥n, Responsable
            
            3. **Registrar Hermanos** üë•
               - Ve a "Gesti√≥n de Hermanos" ‚Üí "Agregar Hermano"
               - Asigna a una logia existente
            
            4. **Agregar Elementos** ü¶Ω
               - Ve a "Gesti√≥n de Elementos" ‚Üí "Agregar"
               - Asigna a un dep√≥sito existente
            
            5. **¬°Listo para pr√©stamos!** üìã
            """)
        
        with col2:
            st.subheader("‚ö° Flujo de Pr√©stamo")
            st.markdown("""
            **Proceso simplificado:**
            
            1. **Crear Pr√©stamo** üìã
               - "Formulario de Pr√©stamo BEO"
               - Seleccionar hermano y elemento
               - Completar datos del beneficiario
            
            2. **Sistema Autom√°tico** ü§ñ
               - Elemento pasa a "prestado"
               - Se registra en historial
               - Se calcula fecha de vencimiento
            
            3. **Devoluci√≥n Simple** üîÑ
               - "Devoluci√≥n Simple"
               - Seleccionar pr√©stamo
               - Elegir dep√≥sito de destino
               - Elemento vuelve a "disponible"
            
            4. **Control Autom√°tico** ‚úÖ
               - Verificaci√≥n de integridad
               - Alertas de vencimiento
               - Estad√≠sticas actualizadas
            """)
    
    with tab3:
        st.header("üîß Funcionalidades Detalladas")
        
        funcionalidad = st.selectbox("Seleccionar funcionalidad:", [
            "üèõÔ∏è Gesti√≥n de Logias",
            "üë• Gesti√≥n de Hermanos", 
            "üè¢ Gesti√≥n de Dep√≥sitos",
            "ü¶Ω Gesti√≥n de Elementos",
            "üìã Formulario de Pr√©stamo",
            "üîÑ Devoluci√≥n Simple",
            "‚ö†Ô∏è Alertas de Vencimiento",
            "üìä Reportes y Estad√≠sticas",
            "üîç Verificaci√≥n de Integridad"
        ])
        
        if funcionalidad == "üèõÔ∏è Gesti√≥n de Logias":
            st.markdown("""
            ### Gesti√≥n de Logias
            
            **Prop√≥sito**: Administrar las logias mas√≥nicas que participan en el BEO.
            
            **Funciones disponibles:**
            - **Ver Logias**: Lista completa con estad√≠sticas de hermanos y pr√©stamos
            - **Agregar Logia**: Registro de nueva logia con datos completos
            - **Editar Logia**: Modificaci√≥n de datos existentes
            - **Desactivar Logia**: Para logias que ya no participan
            
            **Campos obligatorios:**
            - Nombre de la Logia
            - Venerable Maestro
            - Hospitalario
            
            **Campos opcionales:**
            - Tel√©fono, Email, Direcci√≥n
            """)
        
        elif funcionalidad == "üë• Gesti√≥n de Hermanos":
            st.markdown("""
            ### Gesti√≥n de Hermanos
            
            **Prop√≥sito**: Administrar la base de datos de hermanos masones.
            
            **Funciones disponibles:**
            - **Ver Hermanos**: Lista con filtros por logia y grado
            - **Agregar Hermano**: Registro completo con datos mas√≥nicos
            - **Editar Hermano**: Actualizaci√≥n de informaci√≥n
            - **Desactivar Hermano**: (Solo si no tiene pr√©stamos activos)
            
            **Campos obligatorios:**
            - Nombre Completo
            - Documento de Identidad
            - Logia (debe existir previamente)
            - Grado Mas√≥nico
            
            **Grados disponibles:**
            - Aprendiz
            - Compa√±ero  
            - Maestro Mas√≥n
            - Grado Superior
            """)
        
        elif funcionalidad == "üè¢ Gesti√≥n de Dep√≥sitos":
            st.markdown("""
            ### Gesti√≥n de Dep√≥sitos
            
            **Prop√≥sito**: Administrar ubicaciones donde se almacenan los elementos.
            
            **Funciones disponibles:**
            - **Ver Dep√≥sitos**: Lista con estad√≠sticas de elementos
            - **Agregar Dep√≥sito**: Registro de nueva ubicaci√≥n
            - **Editar Dep√≥sito**: Modificaci√≥n de datos
            - **Desactivar Dep√≥sito**: (Solo si no tiene elementos)
            
            **Campos obligatorios:**
            - Nombre del Dep√≥sito
            - Ubicaci√≥n
            - Responsable
            
            **Estad√≠sticas mostradas:**
            - Total de elementos
            - Elementos disponibles
            - Elementos prestados
            """)
        
        elif funcionalidad == "ü¶Ω Gesti√≥n de Elementos":
            st.markdown("""
            ### Gesti√≥n de Elementos
            
            **Prop√≥sito**: Administrar el inventario completo de elementos ortop√©dicos.
            
            **Funciones disponibles:**
            - **Ver Elementos**: Inventario con filtros m√∫ltiples
            - **Agregar Elemento**: Registro con c√≥digo √∫nico
            - **Editar Elemento**: Modificaci√≥n de datos
            - **Cambio Manual de Estados**: Para correcciones administrativas
            
            **Estados posibles:**
            - **Disponible**: Listo para pr√©stamo
            - **Prestado**: Actualmente en pr√©stamo
            - **Mantenimiento**: Requiere reparaci√≥n
            - **Dado de Baja**: Fuera de servicio
            
            **Categor√≠as disponibles:**
            - Bastones, Sillas de Ruedas, Andadores
            - Camas Ortop√©dicas, Equipos de Rehabilitaci√≥n
            - Muletas, Otros
            """)
        
        elif funcionalidad == "üìã Formulario de Pr√©stamo":
            st.markdown("""
            ### Formulario de Pr√©stamo BEO
            
            **Prop√≥sito**: Registrar nuevos pr√©stamos de elementos ortop√©dicos.
            
            **Proceso paso a paso:**
            1. **Seleccionar Hermano**: De la lista de hermanos activos
            2. **Beneficiario**: Puede ser el hermano o un familiar
            3. **Elemento**: Solo elementos disponibles
            4. **Duraci√≥n**: D√≠as de pr√©stamo (default: 30)
            5. **Entrega**: Direcci√≥n y responsable
            
            **Validaciones autom√°ticas:**
            - Elemento debe estar disponible
            - Hermano debe estar activo
            - No puede haber pr√©stamos duplicados del mismo elemento
            
            **Resultado:**
            - Elemento pasa autom√°ticamente a "prestado"
            - Se registra en historial
            - Se calcula fecha de vencimiento
            """)
        
        elif funcionalidad == "üîÑ Devoluci√≥n Simple":
            st.markdown("""
            ### Devoluci√≥n Simple
            
            **Prop√≥sito**: Procesar devoluciones de elementos de forma r√°pida y segura.
            
            **Caracter√≠sticas:**
            - **Lista autom√°tica**: Solo pr√©stamos activos
            - **Estados visuales**: Vigente, Por vencer, Vencido
            - **Informaci√≥n completa**: Elemento, hermano, fechas
            
            **Proceso:**
            1. Seleccionar pr√©stamo de la lista
            2. Indicar responsable de recepci√≥n
            3. Elegir dep√≥sito de destino
            4. Evaluar estado del elemento
            5. Agregar observaciones
            
            **Resultado autom√°tico:**
            - Pr√©stamo marcado como "devuelto"
            - Elemento actualizado a estado seleccionado
            - Registro en historial de auditor√≠a
            """)
        
        elif funcionalidad == "‚ö†Ô∏è Alertas de Vencimiento":
            st.markdown("""
            ### Alertas de Vencimiento
            
            **Prop√≥sito**: Monitorear pr√©stamos pr√≥ximos a vencer y vencidos.
            
            **Clasificaciones:**
            - **üî¥ Vencidos**: Pr√©stamos que superaron la fecha l√≠mite
            - **üü° Por Vencer**: Pr√≥ximos 7 d√≠as
            - **üü¢ Vigentes**: Dentro del plazo normal
            
            **Informaci√≥n de contacto:**
            - Datos del hermano responsable
            - Tel√©fono y email para seguimiento
            - Detalles del elemento prestado
            
            **Uso recomendado:**
            - Revisi√≥n diaria de alertas
            - Contacto proactivo con hermanos
            - Seguimiento de elementos vencidos
            """)
        
        elif funcionalidad == "üìä Reportes y Estad√≠sticas":
            st.markdown("""
            ### Reportes y Estad√≠sticas
            
            **Prop√≥sito**: An√°lisis completo del funcionamiento del BEO.
            
            **Estad√≠sticas Generales:**
            - M√©tricas de elementos y pr√©stamos
            - Gr√°ficos de distribuci√≥n
            - Indicadores de eficiencia
            
            **Por Logia:**
            - Comparativo entre logias
            - Actividad de pr√©stamos
            - Tasas de devoluci√≥n
            
            **Temporales:**
            - Evoluci√≥n mensual
            - An√°lisis de duraci√≥n
            - Tendencias de uso
            
            **Beneficios:**
            - Toma de decisiones informada
            - Identificaci√≥n de patrones
            - Planificaci√≥n de recursos
            """)
        
        elif funcionalidad == "üîç Verificaci√≥n de Integridad":
            st.markdown("""
            ### Verificaci√≥n de Integridad
            
            **Prop√≥sito**: Mantener la consistencia de datos en el sistema.
            
            **Verificaciones autom√°ticas:**
            - Elementos prestados = Pr√©stamos activos
            - No hay elementos "hu√©rfanos"
            - Estados consistentes en toda la BD
            
            **Detecci√≥n de problemas:**
            - Elementos prestados sin pr√©stamo activo
            - Pr√©stamos activos con elemento disponible
            - Inconsistencias en conteos
            
            **Correcci√≥n autom√°tica:**
            - Un clic para solucionar problemas
            - Backup autom√°tico antes de cambios
            - Registro de todas las correcciones
            
            **Cu√°ndo usar:**
            - Si hay datos inconsistentes
            - Despu√©s de migraciones
            - Verificaci√≥n peri√≥dica preventiva
            """)
    
    with tab4:
        st.header("‚ùì Preguntas Frecuentes (FAQ)")
        
        faq_items = [
            {
                "pregunta": "¬øQu√© hacer si aparece 'No hay pr√©stamos' pero el dashboard muestra pr√©stamos activos?",
                "respuesta": """
                Este era un problema com√∫n en versiones anteriores que **ya est√° solucionado** en esta versi√≥n corregida.
                
                **Si a√∫n ocurre:**
                1. Ve a "üîç Verificar Integridad"
                2. Haz clic en "üîß Corregir Autom√°ticamente"
                3. El sistema sincronizar√° autom√°ticamente los datos
                
                **Prevenci√≥n:** El nuevo sistema tiene triggers autom√°ticos que mantienen la consistencia.
                """
            },
            {
                "pregunta": "¬øC√≥mo registrar un pr√©stamo para un familiar?",
                "respuesta": """
                **Proceso:**
                1. Ve a "üìã Formulario de Pr√©stamo BEO"
                2. Selecciona el hermano solicitante
                3. En "Beneficiario" elige "familiar"
                4. Completa nombre del familiar y parentesco
                5. Contin√∫a normalmente con el resto del formulario
                
                **Nota:** El hermano sigue siendo responsable del pr√©stamo.
                """
            },
            {
                "pregunta": "¬øUn elemento puede estar en pr√©stamo m√∫ltiple?",
                "respuesta": """
                **No.** El sistema previene autom√°ticamente pr√©stamos duplicados del mismo elemento.
                
                **Si intentas prestar un elemento ya prestado:**
                - El sistema mostrar√° error
                - No permitir√° completar el pr√©stamo
                - Debes primero procesar la devoluci√≥n del pr√©stamo actual
                """
            },
            {
                "pregunta": "¬øC√≥mo devolver un elemento a un dep√≥sito diferente?",
                "respuesta": """
                **En la devoluci√≥n:**
                1. Ve a "üîÑ Devoluci√≥n Simple"
                2. Selecciona el pr√©stamo a devolver
                3. En "Dep√≥sito de devoluci√≥n" elige el dep√≥sito destino
                4. Completa el proceso normalmente
                
                **El elemento quedar√° en el nuevo dep√≥sito seleccionado.**
                """
            },
            {
                "pregunta": "¬øQu√© hacer si un elemento se da√±a durante el pr√©stamo?",
                "respuesta": """
                **Durante la devoluci√≥n:**
                1. En "Estado del elemento" selecciona "mantenimiento"
                2. Agrega observaciones sobre el da√±o
                3. Procesa la devoluci√≥n normalmente
                
                **Resultado:**
                - El elemento queda marcado como "mantenimiento"
                - No aparecer√° disponible para nuevos pr√©stamos
                - Cuando se repare, cambia manualmente el estado a "disponible"
                """
            },
            {
                "pregunta": "¬øC√≥mo extender la duraci√≥n de un pr√©stamo?",
                "respuesta": """
                **Proceso:**
                1. Procesa la devoluci√≥n normal del elemento
                2. Inmediatamente crea un nuevo pr√©stamo
                3. O usa "üîß Cambio Manual de Estados" si es necesario
                
                **Nota:** En futuras versiones se agregar√° extensi√≥n directa de pr√©stamos.
                """
            },
            {
                "pregunta": "¬øPuedo eliminar elementos, hermanos o logias?",
                "respuesta": """
                **El sistema usa "desactivaci√≥n" en lugar de eliminaci√≥n** para mantener la integridad hist√≥rica.
                
                **Limitaciones:**
                - No puedes desactivar hermanos con pr√©stamos activos
                - No puedes desactivar dep√≥sitos con elementos asignados
                - No puedes desactivar logias con hermanos activos
                
                **Primero debes resolver las dependencias.**
                """
            },
            {
                "pregunta": "¬øC√≥mo hacer backup de los datos?",
                "respuesta": """
                **Backup manual:**
                1. Localiza el archivo "beo_sistema.db" 
                2. C√≥pialo a una ubicaci√≥n segura
                3. Ren√≥mbralo con fecha (ej: beo_sistema_backup_20250626.db)
                
                **Backup autom√°tico:**
                - El script de migraci√≥n crea backups autom√°ticamente
                - Cada correcci√≥n de integridad hace backup preventivo
                """
            },
            {
                "pregunta": "¬øEl sistema funciona offline?",
                "respuesta": """
                **S√≠, completamente offline.**
                
                **Caracter√≠sticas:**
                - Base de datos local SQLite
                - No requiere internet para funcionar
                - Todos los datos se almacenan localmente
                
                **Para acceso remoto:** Puedes deployar en Streamlit Cloud o similar para acceso web.
                """
            },
            {
                "pregunta": "¬øC√≥mo interpretar las estad√≠sticas del dashboard?",
                "respuesta": """
                **M√©tricas principales:**
                - **Elementos Disponibles**: Listos para pr√©stamo
                - **Elementos Prestados**: Actualmente en pr√©stamo
                - **Pr√©stamos Activos**: Debe coincidir con elementos prestados
                
                **Estados de alerta:**
                - ‚úÖ Verde: Consistencia verificada
                - ‚ùå Rojo: Inconsistencia detectada (usar correcci√≥n autom√°tica)
                
                **Gr√°ficos:** Muestran distribuci√≥n y tendencias para toma de decisiones.
                """
            }
        ]
        
        for i, item in enumerate(faq_items):
            with st.expander(f"‚ùì {item['pregunta']}"):
                st.markdown(item['respuesta'])

def main():
    """Funci√≥n principal del sistema BEO completo"""
    if not autenticar_usuario():
        return
    
    # Sidebar
    st.sidebar.title("üèõÔ∏è Sistema BEO")
    st.sidebar.write(f"üë§ Usuario: {st.session_state.get('usuario', 'An√≥nimo')}")
    
    # Verificaci√≥n r√°pida de integridad para mostrar en sidebar
    try:
        integridad = db.verificar_integridad()
        if integridad['inconsistencias']:
            st.sidebar.error(f"‚ö†Ô∏è {len(integridad['inconsistencias'])} inconsistencias detectadas")
            if st.sidebar.button("üîß Corregir Ahora"):
                db.corregir_inconsistencias()
                st.rerun()
        else:
            st.sidebar.success("‚úÖ Sistema √≠ntegro")
    except:
        st.sidebar.warning("‚ö†Ô∏è Error verificando integridad")
    
    # Men√∫ principal
    pagina = st.sidebar.selectbox("Seleccionar secci√≥n:", [
        "üìä Dashboard",
        "üèõÔ∏è Gesti√≥n de Logias",
        "üë®‚Äçü§ù‚Äçüë® Gesti√≥n de Hermanos", 
        "üè¢ Gesti√≥n de Dep√≥sitos",
        "ü¶Ω Gesti√≥n de Elementos",
        "üìã Formulario de Pr√©stamo BEO",
        "üîÑ Devoluci√≥n Simple", 
        "‚ö†Ô∏è Alertas de Vencimiento",
        "üìä Reportes y Estad√≠sticas",
        "üîç Verificar Integridad",
        "üìö Manual de Usuario"
    ])
    
    # Navegaci√≥n
    if pagina == "üìä Dashboard":
        dashboard()
    elif pagina == "üèõÔ∏è Gesti√≥n de Logias":
        gestion_logias()
    elif pagina == "üë®‚Äçü§ù‚Äçüë® Gesti√≥n de Hermanos":
        gestion_hermanos()
    elif pagina == "üè¢ Gesti√≥n de Dep√≥sitos":
        gestion_depositos()
    elif pagina == "ü¶Ω Gesti√≥n de Elementos":
        gestion_elementos()
    elif pagina == "üìã Formulario de Pr√©stamo BEO":
        formulario_prestamo()
    elif pagina == "üîÑ Devoluci√≥n Simple":
        devolucion_simple()
    elif pagina == "‚ö†Ô∏è Alertas de Vencimiento":
        alertas_vencimiento()
    elif pagina == "üìä Reportes y Estad√≠sticas":
        reportes()
    elif pagina == "üîç Verificar Integridad":
        st.title("üîç Verificaci√≥n de Integridad del Sistema")
        
        integridad = db.verificar_integridad()
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Elementos Prestados", integridad['elementos_prestados'])
        with col2:
            st.metric("Pr√©stamos Activos", integridad['prestamos_activos'])
        
        if integridad['inconsistencias']:
            st.error("‚ùå Inconsistencias detectadas:")
            for inc in integridad['inconsistencias']:
                st.write(f"- **{inc['tipo']}**: {inc['descripcion']}")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîß Corregir Autom√°ticamente"):
                    resultado = db.corregir_inconsistencias()
                    st.success(f"‚úÖ Correcciones aplicadas: {resultado}")
                    st.rerun()
            
            with col2:
                if st.button("üîÑ Verificar Nuevamente"):
                    st.rerun()
            
            # Mostrar detalles de inconsistencias
            if integridad['elementos_huerfanos']:
                with st.expander("üîç Elementos Hu√©rfanos Detectados"):
                    for elemento in integridad['elementos_huerfanos']:
                        st.write(f"- **{elemento[1]}** ({elemento[2]})")
            
            if integridad['prestamos_inconsistentes']:
                with st.expander("üîç Pr√©stamos Inconsistentes Detectados"):
                    for prestamo in integridad['prestamos_inconsistentes']:
                        st.write(f"- **Pr√©stamo ID {prestamo[0]}**: {prestamo[2]} ({prestamo[3]}) - Estado: {prestamo[4]}")
        else:
            st.success("‚úÖ No se detectaron inconsistencias")
            st.info("üéâ El sistema est√° funcionando correctamente")
            
            # Mostrar estad√≠sticas adicionales
            with st.expander("üìä Estad√≠sticas del Sistema"):
                df_logias, df_hermanos, df_depositos, df_elementos, df_prestamos = cargar_datos()
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Total Logias", len(df_logias))
                    st.metric("Total Hermanos", len(df_hermanos))
                
                with col2:
                    st.metric("Total Dep√≥sitos", len(df_depositos))
                    st.metric("Total Elementos", len(df_elementos))
                
                with col3:
                    st.metric("Total Pr√©stamos", len(df_prestamos))
                    prestamos_activos = len(df_prestamos[df_prestamos['estado'] == 'activo'])
                    st.metric("Pr√©stamos Activos", prestamos_activos)
    
    elif pagina == "üìö Manual de Usuario":
        manual_usuario()
    
    # Footer
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Sistema BEO v2.0 Completo**")
    st.sidebar.markdown("*Gesti√≥n Integral de Inventario Ortop√©dico*")
    st.sidebar.markdown("*Desarrollado para organizaciones mas√≥nicas filantr√≥picas*")
    
    # Informaci√≥n adicional en sidebar
    with st.sidebar.expander("‚ÑπÔ∏è Informaci√≥n del Sistema"):
        st.write("**Versi√≥n:** 2.0 Corregida")
        st.write("**Base de Datos:** SQLite")
        st.write("**Integridad:** Verificaci√≥n autom√°tica")
        st.write("**Backup:** Autom√°tico en cambios")
        st.write("**Soporte:** Manual integrado")
    
    # Bot√≥n de cerrar sesi√≥n
    if st.sidebar.button("üö™ Cerrar Sesi√≥n"):
        st.session_state.autenticado = False
        st.rerun()

if __name__ == "__main__":
    main()
