import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime, date, timedelta
import hashlib
import os
import time
from typing import Optional, List, Dict
import plotly.express as px
import plotly.graph_objects as go

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="BEO - Banco de Elementos Ortop√©dicos",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

class DatabaseManager:
    def __init__(self, db_path: str = "beo_inventario.db"):
        self.db_path = db_path
        self.init_database()
    
    def get_connection(self):
        return sqlite3.connect(self.db_path)
    
    def init_database(self):
        """Inicializa las tablas de la base de datos"""
        conn = self.get_connection()
        cursor = conn.cursor()
        
        # Tabla de logias
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS logias (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL UNIQUE,
                numero INTEGER,
                oriente TEXT,
                venerable_maestro TEXT,
                telefono_venerable TEXT,
                hospitalario TEXT,
                telefono_hospitalario TEXT,
                direccion TEXT,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Tabla de dep√≥sitos
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS depositos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL UNIQUE,
                direccion TEXT,
                responsable TEXT,
                telefono TEXT,
                email TEXT,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Tabla de categor√≠as de elementos
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS categorias (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL UNIQUE,
                descripcion TEXT
            )
        """)
        
        # Tabla de elementos ortop√©dicos
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS elementos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                codigo TEXT NOT NULL UNIQUE,
                nombre TEXT NOT NULL,
                categoria_id INTEGER,
                deposito_id INTEGER,
                estado TEXT DEFAULT 'disponible',
                descripcion TEXT,
                marca TEXT,
                modelo TEXT,
                numero_serie TEXT,
                fecha_ingreso DATE,
                observaciones TEXT,
                FOREIGN KEY (categoria_id) REFERENCES categorias (id),
                FOREIGN KEY (deposito_id) REFERENCES depositos (id)
            )
        """)
        
        # Tabla de hermanos
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS hermanos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL,
                telefono TEXT,
                logia_id INTEGER,
                grado TEXT,
                direccion TEXT,
                email TEXT,
                fecha_iniciacion DATE,
                activo BOOLEAN DEFAULT 1,
                observaciones TEXT,
                fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (logia_id) REFERENCES logias (id)
            )
        """)
        
        # Tabla de beneficiarios (hermanos o familiares)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS beneficiarios (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tipo TEXT NOT NULL,
                hermano_id INTEGER,
                hermano_responsable_id INTEGER,
                parentesco TEXT,
                nombre TEXT NOT NULL,
                telefono TEXT,
                direccion TEXT NOT NULL,
                observaciones TEXT,
                fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (hermano_id) REFERENCES hermanos (id),
                FOREIGN KEY (hermano_responsable_id) REFERENCES hermanos (id)
            )
        """)
        
        # Tabla de pr√©stamos
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS prestamos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                fecha_prestamo DATE NOT NULL,
                elemento_id INTEGER,
                beneficiario_id INTEGER,
                hermano_solicitante_id INTEGER,
                duracion_dias INTEGER,
                fecha_devolucion_estimada DATE,
                fecha_devolucion_real DATE,
                estado TEXT DEFAULT 'activo',
                observaciones_prestamo TEXT,
                observaciones_devolucion TEXT,
                autorizado_por TEXT,
                entregado_por TEXT,
                recibido_por TEXT,
                FOREIGN KEY (elemento_id) REFERENCES elementos (id),
                FOREIGN KEY (beneficiario_id) REFERENCES beneficiarios (id),
                FOREIGN KEY (hermano_solicitante_id) REFERENCES hermanos (id)
            )
        """)
        
        # Insertar categor√≠as b√°sicas si no existen
        categorias_basicas = [
            ("Sillas de Ruedas", "Sillas de ruedas manuales y el√©ctricas"),
            ("Bastones", "Bastones simples y ortop√©dicos"),
            ("Muletas", "Muletas axilares y de antebrazo"),
            ("Andadores", "Andadores con y sin ruedas"),
            ("Camas Ortop√©dicas", "Camas articuladas y colchones"),
            ("Equipos de Rehabilitaci√≥n", "Equipos diversos de rehabilitaci√≥n"),
            ("Otros", "Elementos diversos no categorizados")
        ]
        
        for categoria, descripcion in categorias_basicas:
            cursor.execute("INSERT OR IGNORE INTO categorias (nombre, descripcion) VALUES (?, ?)", 
                         (categoria, descripcion))
        
        conn.commit()
        conn.close()

# Inicializar la base de datos
db = DatabaseManager()

def authenticate():
    """Sistema de autenticaci√≥n b√°sico"""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    
    if not st.session_state.authenticated:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.title("üèõÔ∏è BEO")
            st.subheader("Banco de Elementos Ortop√©dicos")
            st.markdown("---")
        
        st.subheader("üîê Iniciar Sesi√≥n")
        
        with st.form("login_form"):
            username = st.text_input("Usuario")
            password = st.text_input("Contrase√±a", type="password")
            submit = st.form_submit_button("Ingresar al Sistema")
            
            if submit:
                if username == "beo_admin" and password == "beo2025":
                    st.session_state.authenticated = True
                    st.rerun()
                else:
                    st.error("Credenciales incorrectas")
        
        st.info("üë§ Usuario: beo_admin | üîë Contrase√±a: beo2025")
        st.markdown("---")
        st.caption("Sistema de Gesti√≥n del Banco de Elementos Ortop√©dicos")
        return False
    
    return True

def mostrar_manual_usuario():
    """Manual de usuario completo del sistema BEO"""
    st.header("üìö Manual de Usuario - Sistema BEO")
    st.markdown("**Gu√≠a completa para usar el Banco de Elementos Ortop√©dicos**")
    
    # √çndice de contenidos en el sidebar
    st.sidebar.markdown("### üìã √çndice del Manual")
    seccion = st.sidebar.radio(
        "Seleccionar Secci√≥n:",
        [
            "üè† Introducci√≥n",
            "üèõÔ∏è Gesti√≥n de Logias", 
            "üë®‚Äçü§ù‚Äçüë® Gesti√≥n de Hermanos",
            "ü¶Ω Gesti√≥n de Elementos",
            "üìã Sistema de Pr√©stamos",
            "üîÑ Devoluci√≥n de Elementos",
            "üîß Cambio de Estados",
            "üìä Dashboard y Reportes",
            "‚ùì Preguntas Frecuentes"
        ]
    )
    
    if seccion == "üè† Introducci√≥n":
        st.markdown("""
        ## üè† Introducci√≥n al Sistema BEO
        
        ### ¬øQu√© es el Sistema BEO?
        El **Banco de Elementos Ortop√©dicos (BEO)** es un sistema digital dise√±ado espec√≠ficamente para organizaciones mas√≥nicas filantr√≥picas que administran pr√©stamos de elementos ortop√©dicos a hermanos y sus familias.
        
        ### üéØ Objetivos del Sistema
        - **Organizar** el inventario de elementos ortop√©dicos
        - **Controlar** los pr√©stamos y devoluciones
        - **Facilitar** la b√∫squeda y seguimiento de elementos
        - **Generar** reportes y estad√≠sticas
        - **Mantener** un registro hist√≥rico completo
        
        ### üèõÔ∏è Estructura Mas√≥nica
        El sistema est√° dise√±ado considerando la estructura mas√≥nica:
        - **Logias** con sus Venerables Maestros y Hospitalarios
        - **Hermanos** con sus grados mas√≥nicos
        - **Beneficiarios** (hermanos y familiares)
        - **Seguimiento** por logia y hermano responsable
        
        ### üîê Credenciales de Acceso
        - **Usuario:** `beo_admin`
        - **Contrase√±a:** `beo2025`
        
        ### üì± Navegaci√≥n Principal
        El sistema se organiza en las siguientes secciones:
        1. **Dashboard** - Vista general y estad√≠sticas
        2. **Gesti√≥n de Logias** - Administrar logias mas√≥nicas
        3. **Gesti√≥n de Hermanos** - Registro de hermanos
        4. **Gesti√≥n de Elementos** - Inventario ortop√©dico
        5. **Formulario de Pr√©stamo** - Gesti√≥n completa de pr√©stamos
        6. **Gesti√≥n de Dep√≥sitos** - Ubicaciones de almacenamiento
        7. **Manual de Usuario** - Esta gu√≠a
        """)
    
    elif seccion == "üèõÔ∏è Gesti√≥n de Logias":
        st.markdown("""
        ## üèõÔ∏è Gesti√≥n de Logias
        
        ### ¬øPara qu√© sirve?
        Registrar y administrar las logias mas√≥nicas que participan en el programa BEO.
        
        ### üìù C√≥mo Registrar una Nueva Logia
        
        1. **Ir a:** Men√∫ Principal ‚Üí Gesti√≥n de Logias
        2. **Completar los campos:**
           - **Nombre de la Logia*** (obligatorio)
           - **N√∫mero** de la logia
           - **Oriente** (ciudad/ubicaci√≥n)
           - **Venerable Maestro** y su tel√©fono
           - **Hospitalario** y su tel√©fono
           - **Direcci√≥n** de la logia
        
        3. **Hacer clic en:** "Guardar Logia"
        
        ### üìã Informaci√≥n Importante
        - El **Hospitalario** es clave para la gesti√≥n del BEO
        - Los **tel√©fonos** son importantes para coordinaci√≥n
        - El **nombre** debe ser √∫nico en el sistema
        
        ### üí° Consejos
        - Registrar primero las logias antes que los hermanos
        - Mantener actualizada la informaci√≥n de contacto
        - El Hospitalario suele ser el responsable del BEO en cada logia
        """)
    
    elif seccion == "üë®‚Äçü§ù‚Äçüë® Gesti√≥n de Hermanos":
        st.markdown("""
        ## üë®‚Äçü§ù‚Äçüë® Gesti√≥n de Hermanos
        
        ### ¬øPara qu√© sirve?
        Registrar hermanos masones que pueden solicitar pr√©stamos del BEO.
        
        ### üìù C√≥mo Registrar un Nuevo Hermano
        
        1. **Ir a:** Men√∫ Principal ‚Üí Gesti√≥n de Hermanos ‚Üí "Nuevo Hermano"
        2. **Completar informaci√≥n b√°sica:**
           - **Nombre Completo*** (obligatorio)
           - **Tel√©fono**
           - **Logia*** (seleccionar de la lista)
           - **Grado mas√≥nico** (Apr:., Comp:., M:.M:., etc.)
        
        3. **Completar informaci√≥n adicional:**
           - **Direcci√≥n**
           - **Email**
           - **Fecha de Iniciaci√≥n**
           - **Observaciones**
        
        4. **Hacer clic en:** "‚úÖ Guardar Hermano"
        
        ### üé≠ Grados Mas√≥nicos Disponibles
        - **Apr:.** - Aprendiz
        - **Comp:.** - Compa√±ero  
        - **M:.M:.** - Maestro Mas√≥n
        - **Gr:. 4¬∞** al **Gr:. 33¬∞** - Grados superiores
        - **Otro** - Para grados especiales
        
        ### üìä Ver Lista de Hermanos
        - **Ir a:** Gesti√≥n de Hermanos ‚Üí "Lista de Hermanos"
        - Ver todos los hermanos activos registrados
        - Informaci√≥n incluye: nombre, tel√©fono, grado, logia
        
        ### üí° Consejos
        - Asegurarse de que la logia est√© registrada primero
        - El tel√©fono es importante para contactar al hermano
        - Los hermanos inactivos no aparecen en listas de pr√©stamos
        """)
    
    elif seccion == "ü¶Ω Gesti√≥n de Elementos":
        st.markdown("""
        ## ü¶Ω Gesti√≥n de Elementos Ortop√©dicos
        
        ### ¬øPara qu√© sirve?
        Administrar el inventario completo de elementos ortop√©dicos del BEO.
        
        ### üìù C√≥mo Registrar un Nuevo Elemento
        
        1. **Ir a:** Men√∫ Principal ‚Üí Gesti√≥n de Elementos ‚Üí "Nuevo Elemento"
        2. **Informaci√≥n b√°sica:**
           - **C√≥digo del Elemento*** (√∫nico, ej: SR-001)
           - **Nombre del Elemento*** (ej: Silla de Ruedas Manual)
           - **Categor√≠a*** (seleccionar de la lista)
           - **Dep√≥sito*** (donde se almacena)
        
        3. **Informaci√≥n detallada:**
           - **Descripci√≥n** (caracter√≠sticas espec√≠ficas)
           - **Marca** y **Modelo**
           - **N√∫mero de Serie**
           - **Fecha de Ingreso**
           - **Observaciones**
        
        4. **Hacer clic en:** "ü¶Ω Guardar Elemento"
        
        ### üì¶ Categor√≠as de Elementos
        - **Sillas de Ruedas** - Manuales y el√©ctricas
        - **Bastones** - Simples y ortop√©dicos
        - **Muletas** - Axilares y de antebrazo
        - **Andadores** - Con y sin ruedas
        - **Camas Ortop√©dicas** - Articuladas y colchones
        - **Equipos de Rehabilitaci√≥n** - Diversos equipos
        - **Otros** - Elementos no categorizados
        
        ### üìä Ver Inventario
        - **Ir a:** Gesti√≥n de Elementos ‚Üí "Inventario"
        - **Filtrar por:** Categor√≠a, Dep√≥sito, Estado
        - **Estados posibles:** Disponible, Prestado, Mantenimiento
        
        ### üîß Cambiar Estado de Elementos
        - **Ir a:** Gesti√≥n de Elementos ‚Üí "üîß Cambiar Estado de Elementos"
        - **Buscar** el elemento por c√≥digo o nombre
        - **Hacer clic** en "üîÑ Cambiar Estado"
        - **Seleccionar** nuevo estado y raz√≥n del cambio
        - **Confirmar** el cambio
        
        ### üí° Consejos para C√≥digos
        - Usar formato consistente: **SR-001** (Silla Ruedas)
        - **BA-001** (Bast√≥n), **MU-001** (Muletas)
        - **AN-001** (Andador), **CA-001** (Cama)
        - Los c√≥digos deben ser √∫nicos en todo el sistema
        """)
    
    elif seccion == "üìã Sistema de Pr√©stamos":
        st.markdown("""
        ## üìã Sistema de Pr√©stamos
        
        ### ¬øPara qu√© sirve?
        Gestionar el ciclo completo de pr√©stamos de elementos ortop√©dicos seg√∫n el formulario oficial BEO.
        
        ### üìù C√≥mo Registrar un Nuevo Pr√©stamo
        
        1. **Ir a:** Men√∫ Principal ‚Üí Formulario de Pr√©stamo ‚Üí "Nuevo Pr√©stamo"
        
        2. **Informaci√≥n General:**
           - **Fecha** del pr√©stamo
           - **Duraci√≥n:** Especificar en d√≠as o meses
           - El sistema calcula autom√°ticamente la fecha de devoluci√≥n
        
        3. **Hermano Solicitante:**
           - **Seleccionar** hermano de la lista
           - Se muestra autom√°ticamente: logia, grado, hospitalario, venerable
        
        4. **Beneficiario del Pr√©stamo:**
           - **Tipo:** Hermano o Familiar
           - **Si es Hermano:** Seleccionar de la lista
           - **Si es Familiar:** 
             - Especificar parentesco (Madre, Padre, Esposa/o, etc.)
             - Indicar de qu√© hermano es familiar
             - Completar nombre y tel√©fono
        
        5. **Informaci√≥n del Elemento:**
           - **Direcci√≥n de entrega**
           - **Elemento a prestar** (solo aparecen disponibles)
           - **Observaciones del pr√©stamo**
           - **Autorizado por**
           - **Entregado por**
        
        6. **Hacer clic en:** "üìã Registrar Pr√©stamo BEO"
        
        ### üìä Monitorear Pr√©stamos Activos
        - **Ir a:** Formulario de Pr√©stamo ‚Üí "Pr√©stamos Activos"
        - **Estados visuales:**
          - üü¢ **Vigente** - Dentro del plazo
          - üü° **Por Vencer** - Pr√≥ximo a vencer (7 d√≠as)
          - üî¥ **Vencido** - Pasado la fecha l√≠mite
        
        ### üí° Consejos
        - Verificar que el elemento est√© "disponible"
        - La duraci√≥n t√≠pica es 90 d√≠as o 3 meses
        - Completar siempre las observaciones importantes
        - El hermano solicitante puede ser diferente al beneficiario
        """)
    
    elif seccion == "üîÑ Devoluci√≥n de Elementos":
        st.markdown("""
        ## üîÑ Devoluci√≥n de Elementos
        
        ### ¬øPara qu√© sirve?
        Registrar la devoluci√≥n de elementos prestados de manera completa y organizada.
        
        ### üìù C√≥mo Registrar una Devoluci√≥n
        
        1. **Ir a:** Formulario de Pr√©stamo ‚Üí "üîÑ DEVOLVER ELEMENTOS"
        
        2. **Encontrar el Elemento:**
           - **Filtrar por estado:** Todos, Vigente, Por vencer, Vencido
           - **Buscar por c√≥digo:** Ej: SR-001
           - **Buscar por beneficiario:** Nombre de quien tiene el elemento
        
        3. **Iniciar Devoluci√≥n:**
           - **Hacer clic** en "üîÑ DEVOLVER AHORA"
           - Se abre el formulario completo de devoluci√≥n
        
        4. **Completar Informaci√≥n de Devoluci√≥n:**
           - **Fecha de Devoluci√≥n**
           - **Recibido por** (quien recibe el elemento)
           - **Dep√≥sito de Devoluci√≥n** (a d√≥nde va el elemento)
           - **Estado del Elemento:**
             - Bueno
             - Regular  
             - Necesita Mantenimiento
             - Da√±ado
           - **Observaciones** detalladas
        
        5. **Confirmar Devoluci√≥n:**
           - **Revisar** la informaci√≥n mostrada
           - **Hacer clic** en "‚úÖ CONFIRMAR DEVOLUCI√ìN"
           - Si el elemento necesita mantenimiento, usar "üîß Devolver a Mantenimiento"
        
        ### üè¢ Selecci√≥n de Dep√≥sito
        - Puedes elegir a qu√© dep√≥sito devolver cada elemento
        - No necesariamente debe ser el dep√≥sito original
        - √ötil para redistribuir elementos seg√∫n necesidades
        
        ### ‚è∞ Devoluciones Anticipadas
        - **S√ç puedes devolver** antes de la fecha l√≠mite
        - No hay restricciones de tiempo
        - √ötil para elementos que ya no se necesitan
        
        ### üìö Historial de Devoluciones
        - **Ir a:** Formulario de Pr√©stamo ‚Üí "Historial de Devoluciones"
        - **Ver todas** las devoluciones realizadas
        - **Filtrar por fechas** y cumplimiento
        - **Estad√≠sticas** de cumplimiento (a tiempo, con retraso, anticipadas)
        
        ### üí° Consejos
        - Describir bien el estado del elemento al devolverlo
        - Si hay da√±os, usar "üîß Devolver a Mantenimiento"
        - Las devoluciones anticipadas son v√°lidas y recomendadas
        - El historial ayuda a evaluar el cumplimiento por logia
        """)
    
    elif seccion == "üîß Cambio de Estados":
        st.markdown("""
        ## üîß Cambio Manual de Estados
        
        ### ¬øPara qu√© sirve?
        Cambiar manualmente el estado de elementos para correcciones, mantenimiento o casos especiales.
        
        ### üìù C√≥mo Cambiar el Estado de un Elemento
        
        1. **Ir a:** Gesti√≥n de Elementos ‚Üí "üîß Cambiar Estado de Elementos"
        
        2. **Encontrar el Elemento:**
           - **Filtrar por estado actual:** Disponible, Prestado, Mantenimiento
           - **Buscar por c√≥digo:** Ej: SR-001
           - **Buscar por nombre:** Ej: Silla de ruedas
        
        3. **Iniciar Cambio:**
           - **Hacer clic** en "üîÑ Cambiar Estado"
           - Se muestra advertencia si est√° prestado
        
        4. **Completar Cambio:**
           - **Nuevo Estado:**
             - ‚úÖ **Disponible** - Puede ser prestado
             - üìã **Prestado** - Marcado como prestado
             - üîß **Mantenimiento** - Necesita reparaci√≥n
           - **Raz√≥n del Cambio:**
             - Correcci√≥n administrativa
             - Devoluci√≥n no registrada
             - Elemento perdido/da√±ado
             - Mantenimiento preventivo
             - Error en registro anterior
             - Otro (personalizable)
           - **Observaciones** detalladas
           - **Responsable** que autoriza el cambio
        
        5. **Confirmar Cambio:**
           - **Revisar** el resumen del cambio
           - **Hacer clic** en "‚úÖ CONFIRMAR CAMBIO"
        
        ### ‚ö†Ô∏è Casos Especiales
        
        #### Elementos Prestados
        - **Advertencia autom√°tica** si tiene pr√©stamo activo
        - **Cierre autom√°tico** del pr√©stamo al cambiar estado
        - **Recomendaci√≥n** de usar devoluci√≥n formal cuando sea apropiado
        
        #### Registro de Cambios
        - **Historial autom√°tico** en observaciones del elemento
        - **Fecha y hora** del cambio
        - **Responsable** que autoriz√≥
        - **Raz√≥n detallada** del cambio
        
        ### üéØ Casos de Uso Comunes
        
        #### Devoluci√≥n No Registrada
        ```
        Estado: prestado ‚Üí disponible
        Raz√≥n: "Devoluci√≥n no registrada"
        Obs: "El elemento fue devuelto ayer pero no se registr√≥"
        ```
        
        #### Mantenimiento Preventivo
        ```
        Estado: disponible ‚Üí mantenimiento
        Raz√≥n: "Mantenimiento preventivo"
        Obs: "Revisi√≥n semestral programada"
        ```
        
        #### Correcci√≥n de Error
        ```
        Estado: prestado ‚Üí disponible
        Raz√≥n: "Error en registro anterior"
        Obs: "Se registr√≥ pr√©stamo por error"
        ```
        
        ### üí° Consejos
        - Usar esta funci√≥n solo para casos especiales
        - Para devoluciones normales, usar "üîÑ DEVOLVER ELEMENTOS"
        - Siempre especificar la raz√≥n del cambio
        - El historial queda registrado permanentemente
        """)
    
    elif seccion == "üìä Dashboard y Reportes":
        st.markdown("""
        ## üìä Dashboard y Reportes
        
        ### ¬øPara qu√© sirve?
        Obtener una vista general del estado del BEO con estad√≠sticas y gr√°ficos.
        
        ### üìà M√©tricas Principales
        - **ü¶Ω Total Elementos** - Inventario completo
        - **‚úÖ Disponibles** - Elementos listos para pr√©stamo  
        - **üìã Pr√©stamos Activos** - Elementos actualmente prestados
        - **üë®‚Äçü§ù‚Äçüë® Hermanos Activos** - Hermanos registrados
        
        ### üìä Gr√°ficos Disponibles
        
        #### Elementos por Categor√≠a
        - **Gr√°fico de pastel** mostrando distribuci√≥n del inventario
        - √ötil para ver qu√© tipo de elementos son m√°s comunes
        
        #### Estado de Elementos
        - **Gr√°fico de barras** con estados actuales
        - Colores: Verde (disponible), Naranja (prestado), Rojo (mantenimiento)
        
        #### Pr√©stamos por Logia
        - **Gr√°fico de barras** mostrando pr√©stamos activos por logia
        - Identifica qu√© logias usan m√°s el BEO
        
        ### üö® Alertas de Vencimiento
        - **Lista autom√°tica** de pr√©stamos pr√≥ximos a vencer o vencidos
        - **Informaci√≥n de contacto** para realizar seguimiento
        - **Estado de alerta** claramente identificado
        
        ### üìã Informaci√≥n Mostrada en Alertas
        - **C√≥digo y nombre** del elemento
        - **Beneficiario** y tel√©fono de contacto
        - **Hermano solicitante** y su logia
        - **Fecha de devoluci√≥n estimada**
        - **Estado de alerta** (Por vencer / Vencido)
        
        ### üí° Uso del Dashboard
        - **Revisar diariamente** las alertas de vencimiento
        - **Monitorear** el uso por logia para planificaci√≥n
        - **Identificar** necesidades de m√°s elementos en ciertas categor√≠as
        - **Evaluar** la efectividad del programa BEO
        """)
    
    elif seccion == "‚ùì Preguntas Frecuentes":
        st.markdown("""
        ## ‚ùì Preguntas Frecuentes
        
        ### üîê Acceso y Seguridad
        
        **P: ¬øCu√°les son las credenciales de acceso?**
        R: Usuario: `beo_admin`, Contrase√±a: `beo2025`
        
        **P: ¬øSe pueden cambiar las credenciales?**
        R: S√≠, contactar al administrador del sistema para modificarlas.
        
        **P: ¬øEl sistema guarda autom√°ticamente?**
        R: S√≠, todos los cambios se guardan autom√°ticamente al confirmar.
        
        ### üìã Gesti√≥n de Pr√©stamos
        
        **P: ¬øPuede un hermano solicitar para un familiar?**
        R: S√≠, al crear el pr√©stamo selecciona "Familiar" y especifica el parentesco.
        
        **P: ¬øPuedo devolver un elemento antes de la fecha l√≠mite?**
        R: S√≠, puedes devolver elementos en cualquier momento desde "üîÑ DEVOLVER ELEMENTOS".
        
        **P: ¬øQu√© pasa si no devuelven a tiempo?**
        R: El sistema marca como "VENCIDO" y aparece en alertas del Dashboard.
        
        **P: ¬øPuedo cambiar la duraci√≥n de un pr√©stamo ya registrado?**
        R: No directamente, pero puedes registrar la devoluci√≥n y crear un nuevo pr√©stamo.
        
        ### ü¶Ω Gesti√≥n de Elementos
        
        **P: ¬øC√≥mo marco un elemento como da√±ado?**
        R: Ve a "üîß Cambiar Estado de Elementos" y cambia a "Mantenimiento".
        
        **P: ¬øPuedo mover un elemento a otro dep√≥sito?**
        R: S√≠, durante la devoluci√≥n puedes elegir el dep√≥sito de destino.
        
        **P: ¬øQu√© pasa si registro un c√≥digo duplicado?**
        R: El sistema mostrar√° error. Cada c√≥digo debe ser √∫nico.
        
        ### üìä Reportes y Seguimiento
        
        **P: ¬øC√≥mo veo qu√© logia usa m√°s el BEO?**
        R: En el Dashboard, revisa el gr√°fico "Pr√©stamos por Logia".
        
        **P: ¬øPuedo ver el historial de un elemento espec√≠fico?**
        R: Actualmente no hay vista espec√≠fica, pero se puede implementar.
        
        **P: ¬øC√≥mo exporto datos para reportes?**
        R: Actualmente no hay funci√≥n de exportaci√≥n, pero se puede agregar.
        
        ### üîß Problemas T√©cnicos
        
        **P: ¬øQu√© hago si el sistema no carga?**
        R: Verificar conexi√≥n a internet y recargar la p√°gina.
        
        **P: ¬øLos datos se pierden al cerrar la aplicaci√≥n?**
        R: No, todos los datos se guardan en la base de datos permanentemente.
        
        **P: ¬øPuedo usar el sistema desde el celular?**
        R: S√≠, el sistema es responsive y funciona en dispositivos m√≥viles.
        
        ### üèõÔ∏è Aspectos Mas√≥nicos
        
        **P: ¬øEs obligatorio registrar la logia primero?**
        R: S√≠, debes registrar la logia antes de registrar hermanos.
        
        **P: ¬øQu√© informaci√≥n de la logia es m√°s importante?**
        R: El Hospitalario y su tel√©fono, ya que suele gestionar el BEO.
        
        **P: ¬øPuedo registrar hermanos de logias no mas√≥nicas?**
        R: El sistema est√° dise√±ado para logias mas√≥nicas, pero se puede adaptar.
        
        ### üìû Soporte
        
        **P: ¬øA qui√©n contacto para soporte t√©cnico?**
        R: Contactar al administrador del sistema o al responsable t√©cnico del BEO.
        
        **P: ¬øSe pueden agregar nuevas funcionalidades?**
        R: S√≠, el sistema puede expandirse seg√∫n las necesidades de la organizaci√≥n.
        
        **P: ¬øHay manual de administrador?**
        R: Este manual cubre el uso b√°sico. Para administraci√≥n avanzada, contactar soporte.
        """)

def gestionar_logias():
    """Gesti√≥n de logias"""
    st.header("üèõÔ∏è Gesti√≥n de Logias")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("Nueva Logia")
        with st.form("logia_form"):
            nombre = st.text_input("Nombre de la Logia*")
            numero = st.number_input("N√∫mero", min_value=1, step=1, value=None)
            oriente = st.text_input("Oriente")
            venerable_maestro = st.text_input("Venerable Maestro")
            telefono_venerable = st.text_input("Tel√©fono del Venerable")
            hospitalario = st.text_input("Hospitalario")
            telefono_hospitalario = st.text_input("Tel√©fono del Hospitalario")
            direccion = st.text_area("Direcci√≥n")
            
            if st.form_submit_button("Guardar Logia"):
                if nombre:
                    try:
                        conn = db.get_connection()
                        cursor = conn.cursor()
                        cursor.execute("""
                            INSERT INTO logias (nombre, numero, oriente, venerable_maestro, telefono_venerable,
                                              hospitalario, telefono_hospitalario, direccion)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                        """, (nombre, numero, oriente, venerable_maestro, telefono_venerable,
                             hospitalario, telefono_hospitalario, direccion))
                        conn.commit()
                        conn.close()
                        st.success("Logia guardada exitosamente")
                        st.rerun()
                    except sqlite3.IntegrityError:
                        st.error("Ya existe una logia con ese nombre")
                else:
                    st.error("El nombre de la logia es obligatorio")
    
    with col2:
        st.subheader("Logias Registradas")
        conn = db.get_connection()
        logias_df = pd.read_sql_query("""
            SELECT nombre, numero, oriente, venerable_maestro, hospitalario
            FROM logias ORDER BY numero, nombre
        """, conn)
        conn.close()
        
        if not logias_df.empty:
            st.dataframe(logias_df, use_container_width=True)
        else:
            st.info("No hay logias registradas")

def gestionar_hermanos():
    """Gesti√≥n de hermanos"""
    st.header("üë®‚Äçü§ù‚Äçüë® Gesti√≥n de Hermanos")
    
    tab1, tab2 = st.tabs(["Nuevo Hermano", "Lista de Hermanos"])
    
    with tab1:
        conn = db.get_connection()
        logias_df = pd.read_sql_query("SELECT id, nombre, numero FROM logias ORDER BY numero, nombre", conn)
        conn.close()
        
        with st.form("hermano_form_completo"):
            col1, col2 = st.columns(2)
            
            with col1:
                nombre = st.text_input("Nombre Completo*")
                telefono = st.text_input("Tel√©fono")
                
                if not logias_df.empty:
                    logia_id = st.selectbox(
                        "Logia*",
                        options=logias_df['id'].tolist(),
                        format_func=lambda x: f"{logias_df[logias_df['id'] == x]['nombre'].iloc[0]} N¬∞{logias_df[logias_df['id'] == x]['numero'].iloc[0] if pd.notna(logias_df[logias_df['id'] == x]['numero'].iloc[0]) else 'S/N'}"
                    )
                else:
                    st.error("No hay logias disponibles")
                    logia_id = None
            
            with col2:
                grado = st.selectbox(
                    "Grado",
                    options=["Apr:.", "Comp:.", "M:.M:.", "Gr:. 4¬∞", "Gr:. 18¬∞", "Gr:. 30¬∞", "Gr:. 32¬∞", "Gr:. 33¬∞", "Otro"]
                )
                direccion = st.text_area("Direcci√≥n")
                email = st.text_input("Email")
                fecha_iniciacion = st.date_input("Fecha de Iniciaci√≥n", value=None)
                observaciones = st.text_area("Observaciones")
            
            submitted = st.form_submit_button("‚úÖ Guardar Hermano", use_container_width=True)
            
            if submitted:
                if nombre and logia_id:
                    try:
                        conn = db.get_connection()
                        cursor = conn.cursor()
                        cursor.execute("""
                            INSERT INTO hermanos (nombre, telefono, logia_id, grado, direccion, 
                                                email, fecha_iniciacion, observaciones)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                        """, (nombre, telefono, logia_id, grado, direccion, 
                             email, fecha_iniciacion, observaciones))
                        conn.commit()
                        conn.close()
                        st.success("‚úÖ Hermano guardado exitosamente")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå Error al guardar hermano: {e}")
                else:
                    st.error("‚ùå Nombre y logia son obligatorios")
    
    with tab2:
        st.subheader("Lista de Hermanos")
        
        conn = db.get_connection()
        hermanos_df = pd.read_sql_query("""
            SELECT h.id, h.nombre, h.telefono, h.grado, l.nombre as logia, h.activo
            FROM hermanos h
            LEFT JOIN logias l ON h.logia_id = l.id
            WHERE h.activo = 1
            ORDER BY h.nombre
        """, conn)
        conn.close()
        
        if not hermanos_df.empty:
            st.dataframe(hermanos_df, use_container_width=True)
        else:
            st.info("No hay hermanos registrados")

def gestionar_elementos():
    """Gesti√≥n de elementos ortop√©dicos"""
    st.header("ü¶Ω Gesti√≥n de Elementos Ortop√©dicos")
    
    tab1, tab2, tab3 = st.tabs(["Nuevo Elemento", "Inventario", "üîß Cambiar Estado"])
    
    with tab1:
        conn = db.get_connection()
        depositos_df = pd.read_sql_query("SELECT id, nombre FROM depositos", conn)
        categorias_df = pd.read_sql_query("SELECT id, nombre FROM categorias", conn)
        conn.close()
        
        with st.form("elemento_form_completo"):
            col1, col2 = st.columns(2)
            
            with col1:
                codigo = st.text_input("C√≥digo del Elemento*")
                nombre = st.text_input("Nombre del Elemento*")
                
                if not categorias_df.empty:
                    categoria_id = st.selectbox(
                        "Categor√≠a*",
                        options=categorias_df['id'].tolist(),
                        format_func=lambda x: categorias_df[categorias_df['id'] == x]['nombre'].iloc[0]
                    )
                else:
                    st.error("No hay categor√≠as disponibles")
                    categoria_id = None
                
                if not depositos_df.empty:
                    deposito_id = st.selectbox(
                        "Dep√≥sito*",
                        options=depositos_df['id'].tolist(),
                        format_func=lambda x: depositos_df[depositos_df['id'] == x]['nombre'].iloc[0]
                    )
                else:
                    st.error("No hay dep√≥sitos disponibles")
                    deposito_id = None
            
            with col2:
                descripcion = st.text_area("Descripci√≥n")
                marca = st.text_input("Marca")
                modelo = st.text_input("Modelo")
                numero_serie = st.text_input("N√∫mero de Serie")
                fecha_ingreso = st.date_input("Fecha de Ingreso", value=date.today())
                observaciones = st.text_area("Observaciones")
            
            submitted = st.form_submit_button("ü¶Ω Guardar Elemento", use_container_width=True)
            
            if submitted:
                if codigo and nombre and categoria_id and deposito_id:
                    try:
                        conn = db.get_connection()
                        cursor = conn.cursor()
                        cursor.execute("""
                            INSERT INTO elementos 
                            (codigo, nombre, categoria_id, deposito_id, descripcion, marca, 
                             modelo, numero_serie, fecha_ingreso, observaciones)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (codigo, nombre, categoria_id, deposito_id, descripcion, 
                             marca, modelo, numero_serie, fecha_ingreso, observaciones))
                        conn.commit()
                        conn.close()
                        st.success("‚úÖ Elemento guardado exitosamente")
                        st.rerun()
                    except sqlite3.IntegrityError:
                        st.error("‚ùå Ya existe un elemento con ese c√≥digo")
                else:
                    st.error("‚ùå Todos los campos marcados con * son obligatorios")
    
    with tab2:
        st.subheader("Inventario de Elementos")
        
        col1, col2, col3 = st.columns(3)
        
        conn = db.get_connection()
        
        with col1:
            categorias_df = pd.read_sql_query("SELECT id, nombre FROM categorias", conn)
            categoria_filtro = st.selectbox(
                "Filtrar por Categor√≠a",
                options=[None] + categorias_df['id'].tolist(),
                format_func=lambda x: "Todas las categor√≠as" if x is None else categorias_df[categorias_df['id'] == x]['nombre'].iloc[0]
            )
        
        with col2:
            depositos_df = pd.read_sql_query("SELECT id, nombre FROM depositos", conn)
            deposito_filtro = st.selectbox(
                "Filtrar por Dep√≥sito",
                options=[None] + depositos_df['id'].tolist(),
                format_func=lambda x: "Todos los dep√≥sitos" if x is None else depositos_df[depositos_df['id'] == x]['nombre'].iloc[0]
            )
        
        with col3:
            estado_filtro = st.selectbox(
                "Filtrar por Estado",
                options=[None, "disponible", "prestado", "mantenimiento"],
                format_func=lambda x: "Todos los estados" if x is None else x.title()
            )
        
        query = """
            SELECT e.id, e.codigo, e.nombre, c.nombre as categoria, d.nombre as deposito, 
                   e.estado, e.marca, e.modelo
            FROM elementos e
            JOIN categorias c ON e.categoria_id = c.id
            JOIN depositos d ON e.deposito_id = d.id
            WHERE 1=1
        """
        params = []
        
        if categoria_filtro:
            query += " AND e.categoria_id = ?"
            params.append(categoria_filtro)
        
        if deposito_filtro:
            query += " AND e.deposito_id = ?"
            params.append(deposito_filtro)
        
        if estado_filtro:
            query += " AND e.estado = ?"
            params.append(estado_filtro)
        
        query += " ORDER BY e.codigo"
        
        elementos_df = pd.read_sql_query(query, conn, params=params)
        conn.close()
        
        if not elementos_df.empty:
            st.dataframe(elementos_df, use_container_width=True)
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Total Elementos", len(elementos_df))
            with col2:
                disponibles = len(elementos_df[elementos_df['estado'] == 'disponible'])
                st.metric("Disponibles", disponibles)
            with col3:
                prestados = len(elementos_df[elementos_df['estado'] == 'prestado'])
                st.metric("Prestados", prestados)
            with col4:
                mantenimiento = len(elementos_df[elementos_df['estado'] == 'mantenimiento'])
                st.metric("En Mantenimiento", mantenimiento)
        else:
            st.info("No se encontraron elementos con los filtros aplicados")
    
    with tab3:
        st.header("üîß Cambiar Estado de Elementos")
        st.markdown("**Gesti√≥n manual de estados para casos especiales**")
        st.info("üí° Para devoluciones normales, usar 'Formulario de Pr√©stamo' ‚Üí 'üîÑ DEVOLVER ELEMENTOS'")
        
        if st.button("üîÑ Actualizar Lista"):
            st.rerun()

def gestionar_prestamos():
    """Gesti√≥n de pr√©stamos seg√∫n formulario BEO"""
    st.header("üìã Formulario de Pr√©stamo BEO")
    
    tab1, tab2, tab3, tab4 = st.tabs(["Nuevo Pr√©stamo", "Pr√©stamos Activos", "üîÑ DEVOLVER ELEMENTOS", "Historial"])
    
    with tab1:
        st.subheader("üìù Nuevo Formulario de Pr√©stamo")
        
        with st.form("prestamo_beo_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### üìÖ Informaci√≥n General")
                fecha_prestamo = st.date_input("Fecha*", value=date.today())
                
                st.markdown("#### ‚è±Ô∏è Duraci√≥n del Pr√©stamo")
                col_dur1, col_dur2 = st.columns(2)
                with col_dur1:
                    duracion_tipo = st.selectbox("Tipo", ["D√≠as", "Meses"])
                with col_dur2:
                    duracion_cantidad = st.number_input("Cantidad", min_value=1, value=90 if duracion_tipo == "D√≠as" else 3)
                
                duracion_dias = duracion_cantidad * 30 if duracion_tipo == "Meses" else duracion_cantidad
                st.info(f"üìÖ Duraci√≥n: {duracion_dias} d√≠as")
                
                st.markdown("#### üë®‚Äçü§ù‚Äçüë® Hermano Solicitante")
                conn = db.get_connection()
                hermanos_df = pd.read_sql_query("""
                    SELECT h.id, h.nombre, h.telefono, h.grado, l.nombre as logia
                    FROM hermanos h
                    LEFT JOIN logias l ON h.logia_id = l.id
                    WHERE h.activo = 1
                    ORDER BY h.nombre
                """, conn)
                
                if not hermanos_df.empty:
                    hermano_idx = st.selectbox(
                        "Seleccionar Hermano",
                        options=range(len(hermanos_df)),
                        format_func=lambda x: f"{hermanos_df.iloc[x]['nombre']} - {hermanos_df.iloc[x]['logia']}"
                    )
                    hermano_solicitante_id = hermanos_df.iloc[hermano_idx]['id']
                else:
                    st.error("No hay hermanos registrados")
                    hermano_solicitante_id = None
            
            with col2:
                st.markdown("#### üéØ Beneficiario del Pr√©stamo")
                tipo_beneficiario = st.radio("¬øEs Hermano o Familiar?", ["Hermano", "Familiar"])
                
                if tipo_beneficiario == "Hermano":
                    beneficiario_nombre = hermanos_df.iloc[hermano_idx]['nombre'] if not hermanos_df.empty else ""
                    beneficiario_telefono = hermanos_df.iloc[hermano_idx]['telefono'] if not hermanos_df.empty else ""
                    parentesco = None
                    hermano_responsable_id = None
                else:
                    parentesco = st.selectbox("Parentesco", ["Madre", "Padre", "Esposa/o", "Hijo/a", "Hermano/a", "Otro"])
                    beneficiario_nombre = st.text_input("Nombre del Familiar*")
                    beneficiario_telefono = st.text_input("Tel√©fono")
                    hermano_responsable_id = hermano_solicitante_id
                
                st.markdown("#### üìç Informaci√≥n del Pr√©stamo")
                direccion_entrega = st.text_area("Direcci√≥n de entrega*")
                
                elementos_disponibles = pd.read_sql_query("""
                    SELECT e.id, e.codigo, e.nombre, c.nombre as categoria
                    FROM elementos e
                    JOIN categorias c ON e.categoria_id = c.id
                    WHERE e.estado = 'disponible'
                    ORDER BY e.codigo
                """, conn)
                
                if not elementos_disponibles.empty:
                    elemento_id = st.selectbox(
                        "Elemento a Prestar*",
                        options=elementos_disponibles['id'].tolist(),
                        format_func=lambda x: f"{elementos_disponibles[elementos_disponibles['id'] == x]['codigo'].iloc[0]} - {elementos_disponibles[elementos_disponibles['id'] == x]['nombre'].iloc[0]}"
                    )
                else:
                    st.error("No hay elementos disponibles")
                    elemento_id = None
                
                fecha_devolucion_estimada = fecha_prestamo + timedelta(days=duracion_dias)
                st.date_input("Fecha estimada de devoluci√≥n", value=fecha_devolucion_estimada, disabled=True)
                
                observaciones_prestamo = st.text_area("Observaciones")
                entregado_por = st.text_input("Entregado por*")
                
                conn.close()
            
            submitted = st.form_submit_button("üìã Registrar Pr√©stamo", use_container_width=True)
            
            if submitted:
                if hermano_solicitante_id and elemento_id and beneficiario_nombre and direccion_entrega and entregado_por:
                    try:
                        conn = db.get_connection()
                        cursor = conn.cursor()
                        
                        cursor.execute("""
                            INSERT INTO beneficiarios (tipo, hermano_id, hermano_responsable_id, 
                                                     parentesco, nombre, telefono, direccion)
                            VALUES (?, ?, ?, ?, ?, ?, ?)
                        """, (tipo_beneficiario.lower(), 
                             hermano_solicitante_id if tipo_beneficiario == "Hermano" else None,
                             hermano_responsable_id, parentesco, beneficiario_nombre, 
                             beneficiario_telefono, direccion_entrega))
                        
                        beneficiario_id = cursor.lastrowid
                        
                        cursor.execute("""
                            INSERT INTO prestamos 
                            (fecha_prestamo, elemento_id, beneficiario_id, hermano_solicitante_id,
                             duracion_dias, fecha_devolucion_estimada, observaciones_prestamo, entregado_por)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                        """, (fecha_prestamo, elemento_id, beneficiario_id, hermano_solicitante_id,
                             duracion_dias, fecha_devolucion_estimada, observaciones_prestamo, entregado_por))
                        
                        cursor.execute("UPDATE elementos SET estado = 'prestado' WHERE id = ?", (elemento_id,))
                        
                        conn.commit()
                        conn.close()
                        st.success("‚úÖ Pr√©stamo registrado exitosamente")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå Error: {e}")
                else:
                    st.error("‚ùå Campos obligatorios faltantes")
    
    with tab2:
        st.subheader("üìã Pr√©stamos Activos")
        st.info("üí° Para devolver elementos, usar la pesta√±a 'üîÑ DEVOLVER ELEMENTOS'")
        
        conn = db.get_connection()
        prestamos_activos = pd.read_sql_query("""
            SELECT e.codigo, e.nombre as elemento, b.nombre as beneficiario,
                   h.nombre as hermano, p.fecha_prestamo, p.fecha_devolucion_estimada,
                   CASE 
                       WHEN DATE('now') > p.fecha_devolucion_estimada THEN 'VENCIDO'
                       WHEN DATE(p.fecha_devolucion_estimada, '-7 days') <= DATE('now') THEN 'POR VENCER'
                       ELSE 'VIGENTE'
                   END as estado
            FROM prestamos p
            JOIN elementos e ON p.elemento_id = e.id
            JOIN beneficiarios b ON p.beneficiario_id = b.id
            JOIN hermanos h ON p.hermano_solicitante_id = h.id
            WHERE p.estado = 'activo'
            ORDER BY p.fecha_devolucion_estimada
        """, conn)
        conn.close()
        
        if not prestamos_activos.empty:
            st.dataframe(prestamos_activos, use_container_width=True)
        else:
            st.info("No hay pr√©stamos activos")
    
    with tab3:
        st.header("üîÑ DEVOLVER ELEMENTOS")
        st.info("‚ú® Aqu√≠ puedes devolver cualquier elemento prestado en cualquier momento")
        
        if st.button("üîÑ Actualizar Lista"):
            st.rerun()
    
    with tab4:
        st.subheader("üìö Historial de Devoluciones")
        st.info("üìã Aqu√≠ aparecer√° el historial de todas las devoluciones realizadas")

def gestionar_depositos():
    """Gesti√≥n de dep√≥sitos"""
    st.header("üè¢ Gesti√≥n de Dep√≥sitos")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("Nuevo Dep√≥sito")
        with st.form("deposito_form"):
            nombre = st.text_input("Nombre del Dep√≥sito*")
            direccion = st.text_area("Direcci√≥n")
            responsable = st.text_input("Responsable")
            telefono = st.text_input("Tel√©fono")
            email = st.text_input("Email")
            
            if st.form_submit_button("Guardar Dep√≥sito"):
                if nombre:
                    try:
                        conn = db.get_connection()
                        cursor = conn.cursor()
                        cursor.execute("""
                            INSERT INTO depositos (nombre, direccion, responsable, telefono, email)
                            VALUES (?, ?, ?, ?, ?)
                        """, (nombre, direccion, responsable, telefono, email))
                        conn.commit()
                        conn.close()
                        st.success("Dep√≥sito guardado exitosamente")
                        st.rerun()
                    except sqlite3.IntegrityError:
                        st.error("Ya existe un dep√≥sito con ese nombre")
                else:
                    st.error("El nombre del dep√≥sito es obligatorio")
    
    with col2:
        st.subheader("Dep√≥sitos Registrados")
        conn = db.get_connection()
        depositos_df = pd.read_sql_query("SELECT * FROM depositos ORDER BY nombre", conn)
        conn.close()
        
        if not depositos_df.empty:
            st.dataframe(depositos_df, use_container_width=True)
        else:
            st.info("No hay dep√≥sitos registrados")

def mostrar_dashboard():
    """Dashboard con estad√≠sticas y gr√°ficos"""
    st.header("üìä Dashboard BEO")
    
    conn = db.get_connection()
    
    col1, col2, col3, col4 = st.columns(4)
    
    total_elementos = pd.read_sql_query("SELECT COUNT(*) as total FROM elementos", conn).iloc[0]['total']
    disponibles = pd.read_sql_query("SELECT COUNT(*) as total FROM elementos WHERE estado = 'disponible'", conn).iloc[0]['total']
    prestamos_activos = pd.read_sql_query("SELECT COUNT(*) as total FROM prestamos WHERE estado = 'activo'", conn).iloc[0]['total']
    total_hermanos = pd.read_sql_query("SELECT COUNT(*) as total FROM hermanos WHERE activo = 1", conn).iloc[0]['total']
    
    with col1:
        st.metric("ü¶Ω Total Elementos", total_elementos)
    with col2:
        st.metric("‚úÖ Disponibles", disponibles)
    with col3:
        st.metric("üìã Pr√©stamos Activos", prestamos_activos)
    with col4:
        st.metric("üë®‚Äçü§ù‚Äçüë® Hermanos Activos", total_hermanos)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("ü¶Ω Elementos por Categor√≠a")
        elementos_categoria = pd.read_sql_query("""
            SELECT c.nombre, COUNT(e.id) as cantidad
            FROM categorias c
            LEFT JOIN elementos e ON c.id = e.categoria_id
            GROUP BY c.id, c.nombre
            ORDER BY cantidad DESC
        """, conn)
        
        if not elementos_categoria.empty:
            fig = px.pie(elementos_categoria, values='cantidad', names='nombre')
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üìä Estado de Elementos")
        estado_elementos = pd.read_sql_query("""
            SELECT estado, COUNT(*) as cantidad
            FROM elementos
            GROUP BY estado
        """, conn)
        
        if not estado_elementos.empty:
            fig = px.bar(estado_elementos, x='estado', y='cantidad')
            st.plotly_chart(fig, use_container_width=True)
    
    st.subheader("üö® Alertas de Vencimiento")
    prestamos_vencer = pd.read_sql_query("""
        SELECT e.codigo, e.nombre as elemento, b.nombre as beneficiario,
               p.fecha_devolucion_estimada
        FROM prestamos p
        JOIN elementos e ON p.elemento_id = e.id
        JOIN beneficiarios b ON p.beneficiario_id = b.id
        WHERE p.estado = 'activo' 
        AND p.fecha_devolucion_estimada <= DATE('now', '+7 days')
        ORDER BY p.fecha_devolucion_estimada
    """, conn)
    
    if not prestamos_vencer.empty:
        st.dataframe(prestamos_vencer, use_container_width=True)
    else:
        st.success("‚úÖ No hay pr√©stamos pr√≥ximos a vencer")
    
    conn.close()

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    if not authenticate():
        return
    
    col1, col2, col3 = st.columns([1, 3, 1])
    with col2:
        st.title("üèõÔ∏è BEO - Banco de Elementos Ortop√©dicos")
        st.caption("Sistema de Gesti√≥n Integral")
    
    st.sidebar.title("üèõÔ∏è BEO Sistema")
    st.sidebar.markdown("---")
    
    menu_options = {
        "Dashboard": "üìä",
        "Gesti√≥n de Logias": "üèõÔ∏è",
        "Gesti√≥n de Hermanos": "üë®‚Äçü§ù‚Äçüë®",
        "Gesti√≥n de Elementos": "ü¶Ω",
        "Formulario de Pr√©stamo": "üìã",
        "Gesti√≥n de Dep√≥sitos": "üè¢",
        "üìö Manual de Usuario": "üìö"
    }
    
    selected_option = st.sidebar.selectbox(
        "Seleccionar Secci√≥n",
        list(menu_options.keys()),
        format_func=lambda x: f"{menu_options[x]} {x}"
    )
    
    st.sidebar.markdown("---")
    st.sidebar.caption("Banco de Elementos Ortop√©dicos")
    if st.sidebar.button("üö™ Cerrar Sesi√≥n"):
        st.session_state.authenticated = False
        st.rerun()
    
    if selected_option == "Dashboard":
        mostrar_dashboard()
    elif selected_option == "Gesti√≥n de Logias":
        gestionar_logias()
    elif selected_option == "Gesti√≥n de Hermanos":
        gestionar_hermanos()
    elif selected_option == "Gesti√≥n de Elementos":
        gestionar_elementos()
    elif selected_option == "Formulario de Pr√©stamo":
        gestionar_prestamos()
    elif selected_option == "Gesti√≥n de Dep√≥sitos":
        gestionar_depositos()
    elif selected_option == "üìö Manual de Usuario":
        mostrar_manual_usuario()

if __name__ == "__main__":
    main()
