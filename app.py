import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime, date, timedelta
import hashlib
import os
import time
from typing import Optional, List, Dict
import plotly.express as px
import plotly.graph_objects as go

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="BEO - Banco de Elementos Ortop√©dicos",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

class DatabaseManager:
    def __init__(self, db_path: str = "beo_inventario.db"):
        self.db_path = db_path
        self.init_database()
    
    def get_connection(self):
        conn = sqlite3.connect(self.db_path)
        # Habilitar foreign keys
        conn.execute("PRAGMA foreign_keys = ON")
        return conn
    
    def init_database(self):
        """Inicializa las tablas de la base de datos con mejor integridad"""
        conn = self.get_connection()
        cursor = conn.cursor()
        
        # Tabla de logias
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS logias (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL UNIQUE,
                numero INTEGER,
                oriente TEXT,
                venerable_maestro TEXT,
                telefono_venerable TEXT,
                hospitalario TEXT,
                telefono_hospitalario TEXT,
                direccion TEXT,
                activo BOOLEAN DEFAULT 1,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Tabla de dep√≥sitos
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS depositos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL UNIQUE,
                direccion TEXT,
                responsable TEXT,
                telefono TEXT,
                email TEXT,
                activo BOOLEAN DEFAULT 1,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Tabla de categor√≠as de elementos
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS categorias (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL UNIQUE,
                descripcion TEXT,
                activo BOOLEAN DEFAULT 1
            )
        """)
        
        # Tabla de elementos ortop√©dicos
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS elementos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                codigo TEXT NOT NULL UNIQUE,
                nombre TEXT NOT NULL,
                categoria_id INTEGER NOT NULL,
                deposito_id INTEGER NOT NULL,
                estado TEXT DEFAULT 'disponible' CHECK (estado IN ('disponible', 'prestado', 'mantenimiento', 'dado_de_baja')),
                descripcion TEXT,
                marca TEXT,
                modelo TEXT,
                numero_serie TEXT,
                fecha_ingreso DATE NOT NULL,
                observaciones TEXT,
                activo BOOLEAN DEFAULT 1,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (categoria_id) REFERENCES categorias (id),
                FOREIGN KEY (deposito_id) REFERENCES depositos (id)
            )
        """)
        
        # Tabla de hermanos
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS hermanos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL,
                telefono TEXT,
                logia_id INTEGER NOT NULL,
                grado TEXT,
                direccion TEXT,
                email TEXT,
                fecha_iniciacion DATE,
                activo BOOLEAN DEFAULT 1,
                observaciones TEXT,
                fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (logia_id) REFERENCES logias (id)
            )
        """)
        
        # Tabla de beneficiarios (hermanos o familiares)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS beneficiarios (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tipo TEXT NOT NULL CHECK (tipo IN ('hermano', 'familiar')),
                hermano_id INTEGER,
                hermano_responsable_id INTEGER,
                parentesco TEXT,
                nombre TEXT NOT NULL,
                telefono TEXT,
                direccion TEXT NOT NULL,
                observaciones TEXT,
                fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (hermano_id) REFERENCES hermanos (id),
                FOREIGN KEY (hermano_responsable_id) REFERENCES hermanos (id)
            )
        """)
        
        # Tabla de pr√©stamos
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS prestamos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                fecha_prestamo DATE NOT NULL,
                elemento_id INTEGER NOT NULL,
                beneficiario_id INTEGER NOT NULL,
                hermano_solicitante_id INTEGER NOT NULL,
                duracion_dias INTEGER NOT NULL,
                fecha_devolucion_estimada DATE NOT NULL,
                fecha_devolucion_real DATE,
                estado TEXT DEFAULT 'activo' CHECK (estado IN ('activo', 'devuelto', 'vencido')),
                observaciones_prestamo TEXT,
                observaciones_devolucion TEXT,
                autorizado_por TEXT,
                entregado_por TEXT NOT NULL,
                recibido_por TEXT,
                deposito_devolucion_id INTEGER,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (elemento_id) REFERENCES elementos (id),
                FOREIGN KEY (beneficiario_id) REFERENCES beneficiarios (id),
                FOREIGN KEY (hermano_solicitante_id) REFERENCES hermanos (id),
                FOREIGN KEY (deposito_devolucion_id) REFERENCES depositos (id)
            )
        """)
        
        # Tabla de historial de cambios de estado
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS historial_estados (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                elemento_id INTEGER NOT NULL,
                estado_anterior TEXT,
                estado_nuevo TEXT NOT NULL,
                razon TEXT,
                observaciones TEXT,
                responsable TEXT,
                fecha_cambio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (elemento_id) REFERENCES elementos (id)
            )
        """)
        
        # Insertar datos b√°sicos si no existen
        self.insertar_datos_basicos(cursor)
        
        conn.commit()
        conn.close()
    
    def insertar_datos_basicos(self, cursor):
        """Inserta categor√≠as y datos b√°sicos"""
        categorias_basicas = [
            ("Sillas de Ruedas", "Sillas de ruedas manuales y el√©ctricas"),
            ("Bastones", "Bastones simples y ortop√©dicos"),
            ("Muletas", "Muletas axilares y de antebrazo"),
            ("Andadores", "Andadores con y sin ruedas"),
            ("Camas Ortop√©dicas", "Camas articuladas y colchones"),
            ("Equipos de Rehabilitaci√≥n", "Equipos diversos de rehabilitaci√≥n"),
            ("Otros", "Elementos diversos no categorizados")
        ]
        
        for categoria, descripcion in categorias_basicas:
            cursor.execute("INSERT OR IGNORE INTO categorias (nombre, descripcion) VALUES (?, ?)", 
                         (categoria, descripcion))
        
        # Dep√≥sito por defecto
        cursor.execute("INSERT OR IGNORE INTO depositos (nombre, direccion) VALUES (?, ?)", 
                      ("Dep√≥sito Principal", "Direcci√≥n no especificada"))

# Inicializar la base de datos
db = DatabaseManager()

def authenticate():
    """Sistema de autenticaci√≥n b√°sico"""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    
    if not st.session_state.authenticated:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.title("üèõÔ∏è BEO")
            st.subheader("Banco de Elementos Ortop√©dicos")
            st.markdown("---")
        
        st.subheader("üîê Iniciar Sesi√≥n")
        
        with st.form("login_form"):
            username = st.text_input("Usuario")
            password = st.text_input("Contrase√±a", type="password")
            submit = st.form_submit_button("Ingresar al Sistema")
            
            if submit:
                if username == "beo_admin" and password == "beo2025":
                    st.session_state.authenticated = True
                    st.rerun()
                else:
                    st.error("Credenciales incorrectas")
        
        st.info("üë§ Usuario: beo_admin | üîë Contrase√±a: beo2025")
        st.markdown("---")
        st.caption("Sistema de Gesti√≥n del Banco de Elementos Ortop√©dicos")
        return False
    
    return True

def mostrar_manual_usuario():
    """Manual de usuario completo del sistema BEO"""
    st.header("üìö Manual de Usuario - Sistema BEO")
    st.markdown("**Gu√≠a completa para usar el Banco de Elementos Ortop√©dicos**")
    
    # √çndice de contenidos en el sidebar
    st.sidebar.markdown("### üìã √çndice del Manual")
    seccion = st.sidebar.radio(
        "Seleccionar Secci√≥n:",
        [
            "üè† Introducci√≥n",
            "üèõÔ∏è Gesti√≥n de Logias", 
            "üë®‚Äçü§ù‚Äçüë® Gesti√≥n de Hermanos",
            "ü¶Ω Gesti√≥n de Elementos",
            "üìã Sistema de Pr√©stamos",
            "üîÑ Devoluci√≥n de Elementos",
            "üîß Cambio de Estados",
            "üìä Dashboard y Reportes",
            "‚ùì Preguntas Frecuentes"
        ]
    )
    
    if seccion == "üè† Introducci√≥n":
        st.markdown("""
        ## üè† Introducci√≥n al Sistema BEO
        
        ### ¬øQu√© es el Sistema BEO?
        El **Banco de Elementos Ortop√©dicos (BEO)** es un sistema digital dise√±ado espec√≠ficamente para organizaciones mas√≥nicas filantr√≥picas que administran pr√©stamos de elementos ortop√©dicos a hermanos y sus familias.
        
        ### üéØ Objetivos del Sistema
        - **Organizar** el inventario de elementos ortop√©dicos
        - **Controlar** los pr√©stamos y devoluciones
        - **Facilitar** la b√∫squeda y seguimiento de elementos
        - **Generar** reportes y estad√≠sticas
        - **Mantener** un registro hist√≥rico completo
        
        ### üèõÔ∏è Estructura Mas√≥nica
        El sistema est√° dise√±ado considerando la estructura mas√≥nica:
        - **Logias** con sus Venerables Maestros y Hospitalarios
        - **Hermanos** con sus grados mas√≥nicos
        - **Beneficiarios** (hermanos y familiares)
        - **Seguimiento** por logia y hermano responsable
        
        ### üîê Credenciales de Acceso
        - **Usuario:** `beo_admin`
        - **Contrase√±a:** `beo2025`
        
        ### üì± Navegaci√≥n Principal
        El sistema se organiza en las siguientes secciones:
        1. **Dashboard** - Vista general y estad√≠sticas
        2. **Gesti√≥n de Logias** - Administrar logias mas√≥nicas
        3. **Gesti√≥n de Hermanos** - Registro de hermanos
        4. **Gesti√≥n de Elementos** - Inventario ortop√©dico
        5. **Formulario de Pr√©stamo** - Gesti√≥n completa de pr√©stamos
        6. **Gesti√≥n de Dep√≥sitos** - Ubicaciones de almacenamiento
        7. **Manual de Usuario** - Esta gu√≠a
        """)
    
    elif seccion == "üèõÔ∏è Gesti√≥n de Logias":
        st.markdown("""
        ## üèõÔ∏è Gesti√≥n de Logias
        
        ### ¬øPara qu√© sirve?
        Registrar y administrar las logias mas√≥nicas que participan en el programa BEO.
        
        ### üìù C√≥mo Registrar una Nueva Logia
        
        1. **Ir a:** Men√∫ Principal ‚Üí Gesti√≥n de Logias
        2. **Completar los campos:**
           - **Nombre de la Logia*** (obligatorio)
           - **N√∫mero** de la logia
           - **Oriente** (ciudad/ubicaci√≥n)
           - **Venerable Maestro** y su tel√©fono
           - **Hospitalario** y su tel√©fono
           - **Direcci√≥n** de la logia
        
        3. **Hacer clic en:** "Guardar Logia"
        
        ### üìã Informaci√≥n Importante
        - El **Hospitalario** es clave para la gesti√≥n del BEO
        - Los **tel√©fonos** son importantes para coordinaci√≥n
        - El **nombre** debe ser √∫nico en el sistema
        
        ### üí° Consejos
        - Registrar primero las logias antes que los hermanos
        - Mantener actualizada la informaci√≥n de contacto
        - El Hospitalario suele ser el responsable del BEO en cada logia
        """)
    
    elif seccion == "üë®‚Äçü§ù‚Äçüë® Gesti√≥n de Hermanos":
        st.markdown("""
        ## üë®‚Äçü§ù‚Äçüë® Gesti√≥n de Hermanos
        
        ### ¬øPara qu√© sirve?
        Registrar hermanos masones que pueden solicitar pr√©stamos del BEO.
        
        ### üìù C√≥mo Registrar un Nuevo Hermano
        
        1. **Ir a:** Men√∫ Principal ‚Üí Gesti√≥n de Hermanos ‚Üí "Nuevo Hermano"
        2. **Completar informaci√≥n b√°sica:**
           - **Nombre Completo*** (obligatorio)
           - **Tel√©fono**
           - **Logia*** (seleccionar de la lista)
           - **Grado mas√≥nico** (Apr:., Comp:., M:.M:., etc.)
        
        3. **Completar informaci√≥n adicional:**
           - **Direcci√≥n**
           - **Email**
           - **Fecha de Iniciaci√≥n**
           - **Observaciones**
        
        4. **Hacer clic en:** "‚úÖ Guardar Hermano"
        
        ### üé≠ Grados Mas√≥nicos Disponibles
        - **Apr:.** - Aprendiz
        - **Comp:.** - Compa√±ero  
        - **M:.M:.** - Maestro Mas√≥n
        - **Gr:. 4¬∞** al **Gr:. 33¬∞** - Grados superiores
        - **Otro** - Para grados especiales
        
        ### üìä Ver Lista de Hermanos
        - **Ir a:** Gesti√≥n de Hermanos ‚Üí "Lista de Hermanos"
        - Ver todos los hermanos activos registrados
        - Informaci√≥n incluye: nombre, tel√©fono, grado, logia
        
        ### üìö Historial por Hermano
        - **Ir a:** Gesti√≥n de Hermanos ‚Üí "üìö Historial por Hermano"
        - Ver todos los pr√©stamos de cada hermano
        - Estad√≠sticas de cumplimiento individual
        
        ### üí° Consejos
        - Asegurarse de que la logia est√© registrada primero
        - El tel√©fono es importante para contactar al hermano
        - Los hermanos inactivos no aparecen en listas de pr√©stamos
        """)
    
    elif seccion == "ü¶Ω Gesti√≥n de Elementos":
        st.markdown("""
        ## ü¶Ω Gesti√≥n de Elementos Ortop√©dicos
        
        ### ¬øPara qu√© sirve?
        Administrar el inventario completo de elementos ortop√©dicos del BEO.
        
        ### üìù C√≥mo Registrar un Nuevo Elemento
        
        1. **Ir a:** Men√∫ Principal ‚Üí Gesti√≥n de Elementos ‚Üí "Nuevo Elemento"
        2. **Informaci√≥n b√°sica:**
           - **C√≥digo del Elemento*** (√∫nico, ej: SR-001)
           - **Nombre del Elemento*** (ej: Silla de Ruedas Manual)
           - **Categor√≠a*** (seleccionar de la lista)
           - **Dep√≥sito*** (donde se almacena)
        
        3. **Informaci√≥n detallada:**
           - **Descripci√≥n** (caracter√≠sticas espec√≠ficas)
           - **Marca** y **Modelo**
           - **N√∫mero de Serie**
           - **Fecha de Ingreso**
           - **Observaciones**
        
        4. **Hacer clic en:** "ü¶Ω Guardar Elemento"
        
        ### üì¶ Categor√≠as de Elementos
        - **Sillas de Ruedas** - Manuales y el√©ctricas
        - **Bastones** - Simples y ortop√©dicos
        - **Muletas** - Axilares y de antebrazo
        - **Andadores** - Con y sin ruedas
        - **Camas Ortop√©dicas** - Articuladas y colchones
        - **Equipos de Rehabilitaci√≥n** - Diversos equipos
        - **Otros** - Elementos no categorizados
        
        ### üìä Ver Inventario
        - **Ir a:** Gesti√≥n de Elementos ‚Üí "Inventario"
        - **Filtrar por:** Categor√≠a, Dep√≥sito, Estado
        - **Estados posibles:** Disponible, Prestado, Mantenimiento
        
        ### üìö Historial por Elemento
        - **Ir a:** Gesti√≥n de Elementos ‚Üí "üìö Historial por Elemento"
        - Ver por qu√© manos pas√≥ cada elemento
        - Estad√≠sticas de uso y frecuencia
        
        ### üîß Cambiar Estado de Elementos
        - **Ir a:** Gesti√≥n de Elementos ‚Üí "üîß Cambiar Estado"
        - **Buscar** el elemento por c√≥digo o nombre
        - **Hacer clic** en "üîÑ Cambiar Estado"
        - **Seleccionar** nuevo estado y raz√≥n del cambio
        - **Confirmar** el cambio
        
        ### üí° Consejos para C√≥digos
        - Usar formato consistente: **SR-001** (Silla Ruedas)
        - **BA-001** (Bast√≥n), **MU-001** (Muletas)
        - **AN-001** (Andador), **CA-001** (Cama)
        - Los c√≥digos deben ser √∫nicos en todo el sistema
        """)
    
    elif seccion == "üìã Sistema de Pr√©stamos":
        st.markdown("""
        ## üìã Sistema de Pr√©stamos
        
        ### ¬øPara qu√© sirve?
        Gestionar el ciclo completo de pr√©stamos de elementos ortop√©dicos seg√∫n el formulario oficial BEO.
        
        ### üìù C√≥mo Registrar un Nuevo Pr√©stamo
        
        1. **Ir a:** Men√∫ Principal ‚Üí Formulario de Pr√©stamo ‚Üí "Nuevo Pr√©stamo"
        
        2. **Informaci√≥n General:**
           - **Fecha** del pr√©stamo
           - **Duraci√≥n:** Especificar en d√≠as o meses
           - El sistema calcula autom√°ticamente la fecha de devoluci√≥n
        
        3. **Hermano Solicitante:**
           - **Seleccionar** hermano de la lista
           - Se muestra autom√°ticamente: logia, grado, hospitalario, venerable
        
        4. **Beneficiario del Pr√©stamo:**
           - **Tipo:** Hermano o Familiar
           - **Si es Hermano:** Seleccionar de la lista
           - **Si es Familiar:** 
             - Especificar parentesco (Madre, Padre, Esposa/o, etc.)
             - Indicar de qu√© hermano es familiar
             - Completar nombre y tel√©fono
        
        5. **Informaci√≥n del Elemento:**
           - **Direcci√≥n de entrega**
           - **Elemento a prestar** (solo aparecen disponibles)
           - **Observaciones del pr√©stamo**
           - **Autorizado por**
           - **Entregado por**
        
        6. **Hacer clic en:** "üìã Registrar Pr√©stamo BEO"
        
        ### üìä Monitorear Pr√©stamos Activos
        - **Ir a:** Formulario de Pr√©stamo ‚Üí "Pr√©stamos Activos"
        - **Estados visuales:**
          - üü¢ **Vigente** - Dentro del plazo
          - üü° **Por Vencer** - Pr√≥ximo a vencer (7 d√≠as)
          - üî¥ **Vencido** - Pasado la fecha l√≠mite
        
        ### üí° Consejos
        - Verificar que el elemento est√© "disponible"
        - La duraci√≥n t√≠pica es 90 d√≠as o 3 meses
        - Completar siempre las observaciones importantes
        - El hermano solicitante puede ser diferente al beneficiario
        """)
    
    elif seccion == "üîÑ Devoluci√≥n de Elementos":
        st.markdown("""
        ## üîÑ Devoluci√≥n de Elementos
        
        ### ¬øPara qu√© sirve?
        Registrar la devoluci√≥n de elementos prestados de manera completa y organizada.
        
        ### üìù C√≥mo Registrar una Devoluci√≥n
        
        1. **Ir a:** Formulario de Pr√©stamo ‚Üí "üîÑ Devoluci√≥n"
        
        2. **Encontrar el Elemento:**
           - **Filtrar por estado:** Todos, Vigente, Por vencer, Vencido
           - **Buscar por c√≥digo:** Ej: SR-001
           - **Buscar por beneficiario:** Nombre de quien tiene el elemento
        
        3. **Iniciar Devoluci√≥n:**
           - **Hacer clic** en "üîÑ DEVOLVER AHORA"
           - Se abre el formulario completo de devoluci√≥n
        
        4. **Completar Informaci√≥n de Devoluci√≥n:**
           - **Fecha de Devoluci√≥n**
           - **Recibido por** (quien recibe el elemento)
           - **Dep√≥sito de Devoluci√≥n** (a d√≥nde va el elemento)
           - **Estado del Elemento:**
             - Bueno
             - Regular  
             - Necesita Mantenimiento
             - Da√±ado
           - **Observaciones** detalladas
        
        5. **Confirmar Devoluci√≥n:**
           - **Revisar** la informaci√≥n mostrada
           - **Hacer clic** en "‚úÖ CONFIRMAR DEVOLUCI√ìN"
        
        ### üè¢ Selecci√≥n de Dep√≥sito
        - Puedes elegir a qu√© dep√≥sito devolver cada elemento
        - No necesariamente debe ser el dep√≥sito original
        - √ötil para redistribuir elementos seg√∫n necesidades
        
        ### ‚è∞ Devoluciones Anticipadas
        - **S√ç puedes devolver** antes de la fecha l√≠mite
        - No hay restricciones de tiempo
        - √ötil para elementos que ya no se necesitan
        
        ### üìö Historial de Devoluciones
        - **Ir a:** Formulario de Pr√©stamo ‚Üí "Historial"
        - **Ver todas** las devoluciones realizadas
        - **Filtrar por fechas** y cumplimiento
        - **Estad√≠sticas** de cumplimiento (a tiempo, con retraso, anticipadas)
        
        ### üí° Consejos
        - Describir bien el estado del elemento al devolverlo
        - Si hay da√±os, usar estado "Necesita Mantenimiento"
        - Las devoluciones anticipadas son v√°lidas y recomendadas
        - El historial ayuda a evaluar el cumplimiento por logia
        """)
    
    elif seccion == "üîß Cambio de Estados":
        st.markdown("""
        ## üîß Cambio Manual de Estados
        
        ### ¬øPara qu√© sirve?
        Cambiar manualmente el estado de elementos para correcciones, mantenimiento o casos especiales.
        
        ### üìù C√≥mo Cambiar el Estado de un Elemento
        
        1. **Ir a:** Gesti√≥n de Elementos ‚Üí "üîß Cambiar Estado"
        
        2. **Encontrar el Elemento:**
           - **Buscar por c√≥digo:** Ej: SR-001
           - **Buscar por nombre:** Ej: Silla de ruedas
        
        3. **Iniciar Cambio:**
           - **Hacer clic** en "üîÑ Cambiar Estado"
           - Se muestra advertencia si est√° prestado
        
        4. **Completar Cambio:**
           - **Nuevo Estado:**
             - ‚úÖ **Disponible** - Puede ser prestado
             - üìã **Prestado** - Marcado como prestado
             - üîß **Mantenimiento** - Necesita reparaci√≥n
           - **Raz√≥n del Cambio:**
             - Correcci√≥n administrativa
             - Devoluci√≥n no registrada
             - Elemento perdido/da√±ado
             - Mantenimiento preventivo
             - Error en registro anterior
             - Otro (personalizable)
           - **Observaciones** detalladas
           - **Responsable** que autoriza el cambio
        
        5. **Confirmar Cambio:**
           - **Revisar** el resumen del cambio
           - **Hacer clic** en "‚úÖ CONFIRMAR CAMBIO"
        
        ### ‚ö†Ô∏è Casos Especiales
        
        #### Elementos Prestados
        - **Advertencia autom√°tica** si tiene pr√©stamo activo
        - **Cierre autom√°tico** del pr√©stamo al cambiar estado
        - **Recomendaci√≥n** de usar devoluci√≥n formal cuando sea apropiado
        
        #### Registro de Cambios
        - **Historial autom√°tico** en base de datos
        - **Fecha y hora** del cambio
        - **Responsable** que autoriz√≥
        - **Raz√≥n detallada** del cambio
        
        ### üí° Consejos
        - Usar esta funci√≥n solo para casos especiales
        - Para devoluciones normales, usar "üîÑ Devoluci√≥n"
        - Siempre especificar la raz√≥n del cambio
        - El historial queda registrado permanentemente
        """)
    
    elif seccion == "üìä Dashboard y Reportes":
        st.markdown("""
        ## üìä Dashboard y Reportes
        
        ### ¬øPara qu√© sirve?
        Obtener una vista general del estado del BEO con estad√≠sticas y gr√°ficos.
        
        ### üìà M√©tricas Principales
        - **ü¶Ω Total Elementos** - Inventario completo
        - **‚úÖ Disponibles** - Elementos listos para pr√©stamo  
        - **üìã Pr√©stamos Activos** - Elementos actualmente prestados
        - **üë®‚Äçü§ù‚Äçüë® Hermanos Activos** - Hermanos registrados
        
        ### üìä Gr√°ficos Disponibles
        
        #### Elementos por Categor√≠a
        - **Gr√°fico de pastel** mostrando distribuci√≥n del inventario
        - √ötil para ver qu√© tipo de elementos son m√°s comunes
        
        #### Estado de Elementos
        - **Gr√°fico de barras** con estados actuales
        - Colores: Verde (disponible), Naranja (prestado), Rojo (mantenimiento)
        
        #### Pr√©stamos por Logia
        - **Gr√°fico de barras** mostrando pr√©stamos activos por logia
        - Identifica qu√© logias usan m√°s el BEO
        
        ### üö® Alertas de Vencimiento
        - **Lista autom√°tica** de pr√©stamos pr√≥ximos a vencer o vencidos
        - **Informaci√≥n de contacto** para realizar seguimiento
        - **Estado de alerta** claramente identificado
        
        ### üìç Ubicaciones Actuales
        - **D√≥nde est√° cada elemento** prestado
        - **Direcciones completas** de beneficiarios
        - **Informaci√≥n de contacto** para seguimiento
        
        ### üìã Informaci√≥n Mostrada en Alertas
        - **C√≥digo y nombre** del elemento
        - **Beneficiario** y tel√©fono de contacto
        - **Hermano solicitante** y su logia
        - **Fecha de devoluci√≥n estimada**
        - **Estado de alerta** (Por vencer / Vencido)
        
        ### üí° Uso del Dashboard
        - **Revisar diariamente** las alertas de vencimiento
        - **Monitorear** el uso por logia para planificaci√≥n
        - **Identificar** necesidades de m√°s elementos en ciertas categor√≠as
        - **Evaluar** la efectividad del programa BEO
        """)
    
    elif seccion == "‚ùì Preguntas Frecuentes":
        st.markdown("""
        ## ‚ùì Preguntas Frecuentes
        
        ### üîê Acceso y Seguridad
        
        **P: ¬øCu√°les son las credenciales de acceso?**
        R: Usuario: `beo_admin`, Contrase√±a: `beo2025`
        
        **P: ¬øSe pueden cambiar las credenciales?**
        R: S√≠, contactar al administrador del sistema para modificarlas.
        
        **P: ¬øEl sistema guarda autom√°ticamente?**
        R: S√≠, todos los cambios se guardan autom√°ticamente al confirmar.
        
        ### üìã Gesti√≥n de Pr√©stamos
        
        **P: ¬øPuede un hermano solicitar para un familiar?**
        R: S√≠, al crear el pr√©stamo selecciona "Familiar" y especifica el parentesco.
        
        **P: ¬øPuedo devolver un elemento antes de la fecha l√≠mite?**
        R: S√≠, puedes devolver elementos en cualquier momento desde "üîÑ Devoluci√≥n".
        
        **P: ¬øQu√© pasa si no devuelven a tiempo?**
        R: El sistema marca como "VENCIDO" y aparece en alertas del Dashboard.
        
        **P: ¬øPuedo cambiar la duraci√≥n de un pr√©stamo ya registrado?**
        R: No directamente, pero puedes registrar la devoluci√≥n y crear un nuevo pr√©stamo.
        
        ### ü¶Ω Gesti√≥n de Elementos
        
        **P: ¬øC√≥mo marco un elemento como da√±ado?**
        R: Ve a "üîß Cambiar Estado" y cambia a "Mantenimiento".
        
        **P: ¬øPuedo mover un elemento a otro dep√≥sito?**
        R: S√≠, durante la devoluci√≥n puedes elegir el dep√≥sito de destino.
        
        **P: ¬øQu√© pasa si registro un c√≥digo duplicado?**
        R: El sistema mostrar√° error. Cada c√≥digo debe ser √∫nico.
        
        ### üìä Reportes y Seguimiento
        
        **P: ¬øC√≥mo veo qu√© logia usa m√°s el BEO?**
        R: En el Dashboard, revisa el gr√°fico "Pr√©stamos por Logia".
        
        **P: ¬øPuedo ver el historial de un elemento espec√≠fico?**
        R: S√≠, ve a Gesti√≥n de Elementos ‚Üí "üìö Historial por Elemento".
        
        **P: ¬øPuedo ver el historial de un hermano espec√≠fico?**
        R: S√≠, ve a Gesti√≥n de Hermanos ‚Üí "üìö Historial por Hermano".
        
        ### üîß Problemas T√©cnicos
        
        **P: ¬øQu√© hago si el sistema no carga?**
        R: Verificar conexi√≥n a internet y recargar la p√°gina.
        
        **P: ¬øLos datos se pierden al cerrar la aplicaci√≥n?**
        R: No, todos los datos se guardan en la base de datos permanentemente.
        
        **P: ¬øPuedo usar el sistema desde el celular?**
        R: S√≠, el sistema es responsive y funciona en dispositivos m√≥viles.
        
        ### üèõÔ∏è Aspectos Mas√≥nicos
        
        **P: ¬øEs obligatorio registrar la logia primero?**
        R: S√≠, debes registrar la logia antes de registrar hermanos.
        
        **P: ¬øQu√© informaci√≥n de la logia es m√°s importante?**
        R: El Hospitalario y su tel√©fono, ya que suele gestionar el BEO.
        
        **P: ¬øPuedo registrar hermanos de logias no mas√≥nicas?**
        R: El sistema est√° dise√±ado para logias mas√≥nicas, pero se puede adaptar.
        
        ### üìû Soporte
        
        **P: ¬øA qui√©n contacto para soporte t√©cnico?**
        R: Contactar al administrador del sistema o al responsable t√©cnico del BEO.
        
        **P: ¬øSe pueden agregar nuevas funcionalidades?**
        R: S√≠, el sistema puede expandirse seg√∫n las necesidades de la organizaci√≥n.
        
        **P: ¬øHay backup de los datos?**
        R: El archivo de base de datos (.db) se puede respaldar regularmente.
        """)

def gestionar_logias():
    """Gesti√≥n de logias"""
    st.header("üèõÔ∏è Gesti√≥n de Logias")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("Nueva Logia")
        with st.form("logia_form"):
            nombre = st.text_input("Nombre de la Logia*")
            numero = st.number_input("N√∫mero", min_value=1, step=1, value=None)
            oriente = st.text_input("Oriente")
            venerable_maestro = st.text_input("Venerable Maestro")
            telefono_venerable = st.text_input("Tel√©fono del Venerable")
            hospitalario = st.text_input("Hospitalario")
            telefono_hospitalario = st.text_input("Tel√©fono del Hospitalario")
            direccion = st.text_area("Direcci√≥n")
            
            if st.form_submit_button("Guardar Logia"):
                if nombre:
                    try:
                        conn = db.get_connection()
                        cursor = conn.cursor()
                        cursor.execute("""
                            INSERT INTO logias (nombre, numero, oriente, venerable_maestro, telefono_venerable,
                                              hospitalario, telefono_hospitalario, direccion)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                        """, (nombre, numero, oriente, venerable_maestro, telefono_venerable,
                             hospitalario, telefono_hospitalario, direccion))
                        conn.commit()
                        conn.close()
                        st.success("Logia guardada exitosamente")
                        st.rerun()
                    except sqlite3.IntegrityError:
                        st.error("Ya existe una logia con ese nombre")
                    except Exception as e:
                        st.error(f"Error al guardar logia: {e}")
                else:
                    st.error("El nombre de la logia es obligatorio")
    
    with col2:
        st.subheader("Logias Registradas")
        try:
            conn = db.get_connection()
            logias_df = pd.read_sql_query("""
                SELECT nombre, numero, oriente, venerable_maestro, hospitalario
                FROM logias 
                WHERE activo = 1
                ORDER BY numero, nombre
            """, conn)
            conn.close()
            
            if not logias_df.empty:
                st.dataframe(logias_df, use_container_width=True)
            else:
                st.info("No hay logias registradas")
        except Exception as e:
            st.error(f"Error al cargar logias: {e}")

def gestionar_hermanos():
    """Gesti√≥n de hermanos"""
    st.header("üë®‚Äçü§ù‚Äçüë® Gesti√≥n de Hermanos")
    
    tab1, tab2, tab3 = st.tabs(["Nuevo Hermano", "Lista de Hermanos", "üìö Historial por Hermano"])
    
    with tab1:
        try:
            conn = db.get_connection()
            logias_df = pd.read_sql_query("SELECT id, nombre, numero FROM logias WHERE activo = 1 ORDER BY numero, nombre", conn)
            conn.close()
            
            with st.form("hermano_form_completo"):
                col1, col2 = st.columns(2)
                
                with col1:
                    nombre = st.text_input("Nombre Completo*")
                    telefono = st.text_input("Tel√©fono")
                    
                    if not logias_df.empty:
                        logia_id = st.selectbox(
                            "Logia*",
                            options=logias_df['id'].tolist(),
                            format_func=lambda x: f"{logias_df[logias_df['id'] == x]['nombre'].iloc[0]} N¬∞{logias_df[logias_df['id'] == x]['numero'].iloc[0] if pd.notna(logias_df[logias_df['id'] == x]['numero'].iloc[0]) else 'S/N'}"
                        )
                    else:
                        st.error("No hay logias disponibles")
                        logia_id = None
                
                with col2:
                    grado = st.selectbox(
                        "Grado",
                        options=["Apr:.", "Comp:.", "M:.M:.", "Gr:. 4¬∞", "Gr:. 18¬∞", "Gr:. 30¬∞", "Gr:. 32¬∞", "Gr:. 33¬∞", "Otro"]
                    )
                    direccion = st.text_area("Direcci√≥n")
                    email = st.text_input("Email")
                    fecha_iniciacion = st.date_input(
                        "Fecha de Iniciaci√≥n", 
                        value=None,
                        min_value=date(1960, 1, 1),
                        max_value=date.today(),
                        help="Fecha de iniciaci√≥n mas√≥nica (desde 1960)"
                    )
                    observaciones = st.text_area("Observaciones")
                
                submitted = st.form_submit_button("‚úÖ Guardar Hermano", use_container_width=True)
                
                if submitted:
                    if nombre and logia_id:
                        try:
                            conn = db.get_connection()
                            cursor = conn.cursor()
                            cursor.execute("""
                                INSERT INTO hermanos (nombre, telefono, logia_id, grado, direccion, 
                                                    email, fecha_iniciacion, observaciones)
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                            """, (nombre, telefono, logia_id, grado, direccion, 
                                 email, fecha_iniciacion, observaciones))
                            conn.commit()
                            conn.close()
                            st.success("‚úÖ Hermano guardado exitosamente")
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå Error al guardar hermano: {e}")
                    else:
                        st.error("‚ùå Nombre y logia son obligatorios")
        except Exception as e:
            st.error(f"Error al cargar datos: {e}")
    
    with tab2:
        st.subheader("Lista de Hermanos")
        
        try:
            conn = db.get_connection()
            hermanos_df = pd.read_sql_query("""
                SELECT h.id, h.nombre, h.telefono, h.grado, l.nombre as logia, h.activo
                FROM hermanos h
                LEFT JOIN logias l ON h.logia_id = l.id
                WHERE h.activo = 1
                ORDER BY h.nombre
            """, conn)
            conn.close()
            
            if not hermanos_df.empty:
                st.dataframe(hermanos_df, use_container_width=True)
            else:
                st.info("No hay hermanos registrados")
        except Exception as e:
            st.error(f"Error al cargar hermanos: {e}")
    
    with tab3:
        st.subheader("üìö Historial de Pr√©stamos por Hermano")
        st.markdown("**Ver todos los pr√©stamos hist√≥ricos de un hermano espec√≠fico**")
        
        try:
            conn = db.get_connection()
            hermanos_df = pd.read_sql_query("""
                SELECT h.id, h.nombre, l.nombre as logia
                FROM hermanos h
                LEFT JOIN logias l ON h.logia_id = l.id
                WHERE h.activo = 1
                ORDER BY h.nombre
            """, conn)
            
            if not hermanos_df.empty:
                hermano_id = st.selectbox(
                    "Seleccionar Hermano:",
                    options=hermanos_df['id'].tolist(),
                    format_func=lambda x: f"{hermanos_df[hermanos_df['id'] == x]['nombre'].iloc[0]} - {hermanos_df[hermanos_df['id'] == x]['logia'].iloc[0]}"
                )
                
                # Obtener historial completo del hermano
                historial_hermano = pd.read_sql_query("""
                    SELECT 
                        p.id,
                        e.codigo as codigo_elemento,
                        e.nombre as elemento,
                        b.nombre as beneficiario,
                        b.tipo as tipo_beneficiario,
                        p.fecha_prestamo,
                        p.fecha_devolucion_estimada,
                        p.fecha_devolucion_real,
                        p.estado,
                        CASE 
                            WHEN p.fecha_devolucion_real IS NULL AND DATE('now') > p.fecha_devolucion_estimada THEN 'VENCIDO'
                            WHEN p.fecha_devolucion_real IS NULL THEN 'ACTIVO'
                            WHEN p.fecha_devolucion_real <= p.fecha_devolucion_estimada THEN 'DEVUELTO A TIEMPO'
                            ELSE 'DEVUELTO CON RETRASO'
                        END as estado_cumplimiento,
                        CASE 
                            WHEN p.fecha_devolucion_real IS NOT NULL 
                            THEN CAST((JULIANDAY(p.fecha_devolucion_real) - JULIANDAY(p.fecha_devolucion_estimada)) AS INTEGER)
                            ELSE NULL
                        END as dias_diferencia,
                        p.observaciones_prestamo,
                        p.observaciones_devolucion
                    FROM prestamos p
                    JOIN elementos e ON p.elemento_id = e.id
                    JOIN beneficiarios b ON p.beneficiario_id = b.id
                    WHERE p.hermano_solicitante_id = ?
                    ORDER BY p.fecha_prestamo DESC
                """, conn, params=[hermano_id])
                
                if not historial_hermano.empty:
                    st.markdown(f"#### üìä Resumen de {hermanos_df[hermanos_df['id'] == hermano_id]['nombre'].iloc[0]}")
                    
                    # Estad√≠sticas del hermano
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        total_prestamos = len(historial_hermano)
                        st.metric("Total Pr√©stamos", total_prestamos)
                    with col2:
                        activos = len(historial_hermano[historial_hermano['estado'] == 'activo'])
                        st.metric("Activos", activos)
                    with col3:
                        a_tiempo = len(historial_hermano[historial_hermano['estado_cumplimiento'] == 'DEVUELTO A TIEMPO'])
                        st.metric("Devueltos a Tiempo", a_tiempo)
                    with col4:
                        vencidos = len(historial_hermano[historial_hermano['estado_cumplimiento'].isin(['VENCIDO', 'DEVUELTO CON RETRASO'])])
                        st.metric("Vencidos/Retraso", vencidos)
                    
                    # Tabla detallada
                    st.markdown("#### üìã Historial Detallado")
                    st.dataframe(historial_hermano, use_container_width=True)
                    
                    # Gr√°fico de cumplimiento
                    cumplimiento_counts = historial_hermano['estado_cumplimiento'].value_counts()
                    if len(cumplimiento_counts) > 0:
                        fig = px.pie(
                            values=cumplimiento_counts.values, 
                            names=cumplimiento_counts.index,
                            title="Distribuci√≥n de Cumplimiento"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                
                else:
                    st.info("Este hermano no tiene pr√©stamos registrados")
            
            else:
                st.warning("No hay hermanos registrados")
            
            conn.close()
        except Exception as e:
            st.error(f"Error al cargar historial: {e}")

def gestionar_elementos():
    """Gesti√≥n de elementos ortop√©dicos"""
    st.header("ü¶Ω Gesti√≥n de Elementos Ortop√©dicos")
    
    tab1, tab2, tab3, tab4 = st.tabs(["Nuevo Elemento", "Inventario", "üîß Cambiar Estado", "üìö Historial por Elemento"])
    
    with tab1:
        try:
            conn = db.get_connection()
            depositos_df = pd.read_sql_query("SELECT id, nombre FROM depositos WHERE activo = 1", conn)
            categorias_df = pd.read_sql_query("SELECT id, nombre FROM categorias WHERE activo = 1", conn)
            conn.close()
            
            with st.form("elemento_form_completo"):
                col1, col2 = st.columns(2)
                
                with col1:
                    codigo = st.text_input("C√≥digo del Elemento*")
                    nombre = st.text_input("Nombre del Elemento*")
                    
                    if not categorias_df.empty:
                        categoria_id = st.selectbox(
                            "Categor√≠a*",
                            options=categorias_df['id'].tolist(),
                            format_func=lambda x: categorias_df[categorias_df['id'] == x]['nombre'].iloc[0]
                        )
                    else:
                        st.error("No hay categor√≠as disponibles")
                        categoria_id = None
                    
                    if not depositos_df.empty:
                        deposito_id = st.selectbox(
                            "Dep√≥sito*",
                            options=depositos_df['id'].tolist(),
                            format_func=lambda x: depositos_df[depositos_df['id'] == x]['nombre'].iloc[0]
                        )
                    else:
                        st.error("No hay dep√≥sitos disponibles")
                        deposito_id = None
                
                with col2:
                    descripcion = st.text_area("Descripci√≥n")
                    marca = st.text_input("Marca")
                    modelo = st.text_input("Modelo")
                    numero_serie = st.text_input("N√∫mero de Serie")
                    fecha_ingreso = st.date_input("Fecha de Ingreso", value=date.today())
                    observaciones = st.text_area("Observaciones")
                
                submitted = st.form_submit_button("ü¶Ω Guardar Elemento", use_container_width=True)
                
                if submitted:
                    if codigo and nombre and categoria_id and deposito_id:
                        try:
                            conn = db.get_connection()
                            cursor = conn.cursor()
                            cursor.execute("""
                                INSERT INTO elementos 
                                (codigo, nombre, categoria_id, deposito_id, descripcion, marca, 
                                 modelo, numero_serie, fecha_ingreso, observaciones)
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                            """, (codigo, nombre, categoria_id, deposito_id, descripcion, 
                                 marca, modelo, numero_serie, fecha_ingreso, observaciones))
                            
                            elemento_id = cursor.lastrowid
                            
                            # Registrar en historial de estados
                            cursor.execute("""
                                INSERT INTO historial_estados 
                                (elemento_id, estado_anterior, estado_nuevo, razon, responsable)
                                VALUES (?, ?, ?, ?, ?)
                            """, (elemento_id, None, 'disponible', 'Ingreso inicial', 'Sistema'))
                            
                            conn.commit()
                            conn.close()
                            st.success("‚úÖ Elemento guardado exitosamente")
                            st.rerun()
                        except sqlite3.IntegrityError:
                            st.error("‚ùå Ya existe un elemento con ese c√≥digo")
                        except Exception as e:
                            st.error(f"‚ùå Error al guardar elemento: {e}")
                    else:
                        st.error("‚ùå Todos los campos marcados con * son obligatorios")
        except Exception as e:
            st.error(f"Error al cargar datos: {e}")
    
    with tab2:
        st.subheader("üì¶ Inventario de Elementos")
        
        try:
            col1, col2, col3 = st.columns(3)
            
            conn = db.get_connection()
            
            with col1:
                categorias_df = pd.read_sql_query("SELECT id, nombre FROM categorias WHERE activo = 1", conn)
                categoria_filtro = st.selectbox(
                    "Filtrar por Categor√≠a",
                    options=[None] + categorias_df['id'].tolist(),
                    format_func=lambda x: "Todas las categor√≠as" if x is None else categorias_df[categorias_df['id'] == x]['nombre'].iloc[0]
                )
            
            with col2:
                depositos_df = pd.read_sql_query("SELECT id, nombre FROM depositos WHERE activo = 1", conn)
                deposito_filtro = st.selectbox(
                    "Filtrar por Dep√≥sito",
                    options=[None] + depositos_df['id'].tolist(),
                    format_func=lambda x: "Todos los dep√≥sitos" if x is None else depositos_df[depositos_df['id'] == x]['nombre'].iloc[0]
                )
            
            with col3:
                estado_filtro = st.selectbox(
                    "Filtrar por Estado",
                    options=[None, "disponible", "prestado", "mantenimiento"],
                    format_func=lambda x: "Todos los estados" if x is None else x.title()
                )
            
            # Query mejorado con ubicaci√≥n actual de prestados
            query = """
                SELECT e.id, e.codigo, e.nombre, c.nombre as categoria, d.nombre as deposito, 
                       e.estado, e.marca, e.modelo,
                       CASE 
                           WHEN e.estado = 'prestado' THEN 
                               COALESCE((SELECT 'Prestado a: ' || b.nombre || ' (' || b.direccion || ')'
                                FROM prestamos p 
                                JOIN beneficiarios b ON p.beneficiario_id = b.id
                                WHERE p.elemento_id = e.id AND p.estado = 'activo'
                                LIMIT 1), 'En ' || d.nombre)
                           ELSE 'En ' || d.nombre
                       END as ubicacion_actual
                FROM elementos e
                JOIN categorias c ON e.categoria_id = c.id
                JOIN depositos d ON e.deposito_id = d.id
                WHERE e.activo = 1
            """
            params = []
            
            if categoria_filtro:
                query += " AND e.categoria_id = ?"
                params.append(categoria_filtro)
            
            if deposito_filtro:
                query += " AND e.deposito_id = ?"
                params.append(deposito_filtro)
            
            if estado_filtro:
                query += " AND e.estado = ?"
                params.append(estado_filtro)
            
            query += " ORDER BY e.codigo"
            
            elementos_df = pd.read_sql_query(query, conn, params=params)
            conn.close()
            
            if not elementos_df.empty:
                st.dataframe(elementos_df, use_container_width=True)
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Total Elementos", len(elementos_df))
                with col2:
                    disponibles = len(elementos_df[elementos_df['estado'] == 'disponible'])
                    st.metric("Disponibles", disponibles)
                with col3:
                    prestados = len(elementos_df[elementos_df['estado'] == 'prestado'])
                    st.metric("Prestados", prestados)
                with col4:
                    mantenimiento = len(elementos_df[elementos_df['estado'] == 'mantenimiento'])
                    st.metric("En Mantenimiento", mantenimiento)
            else:
                st.info("No se encontraron elementos con los filtros aplicados")
        except Exception as e:
            st.error(f"Error al cargar inventario: {e}")
    
    with tab3:
        st.header("üîß Cambiar Estado de Elementos")
        st.markdown("**Gesti√≥n manual de estados para casos especiales**")
        st.info("üí° Para devoluciones normales, usar 'Formulario de Pr√©stamo' ‚Üí 'Devoluci√≥n'")
        
        try:
            conn = db.get_connection()
            
            # Filtros para buscar elementos
            col1, col2 = st.columns(2)
            with col1:
                busqueda = st.text_input("üîç Buscar por c√≥digo o nombre:")
            with col2:
                estado_actual = st.selectbox("Estado actual:", ["Todos", "disponible", "prestado", "mantenimiento"])
            
            # Query para buscar elementos
            query = """
                SELECT e.id, e.codigo, e.nombre, c.nombre as categoria, d.nombre as deposito, 
                       e.estado, e.marca, e.modelo
                FROM elementos e
                JOIN categorias c ON e.categoria_id = c.id
                JOIN depositos d ON e.deposito_id = d.id
                WHERE e.activo = 1
            """
            params = []
            
            if busqueda:
                query += " AND (e.codigo LIKE ? OR e.nombre LIKE ?)"
                params.extend([f"%{busqueda}%", f"%{busqueda}%"])
            
            if estado_actual != "Todos":
                query += " AND e.estado = ?"
                params.append(estado_actual)
            
            query += " ORDER BY e.codigo"
            
            elementos_encontrados = pd.read_sql_query(query, conn, params=params)
            
            if not elementos_encontrados.empty:
                st.markdown(f"#### Elementos encontrados: {len(elementos_encontrados)}")
                
                for idx, elemento in elementos_encontrados.iterrows():
                    col1, col2, col3 = st.columns([2, 1, 1])
                    
                    with col1:
                        st.write(f"**{elemento['codigo']}** - {elemento['nombre']}")
                        st.caption(f"Estado: {elemento['estado']} | Dep√≥sito: {elemento['deposito']}")
                    
                    with col2:
                        # Verificar si tiene pr√©stamo activo
                        prestamo_activo = pd.read_sql_query("""
                            SELECT p.id, b.nombre as beneficiario
                            FROM prestamos p
                            JOIN beneficiarios b ON p.beneficiario_id = b.id
                            WHERE p.elemento_id = ? AND p.estado = 'activo'
                        """, conn, params=[elemento['id']])
                        
                        if not prestamo_activo.empty:
                            st.warning(f"‚ö†Ô∏è Prestado a: {prestamo_activo.iloc[0]['beneficiario']}")
                        else:
                            st.success("‚úÖ Sin pr√©stamos activos")
                    
                    with col3:
                        if st.button(f"üîÑ Cambiar Estado", key=f"cambiar_{elemento['id']}"):
                            st.session_state[f"cambiar_estado_{elemento['id']}"] = True
                    
                    # Formulario de cambio de estado
                    if st.session_state.get(f"cambiar_estado_{elemento['id']}", False):
                        with st.expander(f"Cambiar Estado: {elemento['codigo']}", expanded=True):
                            with st.form(f"cambio_estado_{elemento['id']}"):
                                col_form1, col_form2 = st.columns(2)
                                
                                with col_form1:
                                    nuevo_estado = st.selectbox(
                                        "Nuevo Estado:",
                                        options=["disponible", "prestado", "mantenimiento"],
                                        index=["disponible", "prestado", "mantenimiento"].index(elemento['estado'])
                                    )
                                    
                                    razon = st.selectbox(
                                        "Raz√≥n del cambio:",
                                        options=[
                                            "Correcci√≥n administrativa",
                                            "Devoluci√≥n no registrada",
                                            "Elemento perdido/da√±ado",
                                            "Mantenimiento preventivo",
                                            "Error en registro anterior",
                                            "Otro"
                                        ]
                                    )
                                
                                with col_form2:
                                    if razon == "Otro":
                                        razon_personalizada = st.text_input("Especificar raz√≥n:")
                                        razon_final = razon_personalizada if razon_personalizada else razon
                                    else:
                                        razon_final = razon
                                    
                                    observaciones = st.text_area("Observaciones detalladas:")
                                    responsable = st.text_input("Responsable que autoriza:", value="Administrador BEO")
                                
                                # Advertencia si tiene pr√©stamo activo
                                if not prestamo_activo.empty and nuevo_estado != "prestado":
                                    st.warning("‚ö†Ô∏è **ATENCI√ìN**: Este elemento tiene un pr√©stamo activo. Al cambiar el estado se cerrar√° autom√°ticamente el pr√©stamo.")
                                
                                col_btn1, col_btn2 = st.columns(2)
                                with col_btn1:
                                    if st.form_submit_button("‚úÖ CONFIRMAR CAMBIO", type="primary"):
                                        try:
                                            cursor = conn.cursor()
                                            
                                            # Registrar en historial
                                            cursor.execute("""
                                                INSERT INTO historial_estados 
                                                (elemento_id, estado_anterior, estado_nuevo, razon, observaciones, responsable)
                                                VALUES (?, ?, ?, ?, ?, ?)
                                            """, (elemento['id'], elemento['estado'], nuevo_estado, razon_final, observaciones, responsable))
                                            
                                            # Actualizar estado del elemento
                                            cursor.execute("""
                                                UPDATE elementos 
                                                SET estado = ?, observaciones = COALESCE(observaciones, '') || char(10) || ?
                                                WHERE id = ?
                                            """, (nuevo_estado, f"[{datetime.now().strftime('%Y-%m-%d %H:%M')}] Estado cambiado a {nuevo_estado}. Raz√≥n: {razon_final}. Por: {responsable}", elemento['id']))
                                            
                                            # Si tiene pr√©stamo activo y se cambia a disponible/mantenimiento, cerrar pr√©stamo
                                            if not prestamo_activo.empty and nuevo_estado in ["disponible", "mantenimiento"]:
                                                cursor.execute("""
                                                    UPDATE prestamos 
                                                    SET estado = 'devuelto', fecha_devolucion_real = DATE('now'),
                                                        observaciones_devolucion = ?
                                                    WHERE elemento_id = ? AND estado = 'activo'
                                                """, (f"Pr√©stamo cerrado autom√°ticamente por cambio de estado. Raz√≥n: {razon_final}", elemento['id']))
                                            
                                            conn.commit()
                                            
                                            st.success(f"‚úÖ Estado cambiado exitosamente a: {nuevo_estado}")
                                            del st.session_state[f"cambiar_estado_{elemento['id']}"]
                                            time.sleep(1)
                                            st.rerun()
                                            
                                        except Exception as e:
                                            st.error(f"‚ùå Error al cambiar estado: {e}")
                                
                                with col_btn2:
                                    if st.form_submit_button("‚ùå Cancelar"):
                                        del st.session_state[f"cambiar_estado_{elemento['id']}"]
                                        st.rerun()
                    
                    st.markdown("---")
            
            else:
                st.info("No se encontraron elementos con los criterios especificados")
            
            conn.close()
        except Exception as e:
            st.error(f"Error en cambio de estado: {e}")
    
    with tab4:
        st.subheader("üìö Historial de Pr√©stamos por Elemento")
        st.markdown("**Ver por qu√© manos pas√≥ cada elemento ortop√©dico**")
        
        try:
            conn = db.get_connection()
            
            # Selecci√≥n de elemento
            elementos_df = pd.read_sql_query("""
                SELECT e.id, e.codigo, e.nombre, c.nombre as categoria
                FROM elementos e
                JOIN categorias c ON e.categoria_id = c.id
                WHERE e.activo = 1
                ORDER BY e.codigo
            """, conn)
            
            if not elementos_df.empty:
                elemento_id = st.selectbox(
                    "Seleccionar Elemento:",
                    options=elementos_df['id'].tolist(),
                    format_func=lambda x: f"{elementos_df[elementos_df['id'] == x]['codigo'].iloc[0]} - {elementos_df[elementos_df['id'] == x]['nombre'].iloc[0]}"
                )
                
                # Obtener informaci√≥n completa del elemento
                elemento_info = elementos_df[elementos_df['id'] == elemento_id].iloc[0]
                
                # Obtener historial completo de pr√©stamos
                historial_elemento = pd.read_sql_query("""
                    SELECT 
                        p.id,
                        p.fecha_prestamo,
                        p.fecha_devolucion_estimada,
                        p.fecha_devolucion_real,
                        p.estado,
                        b.nombre as beneficiario,
                        b.tipo as tipo_beneficiario,
                        b.direccion as direccion_beneficiario,
                        h.nombre as hermano_solicitante,
                        l.nombre as logia,
                        p.duracion_dias,
                        p.entregado_por,
                        p.recibido_por,
                        p.observaciones_prestamo,
                        p.observaciones_devolucion,
                        CASE 
                            WHEN p.fecha_devolucion_real IS NULL AND DATE('now') > p.fecha_devolucion_estimada THEN 'VENCIDO'
                            WHEN p.fecha_devolucion_real IS NULL THEN 'ACTIVO'
                            WHEN p.fecha_devolucion_real <= p.fecha_devolucion_estimada THEN 'DEVUELTO A TIEMPO'
                            ELSE 'DEVUELTO CON RETRASO'
                        END as estado_cumplimiento,
                        CASE 
                            WHEN p.fecha_devolucion_real IS NOT NULL 
                            THEN CAST((JULIANDAY(p.fecha_devolucion_real) - JULIANDAY(p.fecha_devolucion_estimada)) AS INTEGER)
                            ELSE CAST((JULIANDAY('now') - JULIANDAY(p.fecha_devolucion_estimada)) AS INTEGER)
                        END as dias_diferencia
                    FROM prestamos p
                    JOIN beneficiarios b ON p.beneficiario_id = b.id
                    JOIN hermanos h ON p.hermano_solicitante_id = h.id
                    LEFT JOIN logias l ON h.logia_id = l.id
                    WHERE p.elemento_id = ?
                    ORDER BY p.fecha_prestamo DESC
                """, conn, params=[elemento_id])
                
                # Obtener historial de cambios de estado
                historial_estados = pd.read_sql_query("""
                    SELECT fecha_cambio, estado_anterior, estado_nuevo, razon, responsable, observaciones
                    FROM historial_estados
                    WHERE elemento_id = ?
                    ORDER BY fecha_cambio DESC
                """, conn, params=[elemento_id])
                
                st.markdown(f"#### üìä Resumen de {elemento_info['codigo']} - {elemento_info['nombre']}")
                
                if not historial_elemento.empty:
                    # Estad√≠sticas del elemento
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        total_prestamos = len(historial_elemento)
                        st.metric("Total Pr√©stamos", total_prestamos)
                    with col2:
                        activos = len(historial_elemento[historial_elemento['estado'] == 'activo'])
                        st.metric("Actualmente Prestado", activos)
                    with col3:
                        diferentes_beneficiarios = historial_elemento['beneficiario'].nunique()
                        st.metric("Diferentes Beneficiarios", diferentes_beneficiarios)
                    with col4:
                        promedio_duracion = historial_elemento['duracion_dias'].mean()
                        st.metric("Duraci√≥n Promedio", f"{promedio_duracion:.0f} d√≠as")
                    
                    # Tabla detallada
                    st.markdown("#### üìã Historial Detallado de Pr√©stamos")
                    st.dataframe(historial_elemento, use_container_width=True)
                    
                    # Gr√°fico de l√≠nea temporal si hay m√∫ltiples pr√©stamos
                    if len(historial_elemento) > 1:
                        # Crear gr√°fico simple de barras con fechas
                        fig = px.bar(
                            historial_elemento,
                            x="fecha_prestamo",
                            y="duracion_dias",
                            color="estado_cumplimiento",
                            title="Historial de Pr√©stamos",
                            hover_data=["beneficiario", "hermano_solicitante"]
                        )
                        st.plotly_chart(fig, use_container_width=True)
                
                else:
                    st.info("Este elemento no ha sido prestado a√∫n")
                
                # Historial de cambios de estado
                if not historial_estados.empty:
                    st.markdown("#### üîß Historial de Cambios de Estado")
                    st.dataframe(historial_estados, use_container_width=True)
            
            else:
                st.warning("No hay elementos registrados")
            
            conn.close()
        except Exception as e:
            st.error(f"Error al cargar historial: {e}")

def gestionar_prestamos():
    """Gesti√≥n de pr√©stamos seg√∫n formulario BEO"""
    st.header("üìã Formulario de Pr√©stamo BEO")
    
    tab1, tab2, tab3, tab4 = st.tabs(["Nuevo Pr√©stamo", "Pr√©stamos Activos", "üîÑ Devoluci√≥n", "Historial"])
    
    with tab1:
        st.subheader("üìù Nuevo Formulario de Pr√©stamo")
        st.caption("Completar la siguiente encuesta a fin de tener un control sobre los elementos ortop√©dicos prestados")
        
        with st.form("prestamo_beo_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### üìÖ Informaci√≥n General")
                fecha_prestamo = st.date_input("Fecha*", value=date.today())
                
                # Duraci√≥n del pr√©stamo
                st.markdown("#### ‚è±Ô∏è ¬øCu√°l es el pedido que se solicita?")
                col_dur1, col_dur2 = st.columns(2)
                with col_dur1:
                    duracion_tipo = st.selectbox("Tipo de duraci√≥n", ["D√≠as", "Meses"])
                with col_dur2:
                    if duracion_tipo == "D√≠as":
                        duracion_cantidad = st.number_input("Cantidad", min_value=1, value=90, key="duracion_dias")
                    else:
                        duracion_cantidad = st.number_input("Cantidad", min_value=1, value=3, key="duracion_meses")
                
                # C√°lculo de d√≠as
                if duracion_tipo == "Meses":
                    duracion_dias = duracion_cantidad * 30
                else:
                    duracion_dias = duracion_cantidad
                
                st.info(f"üìÖ **Duraci√≥n del pr√©stamo:** {duracion_dias} d√≠as ({duracion_cantidad} {duracion_tipo.lower()})")
                
                # HERMANO QUE SOLICITA EL PEDIDO
                st.markdown("#### üë®‚Äçü§ù‚Äçüë® Hermano que solicita el pedido")
                
                try:
                    conn = db.get_connection()
                    hermanos_df = pd.read_sql_query("""
                        SELECT h.id, h.nombre, h.telefono, h.grado, l.nombre as logia, 
                               l.hospitalario, l.telefono_hospitalario, l.venerable_maestro, l.telefono_venerable
                        FROM hermanos h
                        LEFT JOIN logias l ON h.logia_id = l.id
                        WHERE h.activo = 1
                        ORDER BY h.nombre
                    """, conn)
                    
                    if not hermanos_df.empty:
                        hermano_idx = st.selectbox(
                            "Seleccionar Hermano",
                            options=range(len(hermanos_df)),
                            format_func=lambda x: f"{hermanos_df.iloc[x]['nombre']} - {hermanos_df.iloc[x]['logia']} ({hermanos_df.iloc[x]['grado']})"
                        )
                        hermano_seleccionado = hermanos_df.iloc[hermano_idx]
                        hermano_solicitante_id = hermano_seleccionado['id']
                        
                        # Mostrar informaci√≥n del hermano
                        st.markdown("##### üìã Informaci√≥n del Hermano Solicitante")
                        col_info1, col_info2 = st.columns(2)
                        with col_info1:
                            st.text(f"Hermano: {hermano_seleccionado['nombre']}")
                            st.text(f"Tel√©fono: {hermano_seleccionado['telefono'] or 'No disponible'}")
                            st.text(f"Logia: {hermano_seleccionado['logia']}")
                            st.text(f"Grado: {hermano_seleccionado['grado']}")
                        with col_info2:
                            st.text(f"Hospitalario: {hermano_seleccionado['hospitalario'] or 'No disponible'}")
                            st.text(f"Tel√©fono Hospitalario: {hermano_seleccionado['telefono_hospitalario'] or 'No disponible'}")
                            st.text(f"Venerable Maestro: {hermano_seleccionado['venerable_maestro'] or 'No disponible'}")
                            st.text(f"Tel√©fono Venerable: {hermano_seleccionado['telefono_venerable'] or 'No disponible'}")
                    else:
                        st.error("No hay hermanos registrados")
                        hermano_solicitante_id = None
                except Exception as e:
                    st.error(f"Error al cargar hermanos: {e}")
                    hermano_solicitante_id = None
            
            with col2:
                # A QUIEN VA DIRIGIDO EL PEDIDO
                st.markdown("#### üéØ ¬øA qui√©n va dirigido el pedido de pr√©stamo?, ¬øEs Hermano o Familiar?")
                tipo_beneficiario = st.radio("Tipo de beneficiario:", ["Hermano", "Familiar"])
                
                if tipo_beneficiario == "Hermano":
                    if hermanos_df is not None and not hermanos_df.empty:
                        hermano_beneficiario_idx = st.selectbox(
                            "Seleccionar Hermano Beneficiario",
                            options=range(len(hermanos_df)),
                            format_func=lambda x: hermanos_df.iloc[x]['nombre']
                        )
                        beneficiario_nombre = hermanos_df.iloc[hermano_beneficiario_idx]['nombre']
                        beneficiario_telefono = hermanos_df.iloc[hermano_beneficiario_idx]['telefono']
                        parentesco = None
                        hermano_responsable_id = None
                        logia_beneficiario = hermanos_df.iloc[hermano_beneficiario_idx]['logia']
                    else:
                        beneficiario_nombre = ""
                        beneficiario_telefono = ""
                        parentesco = None
                        hermano_responsable_id = None
                        logia_beneficiario = ""
                
                else:  # Familiar
                    st.markdown("**Si es Familiar:**")
                    parentesco = st.selectbox(
                        "Que tipo de parentesco",
                        ["Madre", "Padre", "Esposa/o", "Hijo/a", "Hermano/a", "Abuelo/a", "Nieto/a", "T√≠o/a", "Sobrino/a", "Otro"]
                    )
                    
                    if parentesco == "Otro":
                        parentesco = st.text_input("Especificar parentesco")
                    
                    if hermanos_df is not None and not hermanos_df.empty:
                        hermano_resp_idx = st.selectbox(
                            "De que Hermano",
                            options=range(len(hermanos_df)),
                            format_func=lambda x: hermanos_df.iloc[x]['nombre'],
                            key="hermano_responsable"
                        )
                        hermano_responsable_id = hermanos_df.iloc[hermano_resp_idx]['id']
                        logia_beneficiario = hermanos_df.iloc[hermano_resp_idx]['logia']
                        st.info(f"Hermano responsable: {hermanos_df.iloc[hermano_resp_idx]['nombre']}")
                    else:
                        hermano_responsable_id = None
                        logia_beneficiario = ""
                    
                    beneficiario_nombre = st.text_input("Nombre del Familiar*")
                    beneficiario_telefono = st.text_input("Tel√©fono del Familiar")
                
                # DIRECCI√ìN Y INFORMACI√ìN DEL PR√âSTAMO
                st.markdown("#### üìç Direcci√≥n de donde va dirigido el Elemento Ortop√©dico solicitado")
                direccion_entrega = st.text_area("Direcci√≥n completa*", help="Direcci√≥n donde se entregar√° el elemento")
                
                # Mostrar informaci√≥n
                st.text_input("Tel√©fono", value=beneficiario_telefono or "", disabled=True)
                st.text_input("Logia", value=logia_beneficiario, disabled=True)
                
                # ELEMENTO SOLICITADO
                st.markdown("#### ü¶Ω Elemento Ortop√©dico Solicitado")
                try:
                    elementos_disponibles = pd.read_sql_query("""
                        SELECT e.id, e.codigo, e.nombre, c.nombre as categoria, d.nombre as deposito
                        FROM elementos e
                        JOIN categorias c ON e.categoria_id = c.id
                        JOIN depositos d ON e.deposito_id = d.id
                        WHERE e.estado = 'disponible' AND e.activo = 1
                        ORDER BY e.codigo
                    """, conn)
                    
                    if not elementos_disponibles.empty:
                        elemento_id = st.selectbox(
                            "Elemento a Prestar*",
                            options=elementos_disponibles['id'].tolist(),
                            format_func=lambda x: f"{elementos_disponibles[elementos_disponibles['id'] == x]['codigo'].iloc[0]} - {elementos_disponibles[elementos_disponibles['id'] == x]['nombre'].iloc[0]} ({elementos_disponibles[elementos_disponibles['id'] == x]['deposito'].iloc[0]})"
                        )
                    else:
                        st.error("No hay elementos disponibles para pr√©stamo")
                        elemento_id = None
                except Exception as e:
                    st.error(f"Error al cargar elementos: {e}")
                    elemento_id = None
                
                try:
                    conn.close()
                except:
                    pass
                
                # FECHA ESTIMADA DE DEVOLUCI√ìN
                fecha_devolucion_estimada = fecha_prestamo + timedelta(days=duracion_dias)
                st.markdown("#### üìÖ Fecha estimada de devoluci√≥n del Elemento Ortop√©dico prestado")
                st.date_input(
                    "Fecha estimada de devoluci√≥n", 
                    value=fecha_devolucion_estimada, 
                    disabled=True,
                    help=f"Calculada autom√°ticamente: {fecha_prestamo.strftime('%d/%m/%Y')} + {duracion_dias} d√≠as = {fecha_devolucion_estimada.strftime('%d/%m/%Y')}"
                )
                
                # CAMPOS ADICIONALES
                st.markdown("#### üìù Informaci√≥n Adicional")
                observaciones_prestamo = st.text_area("Observaciones del pr√©stamo", help="Cualquier informaci√≥n relevante sobre el pr√©stamo")
                
                col_resp1, col_resp2 = st.columns(2)
                with col_resp1:
                    autorizado_por = st.text_input("Autorizado por", help="Quien autoriza el pr√©stamo")
                with col_resp2:
                    entregado_por = st.text_input("Entregado por*", help="Quien entrega f√≠sicamente el elemento")
            
            # Bot√≥n de env√≠o
            col_submit1, col_submit2, col_submit3 = st.columns([1, 2, 1])
            with col_submit2:
                submit_prestamo = st.form_submit_button("üìã Registrar Pr√©stamo BEO", use_container_width=True)
            
            if submit_prestamo:
                if (hermano_solicitante_id and elemento_id and beneficiario_nombre and 
                    direccion_entrega and entregado_por):
                    try:
                        conn = db.get_connection()
                        cursor = conn.cursor()
                        
                        # Crear beneficiario
                        cursor.execute("""
                            INSERT INTO beneficiarios (tipo, hermano_id, hermano_responsable_id, 
                                                     parentesco, nombre, telefono, direccion)
                            VALUES (?, ?, ?, ?, ?, ?, ?)
                        """, (tipo_beneficiario.lower(), 
                             hermano_solicitante_id if tipo_beneficiario == "Hermano" else None,
                             hermano_responsable_id if tipo_beneficiario == "Familiar" else None,
                             parentesco, beneficiario_nombre, beneficiario_telefono, direccion_entrega))
                        
                        beneficiario_id = cursor.lastrowid
                        
                        # Registrar pr√©stamo
                        cursor.execute("""
                            INSERT INTO prestamos 
                            (fecha_prestamo, elemento_id, beneficiario_id, hermano_solicitante_id,
                             duracion_dias, fecha_devolucion_estimada, observaciones_prestamo,
                             autorizado_por, entregado_por)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (fecha_prestamo, elemento_id, beneficiario_id, hermano_solicitante_id,
                             duracion_dias, fecha_devolucion_estimada, observaciones_prestamo,
                             autorizado_por, entregado_por))
                        
                        # Actualizar estado del elemento
                        cursor.execute("UPDATE elementos SET estado = 'prestado' WHERE id = ?", (elemento_id,))
                        
                        # Registrar cambio de estado
                        cursor.execute("""
                            INSERT INTO historial_estados 
                            (elemento_id, estado_anterior, estado_nuevo, razon, responsable)
                            VALUES (?, ?, ?, ?, ?)
                        """, (elemento_id, 'disponible', 'prestado', 'Pr√©stamo registrado', entregado_por))
                        
                        conn.commit()
                        conn.close()
                        st.success("‚úÖ Pr√©stamo BEO registrado exitosamente")
                        st.balloons()
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå Error al registrar pr√©stamo: {e}")
                else:
                    st.error("‚ùå Todos los campos marcados con * son obligatorios")
    
    with tab2:
        st.subheader("üìã Pr√©stamos Activos - Monitoreo Completo")
        
        try:
            conn = db.get_connection()
            prestamos_activos = pd.read_sql_query("""
                SELECT p.id, e.codigo, e.nombre as elemento, 
                       b.nombre as beneficiario, b.tipo, b.telefono, b.direccion as ubicacion_actual,
                       h.nombre as hermano_solicitante,
                       l.nombre as logia,
                       p.fecha_prestamo, p.fecha_devolucion_estimada, p.entregado_por,
                       CASE 
                           WHEN DATE('now') > p.fecha_devolucion_estimada THEN 'VENCIDO'
                           WHEN DATE(p.fecha_devolucion_estimada, '-7 days') <= DATE('now') THEN 'POR VENCER'
                           ELSE 'VIGENTE'
                       END as estado_vencimiento,
                       CAST((JULIANDAY(p.fecha_devolucion_estimada) - JULIANDAY('now')) AS INTEGER) as dias_restantes
                FROM prestamos p
                JOIN elementos e ON p.elemento_id = e.id
                JOIN beneficiarios b ON p.beneficiario_id = b.id
                JOIN hermanos h ON p.hermano_solicitante_id = h.id
                LEFT JOIN logias l ON h.logia_id = l.id
                WHERE p.estado = 'activo'
                ORDER BY p.fecha_devolucion_estimada ASC
            """, conn)
            
            if not prestamos_activos.empty:
                st.markdown("#### üîç Vista Completa de Pr√©stamos Activos con Ubicaciones")
                
                # Aplicar colores seg√∫n estado de vencimiento
                def highlight_vencimiento(row):
                    if row['estado_vencimiento'] == 'VENCIDO':
                        return ['background-color: #ffebee'] * len(row)
                    elif row['estado_vencimiento'] == 'POR VENCER':
                        return ['background-color: #fff3e0'] * len(row)
                    else:
                        return ['background-color: #e8f5e8'] * len(row)
                
                styled_df = prestamos_activos.style.apply(highlight_vencimiento, axis=1)
                st.dataframe(styled_df, use_container_width=True)
                
                # Resumen de estados
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    total_activos = len(prestamos_activos)
                    st.metric("üìã Total Activos", total_activos)
                with col2:
                    vigentes = len(prestamos_activos[prestamos_activos['estado_vencimiento'] == 'VIGENTE'])
                    st.metric("‚úÖ Vigentes", vigentes)
                with col3:
                    por_vencer = len(prestamos_activos[prestamos_activos['estado_vencimiento'] == 'POR VENCER'])
                    st.metric("‚ö†Ô∏è Por Vencer", por_vencer)
                with col4:
                    vencidos = len(prestamos_activos[prestamos_activos['estado_vencimiento'] == 'VENCIDO'])
                    st.metric("üö® Vencidos", vencidos)
            else:
                st.info("‚ÑπÔ∏è No hay pr√©stamos activos en este momento")
            
            conn.close()
        except Exception as e:
            st.error(f"Error al cargar pr√©stamos activos: {e}")
    
    with tab3:
        st.header("üîÑ Devoluci√≥n de Elementos")
        st.markdown("**Proceso para registrar devoluciones de elementos prestados**")
        
        try:
            conn = db.get_connection()
            
            prestamos_activos = pd.read_sql_query("""
                SELECT p.id, p.fecha_prestamo, p.fecha_devolucion_estimada,
                       e.id as elemento_id, e.codigo, e.nombre as elemento,
                       b.nombre as beneficiario, b.telefono,
                       h.nombre as hermano_solicitante,
                       l.nombre as logia,
                       CASE 
                           WHEN DATE('now') > p.fecha_devolucion_estimada THEN 'VENCIDO'
                           WHEN DATE(p.fecha_devolucion_estimada, '-7 days') <= DATE('now') THEN 'POR VENCER'
                           ELSE 'VIGENTE'
                       END as estado_vencimiento
                FROM prestamos p
                JOIN elementos e ON p.elemento_id = e.id
                JOIN beneficiarios b ON p.beneficiario_id = b.id
                JOIN hermanos h ON p.hermano_solicitante_id = h.id
                LEFT JOIN logias l ON h.logia_id = l.id
                WHERE p.estado = 'activo'
                ORDER BY p.fecha_devolucion_estimada ASC
            """, conn)
            
            if not prestamos_activos.empty:
                col1, col2 = st.columns(2)
                with col1:
                    busqueda = st.text_input("üîç Buscar elemento o beneficiario:", placeholder="C√≥digo, nombre del elemento o beneficiario")
                with col2:
                    filtro_estado = st.selectbox("Estado:", ["Todos", "VIGENTE", "POR VENCER", "VENCIDO"])
                
                # Aplicar filtros
                prestamos_filtrados = prestamos_activos.copy()
                
                if filtro_estado != "Todos":
                    prestamos_filtrados = prestamos_filtrados[prestamos_filtrados['estado_vencimiento'] == filtro_estado]
                
                if busqueda:
                    prestamos_filtrados = prestamos_filtrados[
                        prestamos_filtrados['codigo'].str.contains(busqueda, case=False, na=False) |
                        prestamos_filtrados['elemento'].str.contains(busqueda, case=False, na=False) |
                        prestamos_filtrados['beneficiario'].str.contains(busqueda, case=False, na=False)
                    ]
                
                if not prestamos_filtrados.empty:
                    for idx, prestamo in prestamos_filtrados.iterrows():
                        # Color seg√∫n estado
                        if prestamo['estado_vencimiento'] == 'VENCIDO':
                            estado_emoji = "üî¥"
                            estado_color = "#ffebee"
                        elif prestamo['estado_vencimiento'] == 'POR VENCER':
                            estado_emoji = "üü°" 
                            estado_color = "#fff3e0"
                        else:
                            estado_emoji = "üü¢"
                            estado_color = "#e8f5e8"
                        
                        with st.container():
                            st.markdown(f"""
                            <div style="background-color: {estado_color}; padding: 10px; border-radius: 8px; margin: 5px 0;">
                            <h5>{estado_emoji} {prestamo['codigo']} - {prestamo['elemento']}</h5>
                            <p><strong>Beneficiario:</strong> {prestamo['beneficiario']} | <strong>Hermano:</strong> {prestamo['hermano_solicitante']} ({prestamo['logia']})</p>
                            <p><strong>Prestado:</strong> {prestamo['fecha_prestamo']} | <strong>Debe devolver:</strong> {prestamo['fecha_devolucion_estimada']}</p>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            if st.button(f"üîÑ DEVOLVER AHORA", key=f"dev_{prestamo['id']}", type="primary"):
                                st.session_state[f'devolver_{prestamo["id"]}'] = True
                            
                            if st.session_state.get(f'devolver_{prestamo["id"]}', False):
                                st.markdown("---")
                                st.markdown("#### üìù Registrar Devoluci√≥n")
                                
                                with st.form(f"devolucion_{prestamo['id']}"):
                                    col_dev1, col_dev2, col_dev3 = st.columns(3)
                                    
                                    with col_dev1:
                                        fecha_devolucion = st.date_input("Fecha de Devoluci√≥n*", value=date.today())
                                        recibido_por = st.text_input("Recibido por*", placeholder="Nombre de quien recibe")
                                    
                                    with col_dev2:
                                        depositos_disponibles = pd.read_sql_query("SELECT id, nombre FROM depositos WHERE activo = 1 ORDER BY nombre", conn)
                                        
                                        if not depositos_disponibles.empty:
                                            deposito_devolucion_id = st.selectbox(
                                                "Dep√≥sito de Devoluci√≥n*",
                                                options=depositos_disponibles['id'].tolist(),
                                                format_func=lambda x: depositos_disponibles[depositos_disponibles['id'] == x]['nombre'].iloc[0]
                                            )
                                        else:
                                            st.error("No hay dep√≥sitos disponibles")
                                            deposito_devolucion_id = None
                                        
                                        estado_elemento = st.selectbox("Estado del elemento:", ["Bueno", "Regular", "Necesita Mantenimiento", "Da√±ado"])
                                    
                                    with col_dev3:
                                        observaciones = st.text_area("Observaciones", placeholder="Estado del elemento, observaciones...")
                                    
                                    col_action1, col_action2 = st.columns(2)
                                    
                                    with col_action1:
                                        if st.form_submit_button("‚úÖ CONFIRMAR DEVOLUCI√ìN", type="primary", use_container_width=True):
                                            if recibido_por and deposito_devolucion_id:
                                                try:
                                                    cursor = conn.cursor()
                                                    
                                                    # Determinar estado final del elemento
                                                    if estado_elemento in ["Necesita Mantenimiento", "Da√±ado"]:
                                                        estado_final = "mantenimiento"
                                                    else:
                                                        estado_final = "disponible"
                                                    
                                                    # Actualizar pr√©stamo
                                                    observaciones_completas = f"Estado del elemento: {estado_elemento}. {observaciones}".strip()
                                                    cursor.execute("""
                                                        UPDATE prestamos 
                                                        SET fecha_devolucion_real = ?, estado = 'devuelto',
                                                            observaciones_devolucion = ?, recibido_por = ?,
                                                            deposito_devolucion_id = ?
                                                        WHERE id = ?
                                                    """, (fecha_devolucion, observaciones_completas, recibido_por, deposito_devolucion_id, prestamo['id']))
                                                    
                                                    # Actualizar elemento (estado y dep√≥sito)
                                                    cursor.execute("""
                                                        UPDATE elementos 
                                                        SET estado = ?, deposito_id = ?
                                                        WHERE id = ?
                                                    """, (estado_final, deposito_devolucion_id, prestamo['elemento_id']))
                                                    
                                                    # Registrar cambio de estado
                                                    cursor.execute("""
                                                        INSERT INTO historial_estados 
                                                        (elemento_id, estado_anterior, estado_nuevo, razon, observaciones, responsable)
                                                        VALUES (?, ?, ?, ?, ?, ?)
                                                    """, (prestamo['elemento_id'], 'prestado', estado_final, 'Devoluci√≥n registrada', observaciones_completas, recibido_por))
                                                    
                                                    conn.commit()
                                                    
                                                    st.success(f"""
                                                    ‚úÖ **Devoluci√≥n Registrada**
                                                    
                                                    üì¶ **Elemento:** {prestamo['codigo']} - {prestamo['elemento']}  
                                                    üë§ **Recibido por:** {recibido_por}  
                                                    üìÖ **Fecha:** {fecha_devolucion}  
                                                    üìä **Estado:** {estado_final}
                                                    üè¢ **Dep√≥sito:** {depositos_disponibles[depositos_disponibles['id'] == deposito_devolucion_id]['nombre'].iloc[0]}
                                                    """)
                                                    
                                                    del st.session_state[f'devolver_{prestamo["id"]}']
                                                    time.sleep(2)
                                                    st.rerun()
                                                    
                                                except Exception as e:
                                                    st.error(f"‚ùå Error: {e}")
                                            else:
                                                st.error("‚ùå Campos obligatorios faltantes")
                                    
                                    with col_action2:
                                        if st.form_submit_button("‚ùå Cancelar", use_container_width=True):
                                            del st.session_state[f'devolver_{prestamo["id"]}']
                                            st.rerun()
                            
                            st.markdown("---")
                else:
                    st.warning("‚ùå No se encontraron elementos con los filtros aplicados")
            
            else:
                st.info("‚ÑπÔ∏è **No hay elementos prestados actualmente**")
            
            conn.close()
        except Exception as e:
            st.error(f"Error en devoluci√≥n: {e}")
    
    with tab4:
        st.subheader("üìö Historial Completo de Devoluciones")
        
        try:
            conn = db.get_connection()
            
            historial_devoluciones = pd.read_sql_query("""
                SELECT e.codigo, e.nombre as elemento,
                       b.nombre as beneficiario,
                       h.nombre as hermano_solicitante,
                       l.nombre as logia,
                       p.fecha_prestamo, p.fecha_devolucion_estimada, p.fecha_devolucion_real,
                       p.recibido_por, p.observaciones_devolucion,
                       d.nombre as deposito_devolucion,
                       CAST((JULIANDAY(p.fecha_devolucion_real) - JULIANDAY(p.fecha_devolucion_estimada)) AS INTEGER) as dias_diferencia,
                       CASE 
                           WHEN p.fecha_devolucion_real <= p.fecha_devolucion_estimada THEN 'A TIEMPO'
                           ELSE 'CON RETRASO'
                       END as cumplimiento
                FROM prestamos p
                JOIN elementos e ON p.elemento_id = e.id
                JOIN beneficiarios b ON p.beneficiario_id = b.id
                JOIN hermanos h ON p.hermano_solicitante_id = h.id
                LEFT JOIN logias l ON h.logia_id = l.id
                LEFT JOIN depositos d ON p.deposito_devolucion_id = d.id
                WHERE p.estado = 'devuelto'
                ORDER BY p.fecha_devolucion_real DESC
            """, conn)
            
            if not historial_devoluciones.empty:
                # Filtros
                col1, col2 = st.columns(2)
                with col1:
                    fecha_desde = st.date_input("Desde:", value=date.today() - timedelta(days=30))
                with col2:
                    fecha_hasta = st.date_input("Hasta:", value=date.today())
                
                # Aplicar filtro de fechas
                historial_filtrado = historial_devoluciones[
                    (pd.to_datetime(historial_devoluciones['fecha_devolucion_real']) >= pd.to_datetime(fecha_desde)) &
                    (pd.to_datetime(historial_devoluciones['fecha_devolucion_real']) <= pd.to_datetime(fecha_hasta))
                ]
                
                if not historial_filtrado.empty:
                    # Aplicar colores seg√∫n cumplimiento
                    def highlight_cumplimiento_hist(row):
                        if row['cumplimiento'] == 'CON RETRASO':
                            return ['background-color: #ffebee'] * len(row)
                        else:
                            return ['background-color: #e8f5e8'] * len(row)
                    
                    styled_df = historial_filtrado.style.apply(highlight_cumplimiento_hist, axis=1)
                    st.dataframe(styled_df, use_container_width=True)
                    
                    # Estad√≠sticas
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("Total Devoluciones", len(historial_filtrado))
                    with col2:
                        a_tiempo = len(historial_filtrado[historial_filtrado['cumplimiento'] == 'A TIEMPO'])
                        st.metric("A Tiempo", a_tiempo)
                    with col3:
                        con_retraso = len(historial_filtrado[historial_filtrado['cumplimiento'] == 'CON RETRASO'])
                        st.metric("Con Retraso", con_retraso)
                    with col4:
                        if len(historial_filtrado) > 0:
                            porcentaje_cumplimiento = (a_tiempo / len(historial_filtrado)) * 100
                            st.metric("% Cumplimiento", f"{porcentaje_cumplimiento:.1f}%")
                    
                    # Gr√°fico de cumplimiento por logia
                    cumplimiento_por_logia = historial_filtrado.groupby(['logia', 'cumplimiento']).size().unstack(fill_value=0)
                    if not cumplimiento_por_logia.empty:
                        fig = px.bar(
                            cumplimiento_por_logia, 
                            title="Cumplimiento por Logia",
                            color_discrete_map={'A TIEMPO': 'green', 'CON RETRASO': 'red'}
                        )
                        st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("No hay devoluciones en el rango de fechas seleccionado")
            else:
                st.info("No hay devoluciones registradas a√∫n")
            
            conn.close()
        except Exception as e:
            st.error(f"Error al cargar historial: {e}")

def gestionar_depositos():
    """Gesti√≥n de dep√≥sitos"""
    st.header("üè¢ Gesti√≥n de Dep√≥sitos")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("Nuevo Dep√≥sito")
        with st.form("deposito_form"):
            nombre = st.text_input("Nombre del Dep√≥sito*")
            direccion = st.text_area("Direcci√≥n")
            responsable = st.text_input("Responsable")
            telefono = st.text_input("Tel√©fono")
            email = st.text_input("Email")
            
            if st.form_submit_button("Guardar Dep√≥sito"):
                if nombre:
                    try:
                        conn = db.get_connection()
                        cursor = conn.cursor()
                        cursor.execute("""
                            INSERT INTO depositos (nombre, direccion, responsable, telefono, email)
                            VALUES (?, ?, ?, ?, ?)
                        """, (nombre, direccion, responsable, telefono, email))
                        conn.commit()
                        conn.close()
                        st.success("Dep√≥sito guardado exitosamente")
                        st.rerun()
                    except sqlite3.IntegrityError:
                        st.error("Ya existe un dep√≥sito con ese nombre")
                    except Exception as e:
                        st.error(f"Error al guardar dep√≥sito: {e}")
                else:
                    st.error("El nombre del dep√≥sito es obligatorio")
    
    with col2:
        st.subheader("Dep√≥sitos Registrados")
        try:
            conn = db.get_connection()
            depositos_df = pd.read_sql_query("SELECT * FROM depositos WHERE activo = 1 ORDER BY nombre", conn)
            
            if not depositos_df.empty:
                # Mostrar tabla de dep√≥sitos
                depositos_display = depositos_df[['nombre', 'direccion', 'responsable', 'telefono', 'email']].copy()
                st.dataframe(depositos_display, use_container_width=True)
                
                # Mostrar inventario por dep√≥sito
                st.subheader("üì¶ Inventario por Dep√≥sito")
                inventario_depositos = pd.read_sql_query("""
                    SELECT 
                        d.nombre as deposito, 
                        e.estado, 
                        COUNT(*) as cantidad
                    FROM depositos d
                    LEFT JOIN elementos e ON d.id = e.deposito_id AND e.activo = 1
                    WHERE d.activo = 1
                    GROUP BY d.id, d.nombre, e.estado
                    ORDER BY d.nombre, e.estado
                """, conn)
                
                if not inventario_depositos.empty:
                    # Crear pivot table para mejor visualizaci√≥n
                    try:
                        pivot_inventario = inventario_depositos.pivot(index='deposito', columns='estado', values='cantidad').fillna(0)
                        # Convertir a enteros
                        for col in pivot_inventario.columns:
                            pivot_inventario[col] = pivot_inventario[col].astype(int)
                        st.dataframe(pivot_inventario, use_container_width=True)
                        
                        # Gr√°fico de inventario por dep√≥sito
                        fig = px.bar(
                            inventario_depositos, 
                            x='deposito', 
                            y='cantidad', 
                            color='estado',
                            title="Distribuci√≥n de Elementos por Dep√≥sito",
                            color_discrete_map={
                                'disponible': 'green',
                                'prestado': 'orange', 
                                'mantenimiento': 'red'
                            }
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        st.warning("Error al crear pivot table del inventario")
                        st.dataframe(inventario_depositos, use_container_width=True)
                else:
                    st.info("No hay elementos registrados en los dep√≥sitos")
            else:
                st.info("No hay dep√≥sitos registrados")
            
            conn.close()
        except Exception as e:
            st.error(f"Error al cargar dep√≥sitos: {e}")

def mostrar_dashboard():
    """Dashboard con estad√≠sticas y gr√°ficos mejorado"""
    st.header("üìä Dashboard BEO - Control Integral")
    
    try:
        conn = db.get_connection()
        
        # M√©tricas principales
        col1, col2, col3, col4 = st.columns(4)
        
        total_elementos = pd.read_sql_query("SELECT COUNT(*) as total FROM elementos WHERE activo = 1", conn).iloc[0]['total']
        disponibles = pd.read_sql_query("SELECT COUNT(*) as total FROM elementos WHERE estado = 'disponible' AND activo = 1", conn).iloc[0]['total']
        prestamos_activos = pd.read_sql_query("SELECT COUNT(*) as total FROM prestamos WHERE estado = 'activo'", conn).iloc[0]['total']
        total_hermanos = pd.read_sql_query("SELECT COUNT(*) as total FROM hermanos WHERE activo = 1", conn).iloc[0]['total']
        
        with col1:
            st.metric("ü¶Ω Total Elementos", total_elementos)
        with col2:
            st.metric("‚úÖ Disponibles", disponibles)
        with col3:
            st.metric("üìã Pr√©stamos Activos", prestamos_activos)
        with col4:
            st.metric("üë®‚Äçü§ù‚Äçüë® Hermanos Activos", total_hermanos)
        
        # Fila de gr√°ficos
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("ü¶Ω Elementos por Categor√≠a")
            elementos_categoria = pd.read_sql_query("""
                SELECT c.nombre, COUNT(e.id) as cantidad
                FROM categorias c
                LEFT JOIN elementos e ON c.id = e.categoria_id AND e.activo = 1
                WHERE c.activo = 1
                GROUP BY c.id, c.nombre
                HAVING COUNT(e.id) > 0
                ORDER BY cantidad DESC
            """, conn)
            
            if not elementos_categoria.empty:
                fig = px.pie(elementos_categoria, values='cantidad', names='nombre')
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("No hay elementos registrados por categor√≠a")
        
        with col2:
            st.subheader("üìä Estado de Elementos")
            estado_elementos = pd.read_sql_query("""
                SELECT estado, COUNT(*) as cantidad
                FROM elementos
                WHERE activo = 1
                GROUP BY estado
            """, conn)
            
            if not estado_elementos.empty:
                colors = {'disponible': 'green', 'prestado': 'orange', 'mantenimiento': 'red'}
                fig = px.bar(
                    estado_elementos, 
                    x='estado', 
                    y='cantidad',
                    color='estado',
                    color_discrete_map=colors
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("No hay elementos registrados")
        
        # Pr√©stamos por logia
        st.subheader("üèõÔ∏è Pr√©stamos Activos por Logia")
        prestamos_logia = pd.read_sql_query("""
            SELECT 
                COALESCE(l.nombre, 'Sin Logia') as logia, 
                COUNT(p.id) as prestamos_activos
            FROM logias l
            LEFT JOIN hermanos h ON l.id = h.logia_id
            LEFT JOIN prestamos p ON h.id = p.hermano_solicitante_id AND p.estado = 'activo'
            WHERE l.activo = 1
            GROUP BY l.id, l.nombre
            HAVING COUNT(p.id) > 0
            ORDER BY prestamos_activos DESC
        """, conn)
        
        if not prestamos_logia.empty:
            fig = px.bar(prestamos_logia, x='logia', y='prestamos_activos')
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("No hay pr√©stamos activos por logia")
        
        # Alertas de vencimiento mejoradas
        st.subheader("üö® Alertas de Vencimiento - Control Detallado")
        alertas_vencimiento = pd.read_sql_query("""
            SELECT e.codigo, e.nombre as elemento, 
                   b.nombre as beneficiario, b.telefono, b.direccion as ubicacion,
                   h.nombre as hermano_solicitante, h.telefono as telefono_hermano,
                   l.nombre as logia, l.hospitalario, l.telefono_hospitalario,
                   p.fecha_prestamo, p.fecha_devolucion_estimada,
                   CAST((JULIANDAY('now') - JULIANDAY(p.fecha_devolucion_estimada)) AS INTEGER) as dias_vencido,
                   CASE 
                       WHEN DATE('now') > p.fecha_devolucion_estimada THEN 'VENCIDO'
                       WHEN DATE(p.fecha_devolucion_estimada, '-7 days') <= DATE('now') THEN 'POR VENCER'
                       ELSE 'VIGENTE'
                   END as estado_alerta
            FROM prestamos p
            JOIN elementos e ON p.elemento_id = e.id
            JOIN beneficiarios b ON p.beneficiario_id = b.id
            JOIN hermanos h ON p.hermano_solicitante_id = h.id
            LEFT JOIN logias l ON h.logia_id = l.id
            WHERE p.estado = 'activo' 
            AND (DATE('now') > p.fecha_devolucion_estimada OR DATE(p.fecha_devolucion_estimada, '-7 days') <= DATE('now'))
            ORDER BY p.fecha_devolucion_estimada ASC
        """, conn)
        
        if not alertas_vencimiento.empty:
            # Aplicar colores seg√∫n alerta
            def highlight_alertas(row):
                if row['estado_alerta'] == 'VENCIDO':
                    return ['background-color: #ffebee'] * len(row)
                else:
                    return ['background-color: #fff3e0'] * len(row)
            
            styled_df = alertas_vencimiento.style.apply(highlight_alertas, axis=1)
            st.dataframe(styled_df, use_container_width=True)
            
            # Resumen de alertas
            col1, col2, col3 = st.columns(3)
            with col1:
                vencidos = len(alertas_vencimiento[alertas_vencimiento['estado_alerta'] == 'VENCIDO'])
                st.metric("üî¥ Vencidos", vencidos)
            with col2:
                por_vencer = len(alertas_vencimiento[alertas_vencimiento['estado_alerta'] == 'POR VENCER'])
                st.metric("üü° Por Vencer (7 d√≠as)", por_vencer)
            with col3:
                if vencidos > 0:
                    mas_vencido = alertas_vencimiento[alertas_vencimiento['estado_alerta'] == 'VENCIDO']['dias_vencido'].max()
                    st.metric("‚è∞ M√°ximo Retraso", f"{mas_vencido} d√≠as")
                else:
                    st.metric("‚è∞ M√°ximo Retraso", "0 d√≠as")
        else:
            st.success("‚úÖ No hay pr√©stamos pr√≥ximos a vencer o vencidos")
        
        # Ubicaciones actuales de elementos prestados
        st.subheader("üìç Ubicaciones Actuales de Elementos Prestados")
        ubicaciones_actuales = pd.read_sql_query("""
            SELECT e.codigo, e.nombre as elemento,
                   b.nombre as beneficiario, b.direccion as ubicacion,
                   h.nombre as hermano_responsable, h.telefono,
                   l.nombre as logia,
                   p.fecha_prestamo, p.fecha_devolucion_estimada
            FROM prestamos p
            JOIN elementos e ON p.elemento_id = e.id
            JOIN beneficiarios b ON p.beneficiario_id = b.id
            JOIN hermanos h ON p.hermano_solicitante_id = h.id
            LEFT JOIN logias l ON h.logia_id = l.id
            WHERE p.estado = 'activo'
            ORDER BY e.codigo
        """, conn)
        
        if not ubicaciones_actuales.empty:
            st.dataframe(ubicaciones_actuales, use_container_width=True)
            st.caption(f"üìç Total de elementos prestados: {len(ubicaciones_actuales)}")
        else:
            st.info("üì¶ Todos los elementos est√°n en dep√≥sitos")
        
        conn.close()
    except Exception as e:
        st.error(f"Error al cargar dashboard: {e}")

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    if not authenticate():
        return
    
    col1, col2, col3 = st.columns([1, 3, 1])
    with col2:
        st.title("üèõÔ∏è BEO - Banco de Elementos Ortop√©dicos")
        st.caption("Sistema de Gesti√≥n Integral - Versi√≥n Corregida")
    
    st.sidebar.title("üèõÔ∏è BEO Sistema")
    st.sidebar.markdown("---")
    
    menu_options = {
        "Dashboard": "üìä",
        "Gesti√≥n de Logias": "üèõÔ∏è", 
        "Gesti√≥n de Hermanos": "üë®‚Äçü§ù‚Äçüë®",
        "Gesti√≥n de Elementos": "ü¶Ω",
        "Formulario de Pr√©stamo": "üìã",
        "Gesti√≥n de Dep√≥sitos": "üè¢",
        "üìö Manual de Usuario": "üìö"
    }
    
    selected_option = st.sidebar.selectbox(
        "Seleccionar Secci√≥n",
        list(menu_options.keys()),
        format_func=lambda x: f"{menu_options[x]} {x}"
    )
    
    st.sidebar.markdown("---")
    st.sidebar.caption("Banco de Elementos Ortop√©dicos v2.1")
    if st.sidebar.button("üö™ Cerrar Sesi√≥n"):
        st.session_state.authenticated = False
        st.rerun()
    
    # Manejo de errores global para cada secci√≥n
    try:
        if selected_option == "Dashboard":
            mostrar_dashboard()
        elif selected_option == "Gesti√≥n de Logias":
            gestionar_logias()
        elif selected_option == "Gesti√≥n de Hermanos":
            gestionar_hermanos()
        elif selected_option == "Gesti√≥n de Elementos":
            gestionar_elementos()
        elif selected_option == "Formulario de Pr√©stamo":
            gestionar_prestamos()
        elif selected_option == "Gesti√≥n de Dep√≥sitos":
            gestionar_depositos()
        elif selected_option == "üìö Manual de Usuario":
            mostrar_manual_usuario()
    except Exception as e:
        st.error(f"‚ùå Error en la secci√≥n {selected_option}: {e}")
        st.info("üí° Intenta recargar la p√°gina o contactar al administrador si el error persiste")

if __name__ == "__main__":
    main()
